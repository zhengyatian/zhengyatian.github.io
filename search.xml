<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1Q84中的哲学</title>
    <url>/2020/03/07/1Q84%20%E4%B8%AD%E7%9A%84%E5%93%B2%E5%AD%A6/</url>
    <content><![CDATA[<ul>
<li>人被赋予希望，以此为燃料为目的度过人生。没有希望，人就活不下去。然而这和抛硬币相同。正面向上还是反面向上，只有等硬币落下来才能知道。</li>
</ul>
<a id="more"></a>

<ul>
<li><p>灯台之下最黑暗。</p>
</li>
<li><p>有光明的地方就必然有阴影，有阴影的地方就必然有光明。不存在没有光明的阴影，也不存在没有阴影的光明。</p>
</li>
<li><p>人并不是大限一到就溘然长逝的，而是先从内部缓缓地死去，最终迎来最后结算的日子。谁都逃脱不了。人必须为收下的东西支付代价。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 上线 AppStore - App Store Connect 不显示最新上传的 ipa？</title>
    <url>/2019/08/19/AppStoreConnect/</url>
    <content><![CDATA[<p>最新upload的ipa，在Connect中不显示，以为是网络延迟，或者同步信息延迟。刷新了好久还是不出现，那就查收一下邮件吧，我收到了如下的邮件。。。</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/12.png" alt="my app&#39;s issues"></p>
<a id="more"></a>

<p>这里面是我们刚刚打包的问题，一定要一一修改，不然Connect里不会显示的。我这个问题，就是权限描述没有加……</p>
<p>注意，现在权限的描述，必须写清楚该功能用在了哪里，类似”%%%应用想使用您的麦克风“ 这种描述是不行了，应该是”%%%应用在录音时需要使用您的麦克风“ 之类的。</p>
<p>当你收到下面这种邮件时，才表示我们的ipa没有问题，真正上传到Connect了，这个时候你再去刷新一下，应该就可以选择对应的包了。</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/13.png" alt="Upload真的成功了"></p>
<div contenteditable="plaintext-only"><div contenteditable="plaintext-only"><center>
  <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/flag.jpeg" class width="200"></div>
</center>


</div></div>]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>DeviceCheck</title>
    <url>/2020/06/05/DeviceCheck/</url>
    <content><![CDATA[<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/14.png" alt></p>
<p>最近才注意 iOS 11.0 中一个新增的小框架，于是简单学习了一下，已经有前辈写的很详细了，所以~~<a href="https://www.sunyazhou.com/2017/09/30/20170930DeviceCheck/" target="_blank" rel="noopener">参考自</a></p>
<a id="more"></a>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>iOS11 苹果改动了一个比较引开发者关注的亮点</p>
<p><strong>UDID之类的写到系统 keychain 的唯一标识会随着 app 删除而删除</strong></p>
<p>这个问题在微博上已经争论好几天：iOS11新的设备唯一标识 DCDevice</p>
<h2 id="介绍-API"><a href="#介绍-API" class="headerlink" title="介绍 API"></a>介绍 API</h2><p>我们首先看看<code>DCDevice</code>类都有啥</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;DeviceCheck/DeviceCheck.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line"></span><br><span class="line">API_AVAILABLE(ios(<span class="number">11.0</span>), tvos(<span class="number">11.0</span>)) API_UNAVAILABLE(watchos, macos)</span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DCDevice</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="comment">// The current device. </span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">class</span>, <span class="keyword">readonly</span>) DCDevice *currentDevice;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Check if this API is supported on the current device.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">getter</span>=isSupported, <span class="keyword">readonly</span>) <span class="built_in">BOOL</span> supported;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Generate a new device token that can be used to get/set the persistent bits for this device.This call generates a new value every time.</span></span><br><span class="line">- (<span class="keyword">void</span>)generateTokenWithCompletionHandler:(<span class="keyword">void</span>(^)(<span class="built_in">NSData</span> * _Nullable token, <span class="built_in">NSError</span> * _Nullable error))completion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br></pre></td></tr></table></figure>

<p>接口简直不能再简单了 <strong>创建实例调方法</strong></p>
<h2 id="使用-API"><a href="#使用-API" class="headerlink" title="使用 API"></a>使用 API</h2><p>下面我们来看下如何使用<code>DCDevice</code></p>
<p>导入头文件</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;DeviceCheck/DeviceCheck.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>check 是否支持 如果支持 的话会在回调以后返回 <code>token</code>(NSData)</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view.</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([DCDevice.currentDevice isSupported]) &#123;</span><br><span class="line">        [DCDevice.currentDevice generateTokenWithCompletionHandler:^(<span class="built_in">NSData</span> * _Nullable token, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">            <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, error.description);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// upload token to APP server</span></span><br><span class="line">                <span class="built_in">NSString</span> *deviceToken = [token base64EncodedStringWithOptions:<span class="built_in">NSDataBase64EncodingEndLineWithLineFeed</span>];</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"%lu %@"</span>, token.length, deviceToken);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>token 是个 2188字节(2k 多点)的二进制流,很小</p>
<h2 id="删除-重装App-如何处理"><a href="#删除-重装App-如何处理" class="headerlink" title="删除/重装App 如何处理"></a>删除/重装App 如何处理</h2><blockquote>
<p>DeviceCheck 允许你通过你的服务器与 Apple 服务器通讯，并为单个设备设置2k左右 的数据。 在设备上用 DeviceCheck API 生成一个 2字节的 token (00, 01,10,11)，然后将这个 token 发给自己的服务器，再由自己的服务器与 Apple 的 API 进行通讯，来更新或者查询该设备的值。这两字节 的数据用来追踪用户。比如。借助两个自己的数据，你可以得知用户究竟使用了该 App 多久。 该 API 可以成为：反欺诈领域： 试用7天 Uber、滴滴司机被封号后，防止重新注册账号接单 该用户是否已经领取过首次注册红包 APP防多开 因为传输的是 flag 级别的数据，并不会定位到该设备的使用者，所以相对安全。</p>
</blockquote>
<blockquote>
<p>但是对于购买了二手手机的使用场景，可能会出现一些边界情况，这个在业务中也需要考虑进去。</p>
</blockquote>
<p>引自<a href="https://github.com/ChenYilong/iOS11AdaptationTips/issues/22" target="_blank" rel="noopener">iOS11开发新特性之实用小tips</a></p>
<p>首先要明白我们 的 token 需要发给谁</p>
<ol>
<li>token 需要发送给我们自己公司的<code>server</code>做记录</li>
<li>我们公司自己的<code>server</code>去<code>Apple</code>的<code>server</code>查询<code>token</code>是否有效,从而来更新或者查询该设备值.</li>
<li>这<code>2k 左右的 token</code>不会因为设备删除 app 而删除 会一直存在苹果的 server(其实我觉得就是苹果自己去获取的设备唯一标识).</li>
</ol>
<p>那么 怎么查询和更新呢</p>
<h3 id="查询接口"><a href="#查询接口" class="headerlink" title="查询接口"></a>查询接口</h3><p><strong><a href="https://api.development.devicecheck.apple.com/v1/query_two_bits" target="_blank" rel="noopener">https://api.development.devicecheck.apple.com/v1/query_two_bits</a></strong></p>
<p>可以用终端自己模拟一下 就当作你自己是自己的服务器访问Apple 的服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -i --verbose -H <span class="string">"Authorization: Bearer &lt;GeneratedJWT&gt;"</span> \</span><br><span class="line">-X POST --data-binary @ValidQueryRequest.json \ </span><br><span class="line">https://api.development.devicecheck.apple.com/v1/query_two_bits</span><br></pre></td></tr></table></figure>

<p>json 的定义如下:</p>
<table>
<thead>
<tr>
<th align="center">字段 key</th>
<th align="center">类型</th>
<th align="center">说明</th>
<th align="center">必须</th>
</tr>
</thead>
<tbody><tr>
<td align="center">device_token</td>
<td align="center">String</td>
<td align="center">设备唯一标识 token</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">transaction_id</td>
<td align="center">String</td>
<td align="center">服务器产生的一个ID</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">timestamp</td>
<td align="center">Long</td>
<td align="center">服务器生成的UTC时间戳</td>
<td align="center">是</td>
</tr>
</tbody></table>
<p>它会 返回 如下格式</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"device_token"</span> : <span class="string">"wlkCDA2Hy/CfrMqVAShs1BAR/0sAiuRIUm5jQg0a..."</span>,</span><br><span class="line">   <span class="attr">"transaction_id"</span> : <span class="string">"5b737ca6-a4c7-488e-b928-8452960c4be9"</span>,</span><br><span class="line">   <span class="attr">"timestamp"</span> : <span class="number">1487716472000</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="更新接口"><a href="#更新接口" class="headerlink" title="更新接口"></a>更新接口</h3><p><strong><a href="https://api.development.devicecheck.apple.com/v1/update_two_bits" target="_blank" rel="noopener">https://api.development.devicecheck.apple.com/v1/update_two_bits</a></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -i --verbose -H <span class="string">"Authorization: Bearer &lt;GeneratedJWT&gt;"</span> \</span><br><span class="line">-X POST --data-binary @ValidUpdateRequest.json \</span><br><span class="line">https://api.development.devicecheck.apple.com/v1/update_two_bits</span><br></pre></td></tr></table></figure>

<p>json 的定义如下:</p>
<table>
<thead>
<tr>
<th align="center">字段 key</th>
<th align="center">类型</th>
<th align="center">说明</th>
<th align="center">必须</th>
</tr>
</thead>
<tbody><tr>
<td align="center">device_token</td>
<td align="center">String</td>
<td align="center">设备唯一标识 token</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">transaction_id</td>
<td align="center">String</td>
<td align="center">服务器产生的一个ID</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">timestamp</td>
<td align="center">Long</td>
<td align="center">服务器生成的UTC时间戳</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">bit0</td>
<td align="center">Boolean</td>
<td align="center">新的布尔值1</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">bit1</td>
<td align="center">Boolean</td>
<td align="center">新的布尔值2</td>
<td align="center">否</td>
</tr>
</tbody></table>
<p>json 的示例:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"device_token"</span> : <span class="string">"wlkCDA2Hy/CfrMqVAShs1BAR/0sAiuRIUm5jQg0a..."</span>,</span><br><span class="line">   <span class="attr">"transaction_id"</span> : <span class="string">"5b737ca6-a4c7-488e-b928-8452960c4be9"</span>,</span><br><span class="line">   <span class="attr">"timestamp"</span> : <span class="number">1487716472000</span>,</span><br><span class="line">   <span class="attr">"bit0"</span> : <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">"bit1"</span> : <span class="literal">false</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最终的方案"><a href="#最终的方案" class="headerlink" title="最终的方案"></a>最终的方案</h2><ol>
<li>iOS11以前版本暂且才用 UUID 等 keychian 方式</li>
<li>iOS11尽量才用新的 api 来适配解决</li>
</ol>
<p>对于 server 来讲可以 把 token 搞成新的附属字段 比如一个账号下登录多少个设备</p>
<p>那么 一个 UID 下面 就要附属 iOS 版本+ token</p>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>GiTalk 404</title>
    <url>/2021/06/22/GiTalk-404/</url>
    <content><![CDATA[<p><a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">GiTalk</a> 是一个基于 GitHub Issue 和 Preact 开发的评论插件。</p>
<p>这篇文章是要讲解怎么配置 GiTalk 吗？😂😂😂😂😂NO~网上有很多文章，例如这一个 <a href="https://cjjkkk.github.io/gitalk/" target="_blank" rel="noopener">例如</a>。</p>
<p>只是想记录一下，在修改了GitHub 用户名以后，使用 GiTalk 进行评论，却显示 404 的问题，因为我自己总是忘记了在哪里修改配置……😂😂😂😂😂</p>
<a id="more"></a>

<p>就是先这样，再这样，最后那样就好了……😂😂😂😂😂，又是蠢哭的一天。</p>
<center>
    <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/15.png" class width="300"></div>
    <div style="display:inline-block;margin-left:10px;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/16.png" class width="240"></div>
</center>

<div contenteditable="plaintext-only"><div contenteditable="plaintext-only"><center>
  <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/17.png" class width="500"></div>
</center>






</div></div>]]></content>
      <tags>
        <tag>7788</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + GitHub Pages 404</title>
    <url>/2017/10/02/GitHubPages404/</url>
    <content><![CDATA[<p>如何配置GitHub Pages网上资料很多，这里就不多说了，我们补充一个问题的解决方式。很多人都出会出现，Hexo项目传到 GitHub 的仓库后，访问 <code>username.github.io</code> 域名，结果是404</p>
<p>我搜集到的解决办法大概有三个，希望能帮到你：</p>
<p>​        <a id="more"></a></p>
<h4 id="1、Git-仓库的仓库名和-GitHub-Pages-的域名，按照GitHub的要求，配置成："><a href="#1、Git-仓库的仓库名和-GitHub-Pages-的域名，按照GitHub的要求，配置成：" class="headerlink" title="1、Git 仓库的仓库名和 GitHub Pages 的域名，按照GitHub的要求，配置成："></a>1、Git 仓库的仓库名和 GitHub Pages 的域名，按照GitHub的要求，配置成：</h4><p>&lt;github账号名&gt;.github.io</p>
<p>像我就是 ATommyGirl.github.io</p>
<h4 id="2、检查-Hexo-站点的配置文件-condig-yml-中关于-Git-的设置是否有问题"><a href="#2、检查-Hexo-站点的配置文件-condig-yml-中关于-Git-的设置是否有问题" class="headerlink" title="2、检查 Hexo 站点的配置文件 _condig.yml 中关于 Git 的设置是否有问题"></a>2、检查 Hexo 站点的配置文件 _condig.yml 中关于 Git 的设置是否有问题</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:ATommyGirl/ATommyGirl.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>看下 repo 和 branch 是否写错了，如果你是从网上复制的这一端配置，顺便检查一下yml 格式是不是错了，多了一个空格之类的呀，哈哈哈。</p>
<h4 id="3、缺少-index-html-文件，或者说”首页没了”，这个是我当时遇到的问题"><a href="#3、缺少-index-html-文件，或者说”首页没了”，这个是我当时遇到的问题" class="headerlink" title="3、缺少 index.html 文件，或者说”首页没了”，这个是我当时遇到的问题"></a>3、缺少 index.html 文件，或者说”首页没了”，这个是我当时遇到的问题</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在站点目录下，Git Bash 中 执行</span></span><br><span class="line">npm install hexo-generator-index --save</span><br></pre></td></tr></table></figure>

<p>之后就生成 index.html 文件了，然后重新执行上传 <code>hexo clean</code> <code>hexo g -d</code> 试试，反正我的是可以了。我是做移动端开发的，web前端着实有点迷……也都是东拼西凑的资料。</p>
<p>需要联系的，去 “关于(About)” 中找到我吧。</p>
]]></content>
      <tags>
        <tag>7788</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客等静态网页提交到谷歌和百度收录</title>
    <url>/2021/06/29/Hexo%E5%8D%9A%E5%AE%A2%E7%AD%89%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%8F%90%E4%BA%A4%E5%88%B0%E8%B0%B7%E6%AD%8C%E5%92%8C%E7%99%BE%E5%BA%A6%E6%94%B6%E5%BD%95/</url>
    <content><![CDATA[<h2 id="什么是-站点地图-？"><a href="#什么是-站点地图-？" class="headerlink" title="什么是 站点地图 ？"></a>什么是 站点地图 ？</h2><blockquote>
<p> 站点地图是一个网站所有链接的容器。很多网站的连接层次比较深，爬虫很难抓取到，站点地图可以方便爬虫抓取网站页面，通过抓取网站页面，清晰了解网站的架构，网站地图一般存放在根目录下并命名 sitemap，为爬虫指路，增加网站重要内容页面的收录。站点地图就是根据网站的结构、框架、内容，生成的导航网页文件。站点地图对于提高用户体验有好处，它们为网站访问者指明方向，并帮助迷失的访问者找到他们想看的页面。</p>
<p>–百度百科</p>
</blockquote>
<h2 id="一、生成站点地图"><a href="#一、生成站点地图" class="headerlink" title="一、生成站点地图"></a>一、生成站点地图</h2><ol>
<li><p>安装站点地图生成插件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-generator</span><span class="literal">-baidu</span><span class="literal">-sitemap</span> -<span class="literal">-save</span></span><br><span class="line">npm install hexo<span class="literal">-generator</span><span class="literal">-sitemap</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>
</li>
<li><p>在博客根目录的<code>_config.yml</code>中添加自动生成 sitemap 的配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>

<p>同时确认一下该文件里面 url 对应的是否是接下来要提交的域名</p>
</li>
<li><p>生成和部署</p>
<p>此时会在<code>public</code>目录下生成两个文件</p>
<blockquote>
<p><code>sitemap.xml</code> 用于提交给谷歌</p>
<p><code>baidusitemap.xml</code> 用于提交给百度</p>
</blockquote>
</li>
<li><p>部署成功后，在浏览器打开 <code>你的域名/baidusitemap.xml</code>，成功展示即代表成功</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413210038.png" alt="img"></p>
</li>
</ol>
<h2 id="二、提交到百度站长（百度收录）"><a href="#二、提交到百度站长（百度收录）" class="headerlink" title="二、提交到百度站长（百度收录）"></a>二、提交到百度站长（百度收录）</h2><h4 id="解决百度不爬取-Github-Pages-的问题"><a href="#解决百度不爬取-Github-Pages-的问题" class="headerlink" title="解决百度不爬取 Github Pages 的问题"></a>解决百度不爬取 Github Pages 的问题</h4><p>如果你的博客部署在 Github Pages, 百度是不会爬取的，这种情况需要借用其他平台转换一下。</p>
<p>这里以 coding 为例</p>
<ol>
<li><p>在 coding 中也创建一个博客项目，取得提交地址</p>
</li>
<li><p>在博客根目录的<code>_config.yml</code>中添加 coding 仓库的配置，注意增加了<code>-</code>号，这样在部署的时候会同时部署到 Github 和 coding</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/hansionit/hansionit.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://e.coding.net/hansion_it/Blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>hexo g -d</code>生成部署一下，会提交代码到 coding</p>
</li>
<li><p>在 coding 中开启 pages 服务，配置自定义域名，在你的域名解析控制台增加两条 CNAME，解析线路选择<code>百度</code>，让百度解析到 coding 的地址</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414122236.png" alt="img"></p>
</li>
</ol>
<h4 id="sitemap-方式提交"><a href="#sitemap-方式提交" class="headerlink" title="sitemap 方式提交"></a>sitemap 方式提交</h4><ol>
<li><p>查询是否被收录</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413204214.png" alt="img"></p>
</li>
<li><p>若没有收录，则点击<code>提交网址</code>进行提交</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414122915.png" alt="img"></p>
<p>然后打开 <a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度搜索资源平台</a>，进入<code>站点管理</code> -&gt; <code>添加网站</code>    </p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413202939.png" alt="img"></p>
</li>
<li><p>添加完网站后，点击<code>管理站点</code> -&gt; <code>站点属性设置</code></p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413210128.png" alt="img"></p>
</li>
<li><p>选择链接提交</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413210323.png" alt="img"></p>
</li>
<li><p>选择 sitemap，输入上文中的 sitmap 地址，点击提交</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413210527.png" alt="img">    如果提示错误，<strong>以下文件已经提交过了，如想重新提交，请先到文件对应工具的站点下删除此文件。</strong></p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413211123.png" alt="img"></p>
<p>可在下方进行勾选删除后重新提交，如果链接一模一样，没有必要删除，点击删除按钮左边的手动更新文件更新一下即可</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413211221.png" alt="img"></p>
</li>
</ol>
<h4 id="主动推送方式提交"><a href="#主动推送方式提交" class="headerlink" title="主动推送方式提交"></a>主动推送方式提交</h4><ol>
<li><p>安装插件<code>npm install hexo-baidu-url-submit --save</code></p>
</li>
<li><p>在博客根目录的<code>config.yml</code>中添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">100</span>                 <span class="comment"># 提交最新的多少个链接</span></span><br><span class="line">  <span class="attr">host:</span>       <span class="comment"># 在百度站长平台中添加的域名</span></span><br><span class="line">  <span class="attr">token:</span>     <span class="comment"># 秘钥</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span></span><br></pre></td></tr></table></figure>

<p>token 在推送的接口中有</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413212519.png" alt="img"></p>
</li>
<li><p>同样是该文件，在<code>deployer</code>中新加一行<code>type: baidu_url_submitter</code>, 注意需要为两个<code>type</code>前面添加<code>-</code>符号，结果如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://e.coding.net/hansion_it/Blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>生成部署</p>
</li>
</ol>
<p>若最后有输出<code>{&quot;remain&quot;:2997,&quot;success&quot;:3} INFO Deploy done: baidu_url_submitter</code>, 则代表成功, success 的值代表成功多少条，remain 的值代表当天剩余可推送条数</p>
<h4 id="自动推送方式提交"><a href="#自动推送方式提交" class="headerlink" title="自动推送方式提交"></a>自动推送方式提交</h4><p>Hexo 的有些主题已完成了此步骤，可先自行确认是否已经完成，一般完成此步骤的主题的<code>_config.yml</code>文件中会有<code>baidu_push</code>属性，将其设置为<code>true</code></p>
<p>选择<code>自动推送</code> -&gt; <code>复制代码</code></p>
<p>没有集成这项功能的，我们可以把代码粘贴到 <code>header.ejs</code> 文件的 <code>&lt;head&gt;</code> 与 <code>&lt;/head&gt;</code> 标签之间</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413211705.png" alt="img"></p>
<h2 id="三、提交到谷歌搜索（谷歌收录）"><a href="#三、提交到谷歌搜索（谷歌收录）" class="headerlink" title="三、提交到谷歌搜索（谷歌收录）"></a>三、提交到谷歌搜索（谷歌收录）</h2><ol>
<li><p>进入 <a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="noopener">Google Search Console</a> 登录你的谷歌账号</p>
</li>
<li><p>在<code>网址前缀</code>中填写地址</p>
</li>
<li><p>下载验证文件</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414124339.png" alt="img"></p>
</li>
<li><p>存入<strong>主题</strong>的<code>source</code>目录，而不是根目录的 source 目录，<code>hexo g -d</code>生成部署，然后点击<code>验证</code>，验证成功如下图所示。若提示<code>您的验证文件中的内容不正确。您使用的验证文件是从这里下载的吗?</code>, 你需要检查一下目录是否放至正确</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414132047.png" alt="img"></p>
</li>
<li><p>点击<code>前往资源页面</code>，点击<code>站点地图</code>, 输入站点地图的地址，点击<code>提交</code></p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414132514.png" alt="img"></p>
</li>
<li><p>提交成功后，若显示<code>无法获取</code>，点击<code>无法获取</code>会进行网页获取，再刷新网页即可显示成功</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414132654.png" alt="img"></p>
</li>
<li><p>可以顺便把百度的 sitemap 也提交上<code>baidusitemap.xml</code>, 成功结果如下：</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414132951.png" alt="img"></p>
</li>
</ol>
<p>PS: <a href="https://www.hansion.win/2020/04/13/hexo-bo-ke-deng-jing-tai-wang-ye-ti-jiao-bai-du-he-google-gu-ge-shou-lu/#toc-heading-8" target="_blank" rel="noopener">转载自Hansion</a>，按照博主的说明，基本上算是完成了，可以成功搜到一部分内容，有些搜到的标题很诡异，还在看~~</p>
]]></content>
      <tags>
        <tag>7788</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 文字中如何插入图片</title>
    <url>/2018/02/22/Hexo%E6%96%87%E5%AD%97%E4%B8%AD%E5%A6%82%E4%BD%95%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p>在Hexo 的文章中加入图片，很简单的，来试试先：</p>
<a id="more"></a>

<ul>
<li><p><strong>设置站点配置_config.yml</strong>:</p>
<p>将 <code>post_asset_folder: false</code> 改为 <code>post_asset_folder: true</code></p>
</li>
<li><p><strong>安装插件</strong>:</p>
<p> <code>npm install https://github.com/CodeFalling/hexo-asset-image -- save</code></p>
</li>
<li><p><strong>运行</strong>:</p>
<p> <code>hexo n &quot;XXXXXX&quot;</code></p>
<p>生成 XXXXX.md 博文时就会在 <code>/source/_posts</code> 目录下生成 XXXXXX 的文件夹，将你想在XXXXX文章中插入的照片放置到这个同名文件夹中即可，图片的命名随意。</p>
</li>
<li><p><strong>添加图片</strong>:</p>
<p>在想添加的位置写入<code>![](图片名字.图片格式)</code>，例如<code>![](1.png)</code></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>7788</tag>
      </tags>
  </entry>
  <entry>
    <title>Command CompileAssetCatalog failed with a nonzero exit code</title>
    <url>/2020/02/14/LaunchImage/</url>
    <content><![CDATA[<p>几年前较老的工程 用 xcode 11 打开以后，debug报错，原因是  LaunchImage 文件没找到<br>如果遇到了同样的问题，可以检查下是否缺失了。</p>
<a id="more"></a>

<p>更新：<br>在 iOS 13 以后，LaunchImage 被废弃了，要求使用 LaunchScreen.storyboard。老项目里下图中的这个位置会默认指定的使用  LaunchImage，但文件中又没有，所以会报这个错误。删掉这里的配置就好了。</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/23.png" alt="LaunchImage Setting.png"></p>
<div contenteditable="plaintext-only"><div contenteditable="plaintext-only"><center>
  <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/flag.jpeg" class width="200"></div>
</center>

</div></div>]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Inferred (Constraints) 和 Autoresizing Mask</title>
    <url>/2021/01/07/Inferred-Constraints-%E5%92%8C-Autoresizing-Mask/</url>
    <content><![CDATA[<p>很久没有写过UI了，前一阵更新完 Xcode 12.2 和 iOS 14.* 后，老项目和新项目都需要调整点页面布局的问题。在 Copy 或者 新建 View 后，切换使用的设备时布局没有自适应。以为约束没加上，但当我要去加约束的时候，发现已经无法操作了？！！！</p>
<h5 id="乌龙"><a href="#乌龙" class="headerlink" title="乌龙"></a>乌龙</h5><p>可用与不可用：</p>
<p>​        <a id="more"></a></p>
<center>
    <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/18.png" class width="300"></div>
    <div style="display:inline-block;margin-left:10px;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/19.png" class width="300"></div>
</center>


<p>吓死我了，CV 大法居然都不好使了？！！！！！</p>
<p>对比了一下两个 View 的设置以后，发现是 Layout 选项不同的原因，<code>Inferred (Constraints)</code> 和 <code>Autoresizing Mask</code> 。</p>
<center>
    <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/20.png" class width="300"></div>
    <div style="display:inline-block;margin-left:10px;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/21.png" class width="300"></div>
</center>


<p>新页面自动使用 <code>Autoresizing Mask</code> ，不清楚是不是 Xcode 12.* 的bug，我记得 <code>Autoresizing Mask</code>  早些时候就不怎么用了，居然又出来了，还是很有意思的。</p>
<h5 id="PS-有兴趣可以看看这两个讨论"><a href="#PS-有兴趣可以看看这两个讨论" class="headerlink" title="PS: 有兴趣可以看看这两个讨论"></a>PS: 有兴趣可以看看这两个讨论</h5><p><a href="https://developer.apple.com/forums/thread/669586" target="_blank" rel="noopener">Constraint Layout No Longer Available</a></p>
<p><a href="https://dev.classmethod.jp/articles/new-auto-layout-feature/" target="_blank" rel="noopener">[iOS 10] Auto Layout の新機能について</a></p>
<h5 id="PPS-Hexo-里图片并排原来可以这样写……"><a href="#PPS-Hexo-里图片并排原来可以这样写……" class="headerlink" title="PPS:  Hexo 里图片并排原来可以这样写……"></a>PPS:  Hexo 里图片并排原来可以这样写……</h5><p><a href="https://blog.ahao.moe/posts/Hexo_multiple_images_side_by_side.html" target="_blank" rel="noopener">参考自</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:inline-block;"</span>&gt;</span>&#123;%img /img/1.png 300%&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:inline-block;margin-left:10px;"</span>&gt;</span>&#123;%img /img/2.png 300%&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 下 IDEA 无法启动的问题</title>
    <url>/2019/01/24/Mac%E4%B8%8BIDEA%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>要使用IDEA，突然提示打不开，不要慌，问题不大，按照下面的步骤试试先？</p>
<blockquote>
<p>打开finder-&gt;应用程序-&gt;idea.app-&gt;右键-&gt;显示包内容-&gt;然后MaxOS-&gt;双击shell脚本（idea）</p>
</blockquote>
<a id="more"></a>

<p>这样是通过命令行的方式来启动IDEA。<br>仔细看里面的提示，尤其Error开头的信息，应该会有具体原因。</p>
<p>我的IDEA 使用的“破解版”……you know？ 然后<code>JetbrainsCrack-3.1-release-enc.jar</code> 被我不小心删了，放回原位就好了……</p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>URL Loading System 之 NSURLRequest/URLRequest</title>
    <url>/2018/04/19/NSURLRequest/</url>
    <content><![CDATA[<h2 id="NSURLRequest"><a href="#NSURLRequest" class="headerlink" title="NSURLRequest"></a>NSURLRequest</h2><blockquote>
<p>NSURLRequest /URLRequest 封装了请求的两个基本属性：要加载的URL和用于加载该请求的策略。通常用于 HTTP 和 HTTPS 请求，包括 HTTP 方法（<code>GET</code>，<code>POST</code>等）和 HTTP 标头。可变子类型是 NSMutableURLRequest 。</p>
</blockquote>
<h3 id="一个平平无奇的-GET-请求"><a href="#一个平平无奇的-GET-请求" class="headerlink" title="一个平平无奇的 GET 请求"></a>一个平平无奇的 GET 请求</h3><blockquote>
<p>网络请求的测试，我们访问 httpbin 来进行，方便对比请求的响应</p>
<p>官网：<a href="https://httpbin.org/" target="_blank" rel="noopener">https://httpbin.org/</a></p>
<p>httpbin 可以把我们请求时的信息，返回给我们</p>
</blockquote>
<a id="more"></a>

<p>PS: 在swift 中没有细分可变子类型了，<code>let</code> 声明的对象就是不可变，<code>var</code> 声明就是可变，那我们手动添加一个头部信息，看看效果。</p>
<h4 id="url"><a href="#url" class="headerlink" title="url"></a>url</h4><h4 id="allHTTPHeaderFields"><a href="#allHTTPHeaderFields" class="headerlink" title="allHTTPHeaderFields"></a>allHTTPHeaderFields</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="type">URL</span>.<span class="keyword">init</span>(string: <span class="string">"https://httpbin.org/get"</span>)</span><br><span class="line"><span class="keyword">var</span> request = <span class="type">URLRequest</span>.<span class="keyword">init</span>(url: url!)</span><br><span class="line">request.setValue(<span class="string">"Tiantian"</span>, forHTTPHeaderField: <span class="string">"Tommy-Girl"</span>)</span><br><span class="line"><span class="built_in">print</span>(request.allHTTPHeaderFields ?? [:])</span><br><span class="line"><span class="comment">//请求怎么发出去呢？我们先使用苹果提供的单例尝试一下</span></span><br><span class="line"><span class="keyword">let</span> task = <span class="type">URLSession</span>.shared.dataTask(with: request) &#123; (data, response, error) <span class="keyword">in</span></span><br><span class="line">    <span class="comment">//查看 response，我们打印出来可以看到一个 NSHTTPURLResponse 对象，以及部分头部信息</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Response:"</span>)</span><br><span class="line">    <span class="built_in">print</span>(response <span class="keyword">as</span> <span class="type">Any</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> statusCode = (response <span class="keyword">as</span>? <span class="type">HTTPURLResponse</span>)?.statusCode ?? -<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> statusCode == <span class="number">200</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> data = data <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> object = <span class="keyword">try</span> <span class="type">JSONSerialization</span>.jsonObject(with: data, options: [])</span><br><span class="line">            <span class="built_in">print</span>(object)</span><br><span class="line">        &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error &#123;</span><br><span class="line">            <span class="built_in">print</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">task.resume()</span><br></pre></td></tr></table></figure>

<p>返回结果：</p>
<p>我们刚刚添加了一个 名为 Tommy-Girl 值为 Tiantian 的头部信息，服务器已经收到，并且原封不动帮我们返回了。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET: </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="attr">"headers"</span>: &#123;</span><br><span class="line">    <span class="attr">"Accept"</span>: <span class="string">"*/*"</span>, </span><br><span class="line">    <span class="attr">"Accept-Encoding"</span>: <span class="string">"gzip, deflate, br"</span>, </span><br><span class="line">    <span class="attr">"Accept-Language"</span>: <span class="string">"en-us"</span>, </span><br><span class="line">    <span class="attr">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="attr">"Tommy-Girl"</span>: <span class="string">"Tiantian"</span>, </span><br><span class="line">    <span class="attr">"User-Agent"</span>: <span class="string">"URLLoadingSystem/1 CFNetwork/1220.1 Darwin/19.6.0"</span>, </span><br><span class="line">    <span class="attr">"X-Amzn-Trace-Id"</span>: <span class="string">"Root=1-6094ffc6-18f7b8391c8bcc4049bc6beb"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="attr">"origin"</span>: <span class="string">"*.*.*.*"</span>, </span><br><span class="line">  <span class="attr">"url"</span>: <span class="string">"https://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="一个略显英俊的-POST-请求"><a href="#一个略显英俊的-POST-请求" class="headerlink" title="一个略显英俊的 POST 请求"></a>一个略显英俊的 POST 请求</h3><p>PS: GET 和 POST 请求的区别，以及各<code>Status Code</code> 的含义见另一篇文章<a href="https://atommygirl.github.io/2017/10/02/HTTP%20%E7%9A%84%E4%B8%80%E7%82%B9%E5%84%BF%E5%B0%8F%E7%9F%A5%E8%AF%86/#%E4%B8%89%E3%80%81%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">HTTP 的一点儿小知识</a>。</p>
<p>如果上面的代码，我们直接把 URL 替换为只允许 POST 请求的服务，我们会收到一个 405 的code 码，405 一般表示请求方法不允许。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Response:</span><br><span class="line">Optional(&lt;NSHTTPURLResponse: 0x6000026150e0&gt; &#123; URL: https://httpbin.org/post &#125; </span><br><span class="line">&#123; Status Code: 405, Headers &#123;</span><br><span class="line">    "Access-Control-Allow-Origin" =     (</span><br><span class="line">        <span class="string">"*"</span></span><br><span class="line">    );</span><br><span class="line">    "Content-Length" =     (</span><br><span class="line">        <span class="number">178</span></span><br><span class="line">    );</span><br><span class="line">    "Content-Type" =     (</span><br><span class="line">        <span class="string">"text/html"</span></span><br><span class="line">    );</span><br><span class="line">    Date =     (</span><br><span class="line">        <span class="string">"Fri, 07 May 2018 08:22:31 GMT"</span></span><br><span class="line">    );</span><br><span class="line">    Server =     (</span><br><span class="line">        <span class="string">"gunicorn/19.9.0"</span></span><br><span class="line">    );</span><br><span class="line">    "access-control-allow-credentials" =     (</span><br><span class="line">        true</span><br><span class="line">    );</span><br><span class="line">    allow =     (</span><br><span class="line">        <span class="string">"POST, OPTIONS"</span></span><br><span class="line">    );</span><br><span class="line">&#125; &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="httpMethod"><a href="#httpMethod" class="headerlink" title="httpMethod"></a>httpMethod</h4><p>那怎么发送一个 POST 请求呢？很简单，<code>URLRequest</code> 有一个 <code>httpMethod</code> 属性，指定对应的方法名即可</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">request.httpMethod = <span class="string">"POST"</span></span><br></pre></td></tr></table></figure>

<h4 id="httpBody"><a href="#httpBody" class="headerlink" title="httpBody"></a>httpBody</h4><p>一个 <code>NSData/Data</code> 类型的属性，用于添加参数，可以但不限于：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> parameter = [<span class="string">"a"</span> : <span class="string">"1"</span>,</span><br><span class="line">                 <span class="string">"b"</span> : <span class="string">"2"</span>]</span><br><span class="line"><span class="keyword">let</span> data = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.data(withJSONObject: parameter, options: [])</span><br><span class="line">request.httpBody = data</span><br></pre></td></tr></table></figure>

<h4 id="timeoutInterval"><a href="#timeoutInterval" class="headerlink" title="timeoutInterval"></a>timeoutInterval</h4><blockquote>
<p> 超时时间</p>
</blockquote>
<h4 id="httpShouldHandleCookies"><a href="#httpShouldHandleCookies" class="headerlink" title="httpShouldHandleCookies"></a>httpShouldHandleCookies</h4><blockquote>
<p>决定这个请求是否要使用cookie，默认为YES。</p>
</blockquote>
<p>常用到的就上面这几个属性，真实开发中我们很少会直接使用  <code>Request</code>  发送请求，往往依赖于三方框架，像 OC 的 <code>AFNetworking</code> 、swift 的 <code>Alamofire</code> 等等。</p>
<h2 id="系列："><a href="#系列：" class="headerlink" title="系列："></a>系列：</h2><p><a href="https://tommygirl.cn/2018/04/19/URLLoadingSystem/">URL Loading System[译]</a></p>
<p><a href="https://tommygirl.cn/2018/04/19/NSURLRequest/">NSURLRequest</a></p>
<p><a href="https://tommygirl.cn/2018/04/20/NSURLResponse/">NSURLResponse</a></p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>URL Loading System 之 NSURLResponse/URLResponse</title>
    <url>/2018/04/20/NSURLResponse/</url>
    <content><![CDATA[<h2 id="NSURLResponse"><a href="#NSURLResponse" class="headerlink" title="NSURLResponse"></a>NSURLResponse</h2><blockquote>
<p>NSURLResponse/URLResponse 类中存放请求的回执信息，在发送网络请求时，如果请求成功，首先会接收到服务端的回执信息，直接开始接收具体的返回数据。与协议或URL方案无关。</p>
</blockquote>
<p>主要有以下几个属性，并且都是<code>只读</code>的，因为是服务器帮我们指定的，所以一般我们是不能自定义这些属性的：</p>
<h3 id="url"><a href="#url" class="headerlink" title="url"></a>url</h3><blockquote>
<p>本次请求的URL地址</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">var</span> url: <span class="type">URL?</span> &#123; <span class="keyword">get</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="mimeType"><a href="#mimeType" class="headerlink" title="mimeType"></a>mimeType</h3><blockquote>
<p>返回数据的数据类型（纯文本，视频，语音，超文本等）</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">var</span> mimeType: <span class="type">String?</span> &#123; <span class="keyword">get</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="expectedContentLength"><a href="#expectedContentLength" class="headerlink" title="expectedContentLength"></a>expectedContentLength</h3><blockquote>
<p>获取返回数据的内容长度，服务端人员不靠谱的话，这个属性的值可能奇奇怪怪，别问我为什么~</p>
</blockquote>
<p>可以预计该资源的大小，计算下载进度等等。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">var</span> expectedContentLength: <span class="type">Int64</span> &#123; <span class="keyword">get</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="textEncodingName"><a href="#textEncodingName" class="headerlink" title="textEncodingName"></a>textEncodingName</h3><blockquote>
<p>获取返回数据的编码方式</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">var</span> textEncodingName: <span class="type">String?</span> &#123; <span class="keyword">get</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="suggestedFilename"><a href="#suggestedFilename" class="headerlink" title="suggestedFilename"></a>suggestedFilename</h3><blockquote>
<p>建议的文件名字，MIMEType为扩展名</p>
</blockquote>
<p>如果服务端返回的是一个文件，这个属性是一个建议的文件名字，客户端可以用它来进行保存，当然也可以自定义。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">var</span> suggestedFilename: <span class="type">String?</span> &#123; <span class="keyword">get</span> &#125;</span><br></pre></td></tr></table></figure>



<h2 id="NSHTTPURLResponse"><a href="#NSHTTPURLResponse" class="headerlink" title="NSHTTPURLResponse"></a>NSHTTPURLResponse</h2><blockquote>
<p>NSHTTPURLResponse/HTTPURLResponse 是 NSURLResponse 的一个子类，如果是 HTTP 请求，请求回执会被封装为 NSHTTPURLResponse 对象。</p>
</blockquote>
<p>除了有父类那些属性外，还扩展了几个属性：</p>
<h3 id="statusCode"><a href="#statusCode" class="headerlink" title="statusCode"></a>statusCode</h3><blockquote>
<p>请求的状态码</p>
</blockquote>
<p>标准 HTTP 协议内容，不同的 code 码表示不同的请求状态，参见<a href="https://tommygirl.cn/2015/08/02/HTTP%20%E7%9A%84%E4%B8%80%E7%82%B9%E5%84%BF%E5%B0%8F%E7%9F%A5%E8%AF%86/#%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%BA%94%E7%9A%84%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81">网络响应的常见状态</a> 。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">var</span> statusCode: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="allHeaderFields"><a href="#allHeaderFields" class="headerlink" title="allHeaderFields"></a>allHeaderFields</h3><blockquote>
<p>请求头中所有的字段</p>
</blockquote>
<p>一个字典，所以可以通过 key-value 来取值，一个简单的头部信息可能包含一些默认的 HTTP 头部信息，当然开发中我们也可以和服务端约定好自定义的字段。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">var</span> allHeaderFields: [<span class="type">AnyHashable</span> : <span class="type">Any</span>] &#123; <span class="keyword">get</span> &#125;</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">(&lt;<span class="type">NSHTTPURLResponse</span>: <span class="number">0x60000154cd80</span>&gt; &#123; <span class="type">URL</span>: https:<span class="comment">//httpbin.org/get &#125; &#123; Status Code: 200, Headers &#123;</span></span><br><span class="line">    <span class="string">"Access-Control-Allow-Origin"</span> =     (</span><br><span class="line">        <span class="string">"*"</span></span><br><span class="line">    );</span><br><span class="line">    <span class="string">"Content-Length"</span> =     (</span><br><span class="line">        <span class="number">404</span></span><br><span class="line">    );</span><br><span class="line">    <span class="string">"Content-Type"</span> =     (</span><br><span class="line">        <span class="string">"application/json"</span></span><br><span class="line">    );</span><br><span class="line">    <span class="type">Date</span> =     (</span><br><span class="line">        <span class="string">"Thu, 08 Jul 2018 10:13:14 GMT"</span></span><br><span class="line">    );</span><br><span class="line">    <span class="type">Server</span> =     (</span><br><span class="line">        <span class="string">"gunicorn/19.9.0"</span></span><br><span class="line">    );</span><br><span class="line">    <span class="string">"access-control-allow-credentials"</span> =     (</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    );</span><br><span class="line">&#125; &#125;)</span><br></pre></td></tr></table></figure>



<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>iOS 的接口中，请求回执往往定义的是 <code>NSURLResponse</code> 类型，但是正如我们上面所说，如果是 HTTP 请求，请求回执会被封装为 <code>NSHTTPURLResponse</code>  对象。像获取 <code>statusCode</code>  的时候就需要自己做一下类型转换。</p>
<p>swift 中举例：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> statusCode = (response <span class="keyword">as</span>? <span class="type">HTTPURLResponse</span>)?.statusCode ?? -<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> statusCode == <span class="number">200</span> &#123;</span><br><span class="line">    <span class="comment">//request success.</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="系列："><a href="#系列：" class="headerlink" title="系列："></a>系列：</h2><p><a href="https://tommygirl.cn/2018/04/19/URLLoadingSystem/">URL Loading System[译]</a></p>
<p><a href="https://tommygirl.cn/2018/04/19/NSURLRequest/">NSURLRequest</a></p>
<p><a href="https://tommygirl.cn/2018/04/20/NSURLResponse/">NSURLResponse</a></p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>UIDocumentInteractionController</title>
    <url>/2021/02/07/UIDocumentInteractionController/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>官方文档：<a href="https://developer.apple.com/documentation/uikit/uidocumentinteractioncontroller" target="_blank" rel="noopener">UIDocumentInteractionController</a></p>
</blockquote>
<p>一种视图控制器，用于预览、打开或打印应用程序无法直接处理的文件格式的文件。名字叫控制器，但却是继承自  NSObject ……</p>
<h2 id="iPhone"><a href="#iPhone" class="headerlink" title="iPhone"></a>iPhone</h2><p>在 iOS 上简单的使用它来打开文件是类似这样的：</p>
<a id="more"></a>



<p>初始化的时候，基本就是指定文件路径、指定本应用内打开，还是直接弹出选择菜单可以其他应用内打开</p>
<ul>
<li>初始化：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"hhh"</span>, withExtension: <span class="string">"docx"</span>)</span><br><span class="line"><span class="keyword">let</span> documentController = <span class="type">UIDocumentInteractionController</span>.<span class="keyword">init</span>(url: url!)</span><br></pre></td></tr></table></figure>

<ul>
<li>本应用内预览文档</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置代理 --本应用内预览必须要添加代理 UIDocumentInteractionControllerDelegate</span></span><br><span class="line">documentController.delegate = <span class="keyword">self</span></span><br><span class="line"><span class="comment">//当前APP打开  需实现协议方法才可以完成预览功能</span></span><br><span class="line">documentController.presentPreview(animated: <span class="literal">true</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">documentInteractionControllerViewControllerForPreview</span><span class="params">(<span class="number">_</span> controller: UIDocumentInteractionController)</span></span> -&gt; <span class="type">UIViewController</span> &#123;</span><br><span class="line">  <span class="comment">//这里需要返回给一个控制器用于展现 documentController 在其上面，所以我们就返回当前控制器self</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们打开一个文档的时候就是左边这样的效果，直接预览文档。右上角的分享按钮也可以选择其他 App 打开文档：</p>
<center>
    <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/28.png" class width="300"></div>
    <div style="display:inline-block;margin-left:10px;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/29.png" class width="300"></div>
</center>


<ul>
<li>其他应用内预览文档</li>
</ul>
<p>网上很多都是说，加上打开 Menu 菜单(见右图)的一句代码就可以用第三方应用打开，例如:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"hhh"</span>, withExtension: <span class="string">"docx"</span>)</span><br><span class="line"><span class="keyword">let</span> documentController = <span class="type">UIDocumentInteractionController</span>.<span class="keyword">init</span>(url: url!)</span><br><span class="line">documentController.delegate = <span class="keyword">self</span></span><br><span class="line">documentController.presentOptionsMenu(from: <span class="keyword">self</span>.view.frame, <span class="keyword">in</span>: <span class="keyword">self</span>.view, animated: <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<p>只这样写你会发现，菜单确实可以弹出，但你点分享到任何一个 App （包括 Quick Look）都是没反应的，而且在 console 中会报如下错误：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">Could not instantiate <span class="keyword">class</span> <span class="built_in">NSURL</span>. Error: Error Domain=<span class="built_in">NSCocoaErrorDomain</span> Code=<span class="number">4864</span> <span class="string">"The URL archive of type “public.url” contains invalid data."</span> UserInfo=&#123;<span class="built_in">NSDebugDescription</span>=The URL archive of type “public.url” contains invalid data.&#125;</span><br></pre></td></tr></table></figure>

<p>……</p>
<p>网上的资料给的解决办法是 documentController 这个变量需要被持有一下，才可以用第三方 App 打开文档，所以上面的代码就变成了这样：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UIDocumentInteractionControllerDelegate</span>  </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> documentController = <span class="type">UIDocumentInteractionController</span>()</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">showDocInteractController</span><span class="params">()</span></span> -&gt; <span class="type">Void</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"hhh"</span>, withExtension: <span class="string">"docx"</span>)</span><br><span class="line">    documentController.url = url</span><br><span class="line">    documentController.delegate = <span class="keyword">self</span></span><br><span class="line">    documentController.presentOptionsMenu(from: <span class="keyword">self</span>.view.frame, <span class="keyword">in</span>: <span class="keyword">self</span>.view, animated: <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>持有一下就可以，咩<del>~</del></p>
<p>PS : 设置 <code>presentOptionsMenuFromRect</code> 的话，我们给的是 全屏，那给一半儿的大小这个选择菜单会怎么弹呢，感兴趣自己试一下🤓……</p>
<p>这些不是重点，重点是在 iPad 上，菜单的弹出会有些不一样的现象</p>
<h2 id="iPad"><a href="#iPad" class="headerlink" title="iPad"></a>iPad</h2><p>上面同样其他应用内预览文档的代码，测试发现点击文档以后，没有弹出选择菜单，当然文档也没有打开。console 中报注入布局异常的错误：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">02</span>-<span class="number">26</span> <span class="number">14</span>:<span class="number">43</span>:<span class="number">02</span><span class="variable">.326794</span>+<span class="number">0800</span> UIDocumentInteraction[<span class="number">13039</span>:<span class="number">85917</span>] [LayoutConstraints] Unable to simultaneously satisfy constraints.</span><br><span class="line">	Probably at least one of the constraints in the following list is one you don't want. </span><br><span class="line">	Try <span class="keyword">this</span>: </span><br><span class="line">		(<span class="number">1</span>) look at each <span class="keyword">constraint</span> <span class="keyword">and</span> try to figure out which you don't <span class="keyword">expect</span>; </span><br><span class="line">		(<span class="number">2</span>) find the code that added the unwanted <span class="keyword">constraint</span> <span class="keyword">or</span> constraints <span class="keyword">and</span> fix it. </span><br><span class="line">(</span><br><span class="line">    <span class="string">"&lt;NSLayoutConstraint:0x600001912da0 H:|-(0)-[_UIActivityContentTitleView:0x7fa2ccc33b10]   (active, names: '|':_UINavigationBarContentView:0x7fa2ccc26a40 )&gt;"</span>,</span><br><span class="line">    <span class="string">"&lt;NSLayoutConstraint:0x600001912e40 _UIActivityContentTitleView:0x7fa2ccc33b10.trailing == _UINavigationBarContentView:0x7fa2ccc26a40.trailing   (active)&gt;"</span>,</span><br><span class="line">    <span class="string">"&lt;NSLayoutConstraint:0x6000019130c0 LPLinkView:0x7fa2ccc33f30.leading == UILayoutGuide:0x600000322680'UIViewLayoutMarginsGuide'.leading   (active)&gt;"</span>,</span><br><span class="line">    <span class="string">"&lt;NSLayoutConstraint:0x600001912f30 H:[LPLinkView:0x7fa2ccc33f30]-(27)-|   (active, names: '|':_UIActivityContentTitleView:0x7fa2ccc33b10 )&gt;"</span>,</span><br><span class="line">    <span class="string">"&lt;NSLayoutConstraint:0x600001919d10 'UIView-Encapsulated-Layout-Width' _UINavigationBarContentView:0x7fa2ccc26a40.width == 0   (active)&gt;"</span>,</span><br><span class="line">    <span class="string">"&lt;NSLayoutConstraint:0x600001912fd0 'UIView-leftMargin-guide-constraint' H:|-(16)-[UILayoutGuide:0x600000322680'UIViewLayoutMarginsGuide'](LTR)   (active, names: '|':_UIActivityContentTitleView:0x7fa2ccc33b10 )&gt;"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Will attempt to recover by breaking <span class="keyword">constraint</span> </span><br><span class="line">&lt;NSLayoutConstraint:<span class="number">0</span>x6000019130c0 LPLinkView:<span class="number">0</span>x7fa2ccc33f30<span class="variable">.leading</span> == UILayoutGuide:<span class="number">0</span>x600000322680'UIViewLayoutMarginsGuide'<span class="variable">.leading</span>   (active)&gt;</span><br><span class="line"></span><br><span class="line">Make a symbolic breakpoint at UIViewAlertForUnsatisfiableConstraints to catch <span class="keyword">this</span> in the debugger.</span><br><span class="line">The methods in the UIConstraintBasedLayoutDebugging category on UIView listed in &lt;UIKitCore/UIView<span class="variable">.h</span>&gt; may also be helpful.</span><br><span class="line"><span class="number">2021</span>-<span class="number">02</span>-<span class="number">26</span> <span class="number">14</span>:<span class="number">43</span>:<span class="number">02</span><span class="variable">.327098</span>+<span class="number">0800</span> UIDocumentInteraction[<span class="number">13039</span>:<span class="number">87855</span>] [Fetching] LPFileMetadataProviderSpecialization failed to retrieve a thumbnail from QuickLookThumbnailing (Error Domain=QLThumbnailErrorDomain Code=<span class="number">0</span> <span class="string">"Could not generate a thumbnail"</span>)</span><br></pre></td></tr></table></figure>

<p>我们先看下 Safari 中的 Menu 是什么样子:</p>
<center>
    <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/26.png" class width="600"></div>
</center>

<center>
    <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/27.png" class width="500"></div>
</center>


<p>咦，无论横竖屏，Menu 不再是以屏幕宽度或者高度来处理的了，而且头上多了一点 “小尖尖~”。所以猜测我们需要给定它一个弹出点。但 API 貌似又没有对应的接口。</p>
<p>参考了官方一个 issue 讨论，emmmmmm，其实我也没太看懂啥意思 😂，总之~~</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> frame = <span class="type">CGRect</span>.<span class="keyword">init</span>(x: <span class="keyword">self</span>.view.frame.midX, y: <span class="keyword">self</span>.view.frame.midY, width: <span class="number">0</span>, height: <span class="keyword">self</span>.view.frame.height * <span class="number">0.5</span>)</span><br><span class="line">documentController.presentOptionsMenu(from: frame, <span class="keyword">in</span>: <span class="keyword">self</span>.view, animated: <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<p>这句代码中的 frame 不给全屏就可以正常弹出，小尖尖的位置自己有兴趣可以调一调玩一玩儿~~</p>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>WKWebView 小结儿</title>
    <url>/2020/12/01/WKWebView%20%E5%B0%8F%E7%BB%93%E5%84%BF/</url>
    <content><![CDATA[<p>最近多个项目里因为手机 App 中 UIWebview 加载 前端页面 的性能问题，被”围攻”了两天。本来还想偷个懒儿，不升级，毕竟 App 不需要上线 AppStore，最终还是没逃过 WKWebView 渲染速度的诱惑，真香<del>~</del>啪啪。。</p>
<p>换他丫的！</p>
<p>说来也惭愧，iOS 8.0 就开始支持 WebKit 了，一直没沉下心来学习，我们一起好好看看里面都有什么吧🤓</p>
<a id="more"></a>

<h2 id="WKWebView-初始化"><a href="#WKWebView-初始化" class="headerlink" title="WKWebView 初始化"></a>WKWebView 初始化</h2><p>一个简单用于展示的 WebView 可以是这样的：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">WKWebViewConfiguration</span> *configuration = [[<span class="built_in">WKWebViewConfiguration</span> alloc] init];</span><br><span class="line"><span class="built_in">WKWebView</span> *webView = (&#123;</span><br><span class="line">    webView = [[<span class="built_in">WKWebView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.bounds configuration:configuration];</span><br><span class="line">    webView.scrollView.bounces = <span class="literal">NO</span>;</span><br><span class="line">    webView.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    webView;</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line">[<span class="keyword">self</span>.view addSubview:webView];</span><br><span class="line">[webView loadRequest:[<span class="built_in">NSURLRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://baidu.com"</span>]]];</span><br></pre></td></tr></table></figure>

<p>这样一个单纯用于展示网页、没有任何配置项的 WebView 就算完成了。相较于 <code>UIWebView</code> ，我们看到多了一个 </p>
<p><code>configuration</code>配置类型，那我们就来 Read the fucking source code……</p>
<h2 id="WKWebViewConfiguration"><a href="#WKWebViewConfiguration" class="headerlink" title="WKWebViewConfiguration"></a>WKWebViewConfiguration</h2><p>官方文档是这样描述这个类型的：</p>
<blockquote>
<p>A <code>WKWebViewConfiguration</code> object is a collection of properties with which to initialize a web view.</p>
<p>一个用于初始化 web view 属性的集合。</p>
</blockquote>
<p>我们可以用它做什么呢？</p>
<blockquote>
<ul>
<li>设置用于网站的初始cookie</li>
<li>处理自定义的 URL schemes</li>
<li>设置如何处理媒体内容</li>
<li>管理网页中选中的信息</li>
<li>自定义注入网页的脚本</li>
<li>自定义内容的展示规则</li>
<li>……</li>
</ul>
</blockquote>
<p>我们可以通过创建一个 <code>WKWebViewConfiguration</code> 对象来设置网页的属性，并且在 WebView 初始化的时候传递给它。注意的是只能在初始化的时候配置 <code>configuration</code>  中的属性，后面是没办法动态再去修改这些配置的。</p>
<p>我们通过这个类看看 WebKit 里面有哪些主要的内容：</p>
<h3 id="WKProcessPool"><a href="#WKProcessPool" class="headerlink" title="WKProcessPool"></a>WKProcessPool</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*! @abstract The process pool from which to obtain the view's web content</span></span><br><span class="line"><span class="comment"> process.</span></span><br><span class="line"><span class="comment"> @discussion When a web view is initialized, a new web content process</span></span><br><span class="line"><span class="comment"> will be created for it from the specified pool, or an existing process in</span></span><br><span class="line"><span class="comment"> that pool will be used.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">WKProcessPool</span> *processPool;</span><br></pre></td></tr></table></figure>

<p>官方文档解释为 一个可以在单个进程中运行多个 web 视图的不可见 token ？令牌？。进程池。</p>
<p>对于 WK，和我们的 App 不再是同一个进程，而是开辟了独立的进程来管理，放在进程池中。这也是与<code>UIWebView</code> 最大不同的一点：<code>NSHTTPCookieStorage</code> 中的 cookie ，<code>UIWebView</code> 是可以自动携带使用的，但 <code>WKWebView</code> 无法获取 Storage 中的 cookie。</p>
<p>诶，那是不是放在同一个进程池中的 web view 就可以共享 cookie 了呢？带着这个问题，稍后我们会提到 cookie 有关的处理。</p>
<h3 id="WKPreferences"><a href="#WKPreferences" class="headerlink" title="WKPreferences"></a>WKPreferences</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*! @abstract The preference settings to be used by the web view.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">WKPreferences</span> *preferences;</span><br></pre></td></tr></table></figure>

<p>针对 web 视图的偏好设置，如果是针对 web 内容的设置还是使用  <code>WKWebViewConfiguration</code> ，感觉这个类还在完善、扩充中，内容很少。比较值得注意的是与 JavaScript 有关的两个属性。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字体</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> minimumFontSize;</span><br><span class="line"><span class="comment">//是否允许在没有用户交互的情况下，JavaScript可以打开windows</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> javaScriptCanOpenWindowsAutomatically;</span><br><span class="line"><span class="comment">//是否启用javaScript，14.0 以后就废弃了，有对应替换的 API</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> javaScriptEnabled;<span class="comment">//ios(8.0, 14.0)</span></span><br><span class="line"><span class="comment">//是否提醒 如网络钓鱼或恶意软件 等可疑的欺诈内容</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> fraudulentWebsiteWarningEnabled;<span class="comment">//ios(13.0)</span></span><br></pre></td></tr></table></figure>

<h3 id="WKUserContentController"><a href="#WKUserContentController" class="headerlink" title="WKUserContentController"></a>WKUserContentController</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*! @abstract The user content controller to associate with the web view.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">WKUserContentController</span> *userContentController;</span><br></pre></td></tr></table></figure>

<p>这个类提供了一个 JavaScript 向 web view 发送消息的途径，可以增删用户脚本。</p>
<p>JavaScript 与 原生做交互，比较多的一个场景是需要调用原生的某些能力。在 <code>UIWebView</code> 中简单的方式是拦截请求，根据特定的 scheme 或者 参数来区分，那在 <code>WKWebView</code> 中则是通过 <code>WKUserContentController</code> 添加消息处理器。例如打开相机功能：</p>
<ul>
<li>添加脚本处理器</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">WKUserContentController</span> *userContentController = [[<span class="built_in">WKUserContentController</span> alloc] init];</span><br><span class="line">[userContentController addScriptMessageHandler:<span class="keyword">self</span> name:<span class="string">@"OpenCamera"</span>];</span><br><span class="line"><span class="built_in">WKWebViewConfiguration</span> *configuration = [[<span class="built_in">WKWebViewConfiguration</span> alloc] init];</span><br><span class="line">configuration.userContentController = userContentController;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现 WKScriptMessageHandler 代理的方法</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - WKScriptMessageHandler</span></span><br><span class="line">- (<span class="keyword">void</span>)userContentController:(<span class="built_in">WKUserContentController</span> *)userContentController didReceiveScriptMessage:(<span class="built_in">WKScriptMessage</span> *)message &#123;</span><br><span class="line">    <span class="keyword">if</span> ([message.name caseInsensitiveCompare:<span class="string">@"OpenCamera"</span>] == <span class="built_in">NSOrderedSame</span>) &#123;</span><br><span class="line">        <span class="comment">//Call your open camera action.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们看到接收 JavaScript 的消息是通过一个 <code>WKScriptMessage</code> 类型，我们再来简单看下这个类</p>
<h3 id="WKScriptMessage"><a href="#WKScriptMessage" class="headerlink" title="WKScriptMessage"></a>WKScriptMessage</h3><blockquote>
<p>A WKScriptMessage object contains information about a message sent from a webpage.</p>
</blockquote>
<p>他的注释就很简单了：一个包含网页发来的消息内容的对象。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 消息体、参数。允许的类型 NSNumber, NSString, NSDate, NSArray, NSDictionary, and NSNull.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="keyword">id</span> body;</span><br><span class="line"><span class="comment">// 发送消息的 web view。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">weak</span>) <span class="built_in">WKWebView</span> *webView;</span><br><span class="line"><span class="comment">// 前端中发送消息的 frame。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">WKFrameInfo</span> *frameInfo;</span><br><span class="line"><span class="comment">// 用于接收前端消息的处理器的名字。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="comment">// The content world from which the message was sent. ？我也还没用过不清楚是干嘛的。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">WKContentWorld</span> *world API_AVAILABLE(macos(<span class="number">11.0</span>), ios(<span class="number">14.0</span>));</span><br></pre></td></tr></table></figure>

<h3 id="WKWebsiteDataStore"><a href="#WKWebsiteDataStore" class="headerlink" title="WKWebsiteDataStore"></a>WKWebsiteDataStore</h3><p>这个类貌似包含了一个 web view 的所有数据，我看完这个类的介绍，第一感觉是，哇，我可以窥探一切了。然而，除了cookie，一毛钱都拿不到……不讲了，有兴趣自己试吧~~</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeDiskCache</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeOfflineWebApplicationCache</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeMemoryCache</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeLocalStorage</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeFetchCache</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeCookies</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeSessionStorage</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeIndexedDBDatabases</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeWebSQLDatabases</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeServiceWorkerRegistrations</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="WKHTTPCookieStore"><a href="#WKHTTPCookieStore" class="headerlink" title="WKHTTPCookieStore"></a>WKHTTPCookieStore</h3><blockquote>
<p> A WKHTTPCookieStore object allows managing the HTTP cookies associated with a particular WKWebsiteDataStore.</p>
</blockquote>
<p>用来管理与特定 <code>WKWebsiteDataStore</code> 相关联的 HTTP cookie。API 看上去很简单…获取 cookie 是异步操作，与<code>NSHTTPCookieStorage</code> 的同步操作不同，处理起来可能要注意下。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)getAllCookies:(<span class="keyword">void</span> (^)(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSHTTPCookie</span> *&gt; *))completionHandler;</span><br><span class="line">- (<span class="keyword">void</span>)setCookie:(<span class="built_in">NSHTTPCookie</span> *)cookie completionHandler:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="keyword">void</span>))completionHandler;</span><br><span class="line">- (<span class="keyword">void</span>)deleteCookie:(<span class="built_in">NSHTTPCookie</span> *)cookie completionHandler:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="keyword">void</span>))completionHandler;</span><br><span class="line">- (<span class="keyword">void</span>)addObserver:(<span class="keyword">id</span>&lt;<span class="built_in">WKHTTPCookieStoreObserver</span>&gt;)observer;</span><br><span class="line">- (<span class="keyword">void</span>)removeObserver:(<span class="keyword">id</span>&lt;<span class="built_in">WKHTTPCookieStoreObserver</span>&gt;)observer;</span><br></pre></td></tr></table></figure>

<p>对应观察者的协议方法：</p>
<p>在 cookie 发生变化时，可以异步通知，但经测试是有一点延迟的，有兴趣可以测一测？</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">WKHTTPCookieStoreObserver</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"><span class="keyword">@optional</span></span><br><span class="line">- (<span class="keyword">void</span>)cookiesDidChangeInCookieStore:(<span class="built_in">WKHTTPCookieStore</span> *)cookieStore;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>还没写完<del>~</del></p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>WebView</tag>
      </tags>
  </entry>
  <entry>
    <title>URL Loading System[译]</title>
    <url>/2018/04/19/URLLoadingSystem/</url>
    <content><![CDATA[<blockquote>
<p>Interact with URLs and communicate with servers using standard Internet protocols.</p>
<p>:与URL交互并使用标准Internet协议与服务器通信。</p>
<p>官方文档：<a href="https://developer.apple.com/documentation/foundation/url_loading_system?language=objc" target="_blank" rel="noopener">苹果文档</a></p>
</blockquote>
<h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>URL Loading System使用标准协议（例如https或你创建的自定义协议）提供对URL标识的资源的访问。加载是异步执行的，因此你的应用可以保持响应能力，并在数据或错误到达时处理它们。</p>
<p>你使用 URLSession 实例创建一个或多个 URLSessionTask 实例，这些 URLSessionTask 实例可以获取数据、下载文件或将数据和文件上传到服务器。要配置会话，请使用 URLSessionConfiguration 对象，该对象控制行为，例如如何使用缓存和 cookie，或者是否允许在蜂窝网络上进行连接。</p>
<p>你可以重复使用一个会话来创建任务。例如，网络浏览器可能有分开的会话供常规浏览和私人浏览使用，而私人会话不会缓存其数据。图1显示了具有这些配置的两个会话如何创建多个任务。</p>
<a id="more"></a>

<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/30.png" alt></p>
<p>每个会话都与一个 delegate 相关联，以接收定期更新（或错误）。默认 delegate 调用你提供的完成处理程序块。如果你选择提供自己的自定义 delegate，则不会调用此块。</p>
<p>你可以将会话配置为在后台运行，以便在应用程序挂起时，系统可以代表它下载数据并唤醒应用以交付结果。</p>
<h2 id="话题"><a href="#话题" class="headerlink" title="话题"></a>话题</h2><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><p>配置并创建会话，然后使用它们创建URL任务。</p>
<ul>
<li>Fetching Website Data into Memory：通过从URL会话创建数据任务，将数据直接接收到内存中。</li>
<li>NSURLSession：协调一组相关的网络数据传输任务的对象。</li>
<li>NSURLSessionTask：在URL会话中执行一项任务，例如下载特定资源。</li>
</ul>
<h3 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h3><ul>
<li>NSURLRequest：与协议或URL方案无关的URL加载请求。</li>
<li>NSURLResponse：与协议或URL方案无关的，对URL加载请求的响应相关联的元数据。</li>
<li>NSHTTPURLResponse：与HTTP协议URL加载请求的响应关联的元数据。</li>
</ul>
<h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><ul>
<li>Uploading Data to a Website：将数据从你的应用发送到服务器。</li>
<li>Uploading Streams of Data：将数据流发送到服务器。</li>
</ul>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul>
<li>Downloading Files from Websites：直接下载文件到文件系统。</li>
<li>Pausing and Resuming Downloads：允许用户继续下载而无需重新开始。</li>
<li>Downloading Files in the Background：创建在应用不活动时下载文件的任务。</li>
</ul>
<h3 id="缓存行为"><a href="#缓存行为" class="headerlink" title="缓存行为"></a>缓存行为</h3><ul>
<li>Accessing Cached Data：控制 URL 请求如何利用以前缓存的数据。</li>
<li>CachedURLResponse：对URL请求的缓存响应。</li>
<li>URLCache：将URL请求映射到缓存响应对象的对象。</li>
</ul>
<h4 id="身份验证和凭证"><a href="#身份验证和凭证" class="headerlink" title="身份验证和凭证"></a>身份验证和凭证</h4><ul>
<li>Handling an Authentication Challenge：当服务器要求对URL请求进行身份验证时，做出适当的响应。</li>
<li>NSURLAuthenticationChallenge：来自服务器的挑战，要求来自客户端的身份验证。</li>
<li>NSURLCredential：认证凭证，由特定于凭证类型和要使用的持久性存储类型（如果有）的信息组成。</li>
<li>NSURLCredentialStorage：共享凭据缓存的管理器。</li>
<li>NSURLProtectionSpace：服务器或服务器上需要认证的区域，通常描述为领域。</li>
</ul>
<h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><ul>
<li>NSHTTPCookie：HTTP cookie的表示形式。</li>
<li>NSHTTPCookieStorage：一个管理cookie存储的容器。</li>
</ul>
<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><ul>
<li>URLError：URL加载API返回的错误代码。</li>
<li>URL Loading System Error Info Keys：从URL加载API生成的错误对象的用户信息字典中识别这些键。</li>
</ul>
<h2 id="系列："><a href="#系列：" class="headerlink" title="系列："></a>系列：</h2><p><a href="https://tommygirl.cn/2018/04/19/URLLoadingSystem/">URL Loading System[译]</a></p>
<p><a href="https://tommygirl.cn/2018/04/19/NSURLRequest/">NSURLRequest</a></p>
<p><a href="https://tommygirl.cn/2018/04/20/NSURLResponse/">NSURLResponse</a></p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>WKWebView 隐藏系统键盘的 inputAccessoryView</title>
    <url>/2021/06/22/WKWebView-Keyboard-0/</url>
    <content><![CDATA[<p>在学习 <code>WKWebView</code> 中键盘的弹出、隐藏时，碰巧看到了网友的一个需求是 隐藏 <code>inputAccessoryView</code>，虽然我并不需要这么高端的操作，也不懂前端的问题，但思路碰巧帮我解决了另一个问题。🤓</p>
<a id="more"></a>

<h4 id="1-声明一个类-用于置空-inputAccessoryView"><a href="#1-声明一个类-用于置空-inputAccessoryView" class="headerlink" title="1. 声明一个类 用于置空 inputAccessoryView"></a>1. 声明一个类 用于置空 <code>inputAccessoryView</code></h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">_NoInputAccessoryView</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">_NoInputAccessoryView</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)inputAccessoryView &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>



<h4 id="2-实现如下方法，例如在-WKWebView-的控制器中"><a href="#2-实现如下方法，例如在-WKWebView-的控制器中" class="headerlink" title="2.实现如下方法，例如在 WKWebView 的控制器中"></a>2.实现如下方法，例如在 WKWebView 的控制器中</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)removeInputAccessoryViewFromWKWebView:(<span class="built_in">WKWebView</span> *)webView &#123;</span><br><span class="line">    <span class="built_in">UIView</span> *targetView;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">UIView</span> *view <span class="keyword">in</span> webView.scrollView.subviews) &#123;</span><br><span class="line">        <span class="keyword">if</span>([[view.class description] hasPrefix:<span class="string">@"WKContent"</span>]) &#123;</span><br><span class="line">            targetView = view;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!targetView) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSString</span> *noInputAccessoryViewClassName = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@_NoInputAccessoryView"</span>, targetView.class.superclass];</span><br><span class="line">    Class newClass = <span class="built_in">NSClassFromString</span>(noInputAccessoryViewClassName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(newClass == <span class="literal">nil</span>) &#123;</span><br><span class="line">        newClass = objc_allocateClassPair(targetView.class, [noInputAccessoryViewClassName cStringUsingEncoding:<span class="built_in">NSASCIIStringEncoding</span>], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(!newClass) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Method method = class_getInstanceMethod([_NoInputAccessoryView <span class="keyword">class</span>], <span class="keyword">@selector</span>(inputAccessoryView));</span><br><span class="line"></span><br><span class="line">        class_addMethod(newClass, <span class="keyword">@selector</span>(inputAccessoryView), method_getImplementation(method), method_getTypeEncoding(method));</span><br><span class="line"></span><br><span class="line">        objc_registerClassPair(newClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    object_setClass(targetView, newClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-调用上面的方法，传入对应的-WebView"><a href="#3-调用上面的方法，传入对应的-WebView" class="headerlink" title="3.调用上面的方法，传入对应的 WebView"></a>3.调用上面的方法，传入对应的 WebView</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span> removeInputAccessoryViewFromWKWebView:webView];</span><br></pre></td></tr></table></figure>



<p>PS：这样的确可以隐藏 <code>inputAccessoryView</code>，但是键盘的关闭就需要再单独处理一下了。😂🤓🤗</p>
<p>PPS: <a href="https://stackoverflow.com/questions/32546394/hiding-keyboard-accessorybar-in-wkwebview" target="_blank" rel="noopener">原文链接</a></p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>WebView</tag>
      </tags>
  </entry>
  <entry>
    <title>Warning! PATH is not properly set up, &#39;/Users/***/.rvm/gems/ruby-2.4.0/bin&#39; is not at first place.</title>
    <url>/2018/12/27/Warning!PATH-is/</url>
    <content><![CDATA[<p>忽然有一天。。。使用 <code>cocoapods</code> 安装三方库不好使了，报了好长的错。。。</p>
<a id="more"></a>

<p>前<br>方<br>有<br>超<br>长<br>图<br>片<br>，<br>慎<br>点<br>。</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/031.png" alt="error"></p>
<blockquote>
<p>按照里面的提示去github搜索了cocoapods使用中的问题，多数都是说，重装gem。笔者不是很懂这些，gem，ruby，cocoapods，全都更新了一遍。依旧是这个问题。</p>
</blockquote>
<p>睡了一觉醒来后，笔者认真看了看错误提示，注意到这句：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">### Command</span></span><br><span class="line"></span><br><span class="line">/Users/我/.rvm/gems/ruby-<span class="number">2.4</span>.<span class="number">0</span>/bin/pod install</span><br></pre></td></tr></table></figure>

<p>既然命令执行文件在这个路径下，可能是rvm出了问题，执行 <code>rvm list</code>查看ruby版本</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/32.png" alt="rvm list"></p>
<p>注意到里面有个 <code>Warning！</code> 和几个建议的操作（做了也没用，是的，我试过了）😌</p>
<blockquote>
<p>Warning! PATH is not properly set up, ‘/Users/***/.rvm/gems/ruby-2.4.0/bin’ is not at first place.<br>仿佛是在说，ruby不在最初？首先？第一个位置？<br>总之某些东西被改了（但我真的没动）</p>
</blockquote>
<p>本人脾气暴躁，所以想着，既然动了，那就暴力还原吧，执行 <code>rvm -h</code> 查看rvm 的神操作们</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/33.png" alt="rvm -h"></p>
<p>注意到了图中的这几个命令：<code>rvm maintenance</code> rvm 的维护？于是乎试了一下<br><code>rvm reset</code><br><code>rvm reset</code><br><code>rvm reset</code><br><code>rvm reset</code><br><code>rvm reset</code><br>重要的 事情说五遍。<br>command里并没有什么输出，仿佛秘密做了一些事情，然后再试了下 <code>pod install</code> 就👌了。<br>看到了久违的绿色，放心了。</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/34.png" alt="绿色走一波"></p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>Mac</tag>
        <tag>Xcode</tag>
        <tag>pod</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode 11 IPA processing failed 初见</title>
    <url>/2020/01/20/Xcode%2011%20IPA%20processing/</url>
    <content><![CDATA[<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><h4 id="warning-Configuration-issue-platform-iPhoneSimulator-platform-doesn’t-have-any-non-simulator-SDKs-ignoring-it"><a href="#warning-Configuration-issue-platform-iPhoneSimulator-platform-doesn’t-have-any-non-simulator-SDKs-ignoring-it" class="headerlink" title="warning: Configuration issue: platform iPhoneSimulator.platform doesn’t have any non-simulator SDKs; ignoring it"></a>warning: Configuration issue: platform iPhoneSimulator.platform doesn’t have any non-simulator SDKs; ignoring it</h4><h4 id="Assertion-failed-Expected-2-archs-in-otool-output"><a href="#Assertion-failed-Expected-2-archs-in-otool-output" class="headerlink" title="Assertion failed: Expected 2 archs in otool output:"></a>Assertion failed: Expected 2 archs in otool output:</h4><p>今天准备打一个企业ipa的时候，报了一个错，吓出了一身冷汗：<code>IPA processing failed</code><br>看到了 Show Logs，就抱着试试看的态度，点开了，毕竟试试又不会怀孕<del>~</del></p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/35.png" alt="IPA processing failed"></p>
<a id="more"></a>

<p>Show Logs 我们会看到下面四个日志文件，就是我们本次Archive~Package过程中的日志，然后我们着重看一下第二个选中的log</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/36.png" alt="log"></p>
<p>搜索一下 <code>error</code> 或者 <code>failed</code> 总会发现什么的，喏，我们发现了就包含一个failed，注意上下文划线的几句话，应该是提示的那个framework包含了模拟器架构，上架肯定是要移除的，所以我们需要忽略它，换句话说，它太胖了，我们需要给它瘦个身🤹‍♂️🤹‍♂️🤹‍♂️🤹‍♂️🤹‍♂️</p>
<blockquote>
<p>模拟器32位处理器测试需要i386架构，（iphone5，iphone5s以下的模拟器）<br>模拟器64位处理器测试需要x86_64架构，(iphone6以上的模拟器)<br>真机32位处理器需要armv7,或者armv7s架构，（iphone4真机/armv7, ipnone5，iphone5s真机/armv7s）<br>真机64位处理器需要arm64架构，(iphone6，iphone6p以上的真机)</p>
</blockquote>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/37.png" alt="寻找恐惧"></p>
<h2 id="Framework-瘦身大法"><a href="#Framework-瘦身大法" class="headerlink" title="Framework 瘦身大法"></a>Framework 瘦身大法</h2><blockquote>
<p>本段内容来自于：<a href="[https://www.jianshu.com/p/3c6b1dd7a0ed](https://www.jianshu.com/p/3c6b1dd7a0ed)">xcode11打包失败 IPA processing failed 问题解决</a></p>
</blockquote>
<ul>
<li><p>1、 进入framework所在的目录（以下的框架名称换成自己的即可）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> [your framework path]</span><br></pre></td></tr></table></figure></li>
<li><p>2、查看SDK的二进制文件支持的CPU架构，如果只显示armv7 arm64，那么就没问题，如果有模拟器的架构x86_64, i386那就是有问题</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lipo -info OAChatClient.framework/OAChatClient</span><br></pre></td></tr></table></figure></li>
<li><p>3、移除支持x86_64,i386的二进制文件<br>ps：移除自己对应的类型就可以，这里只是举个例子。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lipo OAChatClient.framework/OAChatClient -remove x86_64 -remove i386 -output OAChatClient</span><br></pre></td></tr></table></figure></li>
<li><p>4、用第3步生成的新的可执行文件 替换framwork内部的可执行文件[记得备份]</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mv OAChatClient OAChatClient.framework/OAChatClient</span><br></pre></td></tr></table></figure></li>
<li><p>5、查看我们瘦身后的可执行文件是否正确，显示armv7或arm64，就完成剥离，再打包应该就可以了，啊哈哈哈</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lipo -info OAChatClient.framework/OAChatClient</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果你觉得以上操作比较麻烦，每次模拟器调试和打包还要替换对应的SDK,那么以下方式将更加简便的解决你的问题：<br>buildPhases-&gt;New Run Script Phase添加以下内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">APP_PATH=<span class="string">"<span class="variable">$&#123;TARGET_BUILD_DIR&#125;</span>/<span class="variable">$&#123;WRAPPER_NAME&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This script loops through the frameworks embedded in the application and</span></span><br><span class="line"><span class="comment"># removes unused architectures.</span></span><br><span class="line">find <span class="string">"<span class="variable">$APP_PATH</span>"</span> -name <span class="string">'*.framework'</span> -<span class="built_in">type</span> d | <span class="keyword">while</span> <span class="built_in">read</span> -r FRAMEWORK</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">FRAMEWORK_EXECUTABLE_NAME=$(defaults <span class="built_in">read</span> <span class="string">"<span class="variable">$FRAMEWORK</span>/Info.plist"</span> CFBundleExecutable)</span><br><span class="line">FRAMEWORK_EXECUTABLE_PATH=<span class="string">"<span class="variable">$FRAMEWORK</span>/<span class="variable">$FRAMEWORK_EXECUTABLE_NAME</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Executable is <span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>"</span></span><br><span class="line"></span><br><span class="line">EXTRACTED_ARCHS=()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ARCH <span class="keyword">in</span> <span class="variable">$ARCHS</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Extracting <span class="variable">$ARCH</span> from <span class="variable">$FRAMEWORK_EXECUTABLE_NAME</span>"</span></span><br><span class="line">lipo -extract <span class="string">"<span class="variable">$ARCH</span>"</span> <span class="string">"<span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>"</span> -o <span class="string">"<span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>-<span class="variable">$ARCH</span>"</span></span><br><span class="line">EXTRACTED_ARCHS+=(<span class="string">"<span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>-<span class="variable">$ARCH</span>"</span>)</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Merging extracted architectures: <span class="variable">$&#123;ARCHS&#125;</span>"</span></span><br><span class="line">lipo -o <span class="string">"<span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>-merged"</span> -create <span class="string">"<span class="variable">$&#123;EXTRACTED_ARCHS[@]&#125;</span>"</span></span><br><span class="line">rm <span class="string">"<span class="variable">$&#123;EXTRACTED_ARCHS[@]&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Replacing original executable with thinned version"</span></span><br><span class="line">rm <span class="string">"<span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>"</span></span><br><span class="line">mv <span class="string">"<span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>-merged"</span> <span class="string">"<span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="小乌龙"><a href="#小乌龙" class="headerlink" title="小乌龙"></a>小乌龙</h2><p>PS：发现这个问题，是因为想使用人家野火的IM demo，自己打个包，结果就报了上面的问题，按照上面的步骤改完一个framework后，发现，其实野火的工程里，已经写好了脚本（文件：removex86.sh，是不是看名字就知道是干嘛的了），哈哈哈，只需要运行一下就ok了🤓🤓🤓🤓🤓🤓🤓🤓🤓🤓</p>
<p>这是人家的shell，如果有和我一样的人，一定要注意哦：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Frameworks</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"朋友圈的库如果不存在，脚本会报错误，可以忽略掉！"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#lipo WFChatUIKit.framework/WFChatUIKit -thin armv7 -output XXXX_armv7</span></span><br><span class="line">lipo WFChatUIKit.framework/WFChatUIKit -thin arm64 -output XXXX_arm64</span><br><span class="line"><span class="comment">#lipo -create XXXX_armv7 XXXX_arm64 -output XXXX</span></span><br><span class="line">mv XXXX_arm64 WFChatUIKit.framework/WFChatUIKit</span><br><span class="line">rm -rf XXXX*</span><br><span class="line"></span><br><span class="line"><span class="comment"># lipo WFAVEngineKit.framework/WFAVEngineKit -thin armv7 -output XXXX_armv7</span></span><br><span class="line">lipo WFAVEngineKit.framework/WFAVEngineKit -thin arm64 -output XXXX_arm64</span><br><span class="line"><span class="comment"># lipo -create XXXX_armv7 XXXX_arm64 -output XXXX</span></span><br><span class="line">mv XXXX_arm64 WFAVEngineKit.framework/WFAVEngineKit</span><br><span class="line">rm -rf XXXX*</span><br><span class="line"></span><br><span class="line"><span class="comment"># lipo WFChatClient.framework/WFChatClient -thin armv7 -output XXXX_armv7</span></span><br><span class="line">lipo WFChatClient.framework/WFChatClient -thin arm64 -output XXXX_arm64</span><br><span class="line"><span class="comment"># lipo -create XXXX_armv7 XXXX_arm64 -output XXXX</span></span><br><span class="line">mv XXXX_arm64 WFChatClient.framework/WFChatClient</span><br><span class="line">rm -rf XXXX*</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ../WildFireChat/Moments</span><br><span class="line"><span class="comment">#lipo WFMomentClient.framework/WFMomentClient -thin armv7 -output XXXX_armv7</span></span><br><span class="line">lipo WFMomentClient.framework/WFMomentClient -thin arm64 -output XXXX_arm64</span><br><span class="line"><span class="comment">#lipo -create XXXX_armv7 XXXX_arm64 -output XXXX</span></span><br><span class="line">mv XXXX_arm64 WFMomentClient.framework/WFMomentClient</span><br><span class="line">rm -rf XXXX*</span><br><span class="line"></span><br><span class="line"><span class="comment"># lipo WFMomentUIKit.framework/WFMomentUIKit -thin armv7 -output XXXX_armv7</span></span><br><span class="line">lipo WFMomentUIKit.framework/WFMomentUIKit -thin arm64 -output XXXX_arm64</span><br><span class="line"><span class="comment"># lipo -create XXXX_armv7 XXXX_arm64 -output XXXX</span></span><br><span class="line">mv XXXX_arm64 WFMomentUIKit.framework/WFMomentUIKit</span><br><span class="line">rm -rf XXXX*</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ../../Frameworks</span><br><span class="line"></span><br><span class="line"><span class="comment">#lipo GoogleWebRTC/Frameworks/frameworks/WebRTC.framework/WebRTC -thin armv7 -output XXXX_armv7</span></span><br><span class="line">lipo GoogleWebRTC/Frameworks/frameworks/WebRTC.framework/WebRTC -thin arm64 -output XXXX_arm64</span><br><span class="line"><span class="comment">#lipo -create XXXX_armv7 XXXX_arm64 -output XXXX</span></span><br><span class="line">mv XXXX_arm64 GoogleWebRTC/Frameworks/frameworks/WebRTC.framework/WebRTC</span><br><span class="line">rm -rf XXXX*</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"朋友圈的库如果不存在，脚本会报错误，可以忽略掉！"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"执行这个脚本后，打包时一定不要打开ios-chat这个项目空间进行打包，因为会重新生成这些被瘦身的库。要打开wfchat这个项目进行打包！"</span></span><br></pre></td></tr></table></figure>

<p>PPS：运行脚本的命令就是<code>sh ***.sh</code></p>
<div contenteditable="plaintext-only"><div contenteditable="plaintext-only"><center>
  <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/flag.jpeg" class width="200"></div>
</center>


</div></div>]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 动态修改状态栏风格</title>
    <url>/2021/01/20/iOS%20%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9%E7%8A%B6%E6%80%81%E6%A0%8F%E9%A3%8E%E6%A0%BC/</url>
    <content><![CDATA[<p>App 中经常需要根据页面的风格改变电池栏文字的颜色，记录一下都是如何调整的。</p>
<ul>
<li>UIStatusBarStyle 的样式</li>
<li>改变状态栏文字颜色的方式</li>
<li>状态栏的显示和隐藏</li>
</ul>
<a id="more"></a>

<h2 id="UIStatusBarStyle-的样式"><a href="#UIStatusBarStyle-的样式" class="headerlink" title="UIStatusBarStyle 的样式"></a>UIStatusBarStyle 的样式</h2><p>iOS 13.0 中新增了暗黑模式，对应的状态栏风格也增加了一个 <code>darkContent</code>。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">UIStatusBarStyle</span> : <span class="title">Int</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">default</span> = <span class="number">0</span> <span class="comment">// Automatically chooses light or dark content based on the user interface style</span></span><br><span class="line">    <span class="meta">@available</span>(iOS <span class="number">7.0</span>, *)</span><br><span class="line">    <span class="keyword">case</span> lightContent = <span class="number">1</span> <span class="comment">// Light content, for use on dark backgrounds</span></span><br><span class="line">    <span class="meta">@available</span>(iOS <span class="number">13.0</span>, *)</span><br><span class="line">    <span class="keyword">case</span> darkContent = <span class="number">3</span> <span class="comment">// Dark content, for use on light backgrounds</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="改变状态栏文字的颜色"><a href="#改变状态栏文字的颜色" class="headerlink" title="改变状态栏文字的颜色"></a>改变状态栏文字的颜色</h2><p>是否可以在不同页面设置不同的风格，首先要配置好 <code>Info.plist</code> 中的 </p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">View</span> controller-based status bar appearance</span><br></pre></td></tr></table></figure>

<p>属性，默认为 <code>YES</code>。</p>
<ul>
<li>如果整个应用只需要使用固定的风格，上述属性改为 <code>NO</code>。在应用配置或者代码中设定好风格即可。</li>
<li>如果状态栏颜色需要视页面而定，上述属性改为 <code>YES</code>，并且重写控制器的 <code>preferredStatusBarStyle</code> 方法。</li>
</ul>
<p>对于需要调整 <code>ViewController</code> 风格的页面，我们重写它的 getter，这是一个 只读 的属性。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">var</span> preferredStatusBarStyle: <span class="type">UIStatusBarStyle</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">UIStatusBarStyle</span>.lightContent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然如果导航控制器重写了这个方法，它的子控制器都会以 导航控制器 的为准。如果子控制器中有需要改变风格的，同样也需要自己实现这个方法。</p>
<h2 id="状态栏的显示和隐藏"><a href="#状态栏的显示和隐藏" class="headerlink" title="状态栏的显示和隐藏"></a>状态栏的显示和隐藏</h2><ul>
<li>全局隐藏的话，很简单，直接改配置。</li>
<li>部分页面隐藏，同上，重写~~</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">var</span> prefersStatusBarHidden: <span class="type">Bool</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS13 适配注意点</title>
    <url>/2019/11/05/iOS13%20%E9%80%82%E9%85%8D%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
    <content><![CDATA[<h5 id="1、KVC-获取私有属性-直接崩溃，比方说获取-SearchBar-的-TextField"><a href="#1、KVC-获取私有属性-直接崩溃，比方说获取-SearchBar-的-TextField" class="headerlink" title="1、KVC 获取私有属性 直接崩溃，比方说获取 SearchBar 的 TextField"></a>1、KVC 获取私有属性 直接崩溃，比方说获取 SearchBar 的 TextField</h5><p>​    解决方案是做版本判断 iOS13 的 searchbar 新增了一个 searchTextField 属性</p>
<h5 id="2、Segement、SearchBar的样式变了，注意一下"><a href="#2、Segement、SearchBar的样式变了，注意一下" class="headerlink" title="2、Segement、SearchBar的样式变了，注意一下"></a>2、Segement、SearchBar的样式变了，注意一下</h5><p>​    for 循环查找子视图失效，改为  searchBar.searchTextField  </p>
 <a id="more"></a>

<h5 id="3、UIWebView-终极废弃，需要替换-WKWebView，不然-AppStore-审核是不通过的。"><a href="#3、UIWebView-终极废弃，需要替换-WKWebView，不然-AppStore-审核是不通过的。" class="headerlink" title="3、UIWebView 终极废弃，需要替换 WKWebView，不然 AppStore 审核是不通过的。"></a>3、UIWebView 终极废弃，需要替换 WKWebView，不然 AppStore 审核是不通过的。</h5><h5 id="4、黑夜模式"><a href="#4、黑夜模式" class="headerlink" title="4、黑夜模式"></a>4、黑夜模式</h5><h5 id="5、TextField：LeftView如果是图片的话-会覆盖整个-TextField-解决办法是用一个-view-包裹一下图片作为LeftView"><a href="#5、TextField：LeftView如果是图片的话-会覆盖整个-TextField-解决办法是用一个-view-包裹一下图片作为LeftView" class="headerlink" title="5、TextField：LeftView如果是图片的话 会覆盖整个 TextField 解决办法是用一个 view 包裹一下图片作为LeftView"></a>5、TextField：LeftView如果是图片的话 会覆盖整个 TextField 解决办法是用一个 view 包裹一下图片作为LeftView</h5><h5 id="6、UniversalLink"><a href="#6、UniversalLink" class="headerlink" title="6、UniversalLink"></a>6、UniversalLink</h5><h5 id="https-www-jianshu-com-p-03e6b7828307"><a href="#https-www-jianshu-com-p-03e6b7828307" class="headerlink" title="https://www.jianshu.com/p/03e6b7828307"></a><a href="https://www.jianshu.com/p/03e6b7828307" target="_blank" rel="noopener">https://www.jianshu.com/p/03e6b7828307</a></h5><p>​    微信分享强制使用。注册微信开放平台的时候 iOS的项目必须填这个。</p>
<h5 id="7、模态出的页面，需要指定对应的弹出模式"><a href="#7、模态出的页面，需要指定对应的弹出模式" class="headerlink" title="7、模态出的页面，需要指定对应的弹出模式"></a>7、模态出的页面，需要指定对应的弹出模式</h5><p>​    例如：UIModalPresentationOverFullScreen</p>
<p>​    检查图片选择器？</p>
<h5 id="8、Tabbar的文字颜色"><a href="#8、Tabbar的文字颜色" class="headerlink" title="8、Tabbar的文字颜色"></a>8、Tabbar的文字颜色</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[tabbarItem setTitleTextAttributes:@&#123;NSForegroundColorAttributeName:selectColor&#125; forState:UIControlStateSelected];</span><br></pre></td></tr></table></figure>

<p>​    此方法在 iOS 13 会有 bug，当我们 push 到下一页再次返回时 tabbar 字体颜色设置会失效。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.tabBar.tintColor = selectColor;</span><br></pre></td></tr></table></figure>

<h5 id="9、通过-NSURLSessionDataTask-下载文件流"><a href="#9、通过-NSURLSessionDataTask-下载文件流" class="headerlink" title="9、通过 NSURLSessionDataTask 下载文件流"></a>9、通过 NSURLSessionDataTask 下载文件流</h5><p>​    需要在头部指定接受的返回格式：<code>application/octet-stream</code></p>
<h5 id="10、Cocoapods"><a href="#10、Cocoapods" class="headerlink" title="10、Cocoapods"></a>10、Cocoapods</h5><p>​    升级 CocoaPods 到 1.8.4 版本</p>
<p>​    但是随即问题就来了, 执行 pod install 下载库时，出现错误</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">[!] <span class="symbol">CDN:</span> trunk URL couldn<span class="string">'t be downloaded: https://cdn.cocoapods.org/all_pods_versions_a_7_5.txt, error: execution expired</span></span><br></pre></td></tr></table></figure>

<p>后来查了半天资料, 最终在 <a href="https://github.com/CocoaPods/CocoaPods/issues/9303" target="_blank" rel="noopener">github CocoaPods issues</a> 找到解决方案：在 Podfile 加上 source <code>https://github.com/CocoaPods/Specs.git</code> 不使用新版本的 CDN</p>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iTerm 2 分屏切换</title>
    <url>/2020/12/14/iTerm%202%20%E5%88%86%E5%B1%8F/</url>
    <content><![CDATA[<ul>
<li><code>⌘ + d</code>:  垂直分屏</li>
<li><code>⌘ + shift + d</code>:  水平分屏</li>
<li><code>⌘ + ]</code>和<code>⌘ + [</code> ：在最近使用的分屏直接切换</li>
<li><code>⌘ + opt + 方向键</code>：切换到指定位置的分屏</li>
<li><code>⌘ + 数字</code>：切换标签页</li>
<li><code>⌘ + 方向键</code> ：按方向切换标签页</li>
<li><code>shift + ⌘ + s</code>：保存当前窗口快照</li>
<li><code>⌘ + opt + b</code>：快照回放，很有意思的功能，你可以对你的操作根据时间轴进行回放。可以拖动下方的时间轴，也可以按左右方向键。</li>
</ul>
<p>PS: 如果发现快捷键没起作用，可以看看是不是和系统或者其他软件的快捷键冲突了……</p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>mailcore 2 iOS  之二 SMTP</title>
    <url>/2018/12/12/mailcore2-iOS%E4%B9%8B%E4%BA%8CSMTP/</url>
    <content><![CDATA[<p>起源见 <a href="http://atommygirl.github.io/2018/02/02/2018-02-02-mailcore-2-iOS-%E4%B9%8B%E4%B8%80-IMAP/" target="_blank" rel="noopener">mailcore2-ios  之一 IMAP</a></p>
<p>上一篇大致说了下IMAP协议中的简单使用，看到文章有人看，为了我的<code>三个</code>👨‍💻‍👨‍💻‍👨‍💻‍粉丝，那我继续更新一下，</p>
<p>希望对你们有帮助，也做个沟通交流。</p>
<ul>
<li><p>IMAP <a href="http://zhengyatian.github.io/2018/02/02/2018-02-02-mailcore-2-iOS-%E4%B9%8B%E4%B8%80-IMAP/" target="_blank" rel="noopener">mailcore2-ios  之一 IMAP</a></p>
</li>
<li><p>SMTP</p>
  <a id="more"></a>

<ul>
<li>登录/用户验证</li>
<li>创建邮件体</li>
<li>附件添加</li>
<li>发送</li>
<li>发送成功后<code>手动</code>添加到<code>“已发送”</code>文件夹</li>
</ul>
</li>
</ul>
<h3 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h3><h4 id="1、登录-用户验证"><a href="#1、登录-用户验证" class="headerlink" title="1、登录/用户验证"></a>1、登录/用户验证</h4><p>​    不论哪种协议，都需要先验证邮箱地址/服务器、密码、端口等，SMTP也一样，你也可以不验证，大不了就是发不出去邮件。。。🤓🤓🤓🤓🤓</p>
<p>创建session，都类似的</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.smtpSession.hostname = session.smtpHost;<span class="comment">//smtp.***.com</span></span><br><span class="line"><span class="keyword">self</span>.smtpSession.username = session.username;<span class="comment">//littlecat@xxx.com.cn</span></span><br><span class="line"><span class="keyword">self</span>.smtpSession.password = session.password;<span class="comment">//password</span></span><br><span class="line"><span class="keyword">self</span>.smtpSession.port     = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)session.smtpPort;<span class="comment">//25、465、587？</span></span><br><span class="line"><span class="keyword">self</span>.smtpSession.connectionType = session.smtpIsSSL ? MCOConnectionTypeTLS: MCOConnectionTypeClear;<span class="comment">//取决于你的邮件服务器是不是SSL的；</span></span><br><span class="line"><span class="keyword">self</span>.smtpSession.authType = MCOAuthTypeSASLLogin;<span class="comment">//session校验的类型，这里选的登录，其他还没搞明白(没看。。)😌</span></span><br></pre></td></tr></table></figure>

<p>校验邮箱信息</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">MCOSMTPOperation *smtpOperation = [smtpSession loginOperation];</span><br><span class="line">[smtpOperation start:^(<span class="built_in">NSError</span> * error) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"finished checking SMTP account."</span>);</span><br><span class="line">    <span class="keyword">if</span> (error == <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="comment">//now ,you can send email.</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"error check smtp account: %@"</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h4 id="2、创建邮件"><a href="#2、创建邮件" class="headerlink" title="2、创建邮件"></a>2、创建邮件</h4><ul>
<li>create message builder;</li>
<li>set sender(from)、receiver（to）、cc and bcc;</li>
<li>set body (html body  or  plain text body);</li>
</ul>
<p>懒得正经打字了，bite me！🙄🙄🙄🙄🙄🙄🙄🙄🙄🙄</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)messageBuildFrom:(<span class="built_in">NSString</span> *)displayName <span class="comment">// 发件人昵称，可以不设置；</span></span><br><span class="line">                 mailBox:(<span class="built_in">NSString</span> *)mail  <span class="comment">//发件人邮箱地址；</span></span><br><span class="line">                      to:(<span class="built_in">NSArray</span> *)to  <span class="comment">//收件人（邮箱地址字符串格式，下同）；</span></span><br><span class="line">                      cc:(<span class="built_in">NSArray</span> *)cc  <span class="comment">//抄送人；</span></span><br><span class="line">                     bcc:(<span class="built_in">NSArray</span> *)bcc  <span class="comment">//密送人；</span></span><br><span class="line">                 subject:(<span class="built_in">NSString</span> *)subject  <span class="comment">//邮件主题；</span></span><br><span class="line">                textBody:(<span class="built_in">NSString</span> *)body  <span class="comment">//邮件正文，我这里是带标签的html文本；</span></span><br><span class="line">                 attachs:(<span class="built_in">NSDictionary</span> *)attachs  <span class="comment">//附件s（文件名称和NSData格式数据）；</span></span><br><span class="line">                htmlBody:(MCOAbstractMessage *)msgParser  <span class="comment">//转发时的原邮件；</span></span><br><span class="line">         completeHandler:(<span class="keyword">void</span>(^)())complete</span><br><span class="line">                   error:(<span class="keyword">void</span>(^)(<span class="built_in">NSError</span> *error))fail</span><br><span class="line">&#123;</span><br><span class="line">    MCOMessageBuilder *msgBuilder = [[MCOMessageBuilder alloc] init];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//header;</span></span><br><span class="line">    <span class="keyword">if</span> (displayName != <span class="literal">nil</span>) &#123;</span><br><span class="line">        msgBuilder.header.from = [MCOAddress addressWithDisplayName:displayName mailbox:mail];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        msgBuilder.header.from = [MCOAddress addressWithMailbox:mail];</span><br><span class="line">    &#125;</span><br><span class="line">    msgBuilder.header.to      = [<span class="keyword">self</span> mailStringToMCOAddress:to];<span class="comment">//字符串格式的邮箱地址，要转成address类；</span></span><br><span class="line">    msgBuilder.header.cc      = [<span class="keyword">self</span> mailStringToMCOAddress:cc];</span><br><span class="line">    msgBuilder.header.bcc     = [<span class="keyword">self</span> mailStringToMCOAddress:bcc];</span><br><span class="line">    msgBuilder.header.subject = subject;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//body</span></span><br><span class="line">    [msgBuilder setHTMLBody:body];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//------见下</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSArray</span> *)mailStringToMCOAddress:(<span class="built_in">NSArray</span> *)arr</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *temp = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *str <span class="keyword">in</span> arr) &#123;</span><br><span class="line">        MCOAddress *add = [MCOAddress addressWithMailbox:str];</span><br><span class="line">        [temp addObject:add];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp.copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、附件处理"><a href="#3、附件处理" class="headerlink" title="3、附件处理"></a>3、附件处理</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)messageBuildFrom:(<span class="built_in">NSString</span> *)displayName</span><br><span class="line">                 mailBox:(<span class="built_in">NSString</span> *)mail</span><br><span class="line">                      to:(<span class="built_in">NSArray</span> *)to</span><br><span class="line">                      cc:(<span class="built_in">NSArray</span> *)cc</span><br><span class="line">                     bcc:(<span class="built_in">NSArray</span> *)bcc</span><br><span class="line">                 subject:(<span class="built_in">NSString</span> *)subject</span><br><span class="line">                textBody:(<span class="built_in">NSString</span> *)body</span><br><span class="line">                 attachs:(<span class="built_in">NSDictionary</span> *)attachs</span><br><span class="line">                htmlBody:(MCOAbstractMessage *)msgParser</span><br><span class="line">         completeHandler:(<span class="keyword">void</span>(^)())complete</span><br><span class="line">                   error:(<span class="keyword">void</span>(^)(<span class="built_in">NSError</span> *error))fail</span><br><span class="line">&#123;</span><br><span class="line">    MCOMessageBuilder *msgBuilder = [[MCOMessageBuilder alloc] init];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------见上 。。。 ------//</span></span><br><span class="line">    <span class="keyword">if</span> (msgParser != <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="comment">//附加资源，</span></span><br><span class="line">        <span class="built_in">NSArray</span> *inAttach = msgParser.htmlInlineAttachments;</span><br><span class="line">        <span class="keyword">for</span> (MCOAttachment *attach <span class="keyword">in</span> inAttach) &#123;</span><br><span class="line">            <span class="built_in">NSString</span> * path = [<span class="built_in">NSTemporaryDirectory</span>() stringByAppendingPathComponent:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@_%@"</span>,msgParser.header.messageID,attach.filename]];</span><br><span class="line">            <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfFile:path];</span><br><span class="line">            <span class="keyword">if</span> (data) &#123;</span><br><span class="line">                MCOAttachment *temp = [MCOAttachment attachmentWithData:data filename:attach.filename];</span><br><span class="line">                temp.inlineAttachment = <span class="literal">YES</span>;</span><br><span class="line">                [msgBuilder addRelatedAttachment:temp];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//看接口文档的意思，上面是把转发的邮件中的附件添加上，</span></span><br><span class="line">    <span class="comment">//可是并不起作用。。。采取的方法是，下面循环再添加一次。。。。🤧🤧🤧🤧🤧</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//附件</span></span><br><span class="line">    <span class="keyword">if</span> (attachs) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSString</span> *name <span class="keyword">in</span> attachs.allKeys) &#123;</span><br><span class="line">            MCOAttachment *attach = [MCOAttachment attachmentWithData:[attachs objectForKey:name] filename:name];</span><br><span class="line">            [msgBuilder addAttachment:attach];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//send</span></span><br><span class="line">    <span class="comment">//--------见下</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4、发送邮件"><a href="#4、发送邮件" class="headerlink" title="4、发送邮件"></a>4、发送邮件</h4><p>邮件也创建了，附件添加完，终于要发送了，但是要注意的是<code>发送操作成功完成后，对方确实可以成功收到，但是在发送方的“已发送”是没有的，需要手动append一份过去</code>。<br>执行append操作，需要用<code>imapSession</code>的，不要搞错了。😅<br> “已发送”文件夹的filepath，可能是 <code>Sent、Sent Messages</code>等等，具体看你解析的邮箱服务器，不一定都是Sent 哦。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//send</span></span><br><span class="line"><span class="built_in">NSData</span> *rfc822 = [msgBuilder data];</span><br><span class="line">MCOSMTPSendOperation *send = [smtpSession sendOperationWithData:rfc822];</span><br><span class="line">[send start:^(<span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        fail(error);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//发送成功后，手动添加到“已发送”；</span></span><br><span class="line">        MCOIMAPAppendMessageOperation *op = [imapSession appendMessageOperationWithFolder:[MMIMAPTool getVirtualNameFor:<span class="string">@"Sent"</span>] messageData:rfc822 flags:MCOMessageFlagMDNSent];</span><br><span class="line">        [op start:^(<span class="built_in">NSError</span> *error, uint32_t createdUID) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"create sent message :%@\nerror:%@"</span>, @(createdUID), error);</span><br><span class="line">        &#125;];</span><br><span class="line">        complete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>注：上一篇IMAP使用中提到过，创建草稿，过程和这个类似，不过最后执行append 是 放到 <code>草稿箱</code>，不是<code>已发送</code>了。</p>
<h4 id="POP-还没写"><a href="#POP-还没写" class="headerlink" title="POP 还没写"></a>POP <a href>还没写</a></h4>]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>邮箱</tag>
      </tags>
  </entry>
  <entry>
    <title>乌龙 之 我吐了</title>
    <url>/2020/06/02/%E4%B9%8C%E9%BE%99-%E6%88%91%E5%90%90%E4%BA%86/</url>
    <content><![CDATA[<p>之前用的 hexo 主题作者不维护了，所以换了个洋气的<del>~</del></p>
<p>乌龙就这样开始了：</p>
<a id="more"></a>

<p>文章里的代码块，明明设置了语言objective-c，可是高亮却怎么都不起作用，鼓捣了一通hljs，其实hexo 默认的就是hljs，我还跑去给人主题作者留了言。。。</p>
<p>搜索了半天大家都是怎么设置高亮的，我发现发表意见的人中，偶有几个是同行，抛开设置语言的方式，他们给代码设置的语言都是 <strong>objc</strong></p>
<p>于是我也</p>
<blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">​```objc</span><br></pre></td></tr></table></figure>
</blockquote>
<p>.</p>
<p>.</p>
<p>.</p>
<p>就好了。。。。。</p>
<p><strong>objective-c</strong>改为<strong>objc</strong> 。。。。。。就好了。。。。。。</p>
<p>我吐了真的是<del>~</del></p>
<p>PS：使用的md编辑器是Typora，我看人家有个语言的选项是 objective-c，我就选了。。。。。秀逗了。。。。。。</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/9.png" alt="图一"></p>
]]></content>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS上线 AppStore - 打包、upload 时遇到的问题</title>
    <url>/2019/08/19/%E4%B8%8A%E7%BA%BF%20AppStore/</url>
    <content><![CDATA[<p>iOS打包上线遇到的问题记录和解决办法：</p>
<blockquote>
<p>ERROR ITMS-90034<br>ERROR ITMS-4236<br>ERROR ITMS-90717</p>
</blockquote>
<h4 id="1-ERROR-ITMS-90034"><a href="#1-ERROR-ITMS-90034" class="headerlink" title="1. ERROR ITMS-90034:"></a>1. ERROR ITMS-90034:</h4><p>“Missing or invalid signature.The bundle’com.xxx.xxx’ at bundle path ‘Payload/xxx’ is not signed using an Apple submission certificate.”</p>
<a id="more"></a>

<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/1.png" alt="ERROR ITMS-90034"></p>
<p>这个错误显示我们 没有使用符合苹果规范的证书签名App 而导致的。<br>接下来我们就一步一步的检查证书到底哪里出了问题：</p>
<ul>
<li>打开钥匙串，找到对应的生产证书，确保证书已经添加到钥匙串中，并且显示证书有效。</li>
</ul>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/2.png" alt="证书有效否"></p>
<ul>
<li>如果显示 <code>此证书的签发者无效</code> ：<ul>
<li>证书是通过你打包电脑申请签发的，检查是否有过期的根证书，把所有显示已过期的证书<code>全部删除</code>。</li>
</ul>
</li>
</ul>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/03.png" alt="显示已过期的证书"></p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/04.png" alt="删除所有过期的证书"></p>
<ul>
<li>证书是别人通过P12的方式转给你的，看看私钥是不是没有，可以从签发P12的电脑再重新导出一份。像下面这个证书没有小箭头就表示没有私钥。</li>
</ul>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/5.png" alt="没有私钥"></p>
<ul>
<li>点击证书–&gt;显示简介–&gt;信任，如果此处，不是使用系统默认，就进行更改成“使用系统默认”。</li>
</ul>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/6.png" alt="信任证书"></p>
<p>上面这些操作应该就能解决问题了，可以打包重新upload试试。</p>
<h4 id="2-ERROR-ITMS-4236"><a href="#2-ERROR-ITMS-4236" class="headerlink" title="2. ERROR ITMS-4236:"></a>2. ERROR ITMS-4236:</h4><p>“Invalid value ‘2019-08-16 14:23:22’ for bundle_version” at SoftwareAssets”</p>
<p>之前App的测试版本，为了方便知道更新时间，Build版本号是通过 Run Script 动态注入了一个时间格式，如下：</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/7.png" alt="Build"></p>
<p>事实证明，不让这样用，哈哈，乖乖的改回了 2.2.2 。</p>
<h4 id="3-ERROR-ITMS-90717"><a href="#3-ERROR-ITMS-90717" class="headerlink" title="3. ERROR ITMS-90717:"></a>3. ERROR ITMS-90717:</h4><p>“Invalid App Store Icon. The App Store Icon in the asset catalog in ‘.app’ can’t be transparent nor contain an alpha channel.”</p>
<p>错误原因：应用图标不能有透明度或者包含Alpha 通道。</p>
<ul>
<li><p>让美工去掉图片的透明度。</p>
</li>
<li><p>自己修改图片的Alpha 通道选项为 否。预览-&gt;文件-&gt;导出为PNG，取消选中。如下图</p>
</li>
</ul>
<p>  <img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/8.png" alt="alpha"></p>
<div contenteditable="plaintext-only"><div contenteditable="plaintext-only"><center>
  <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/flag.jpeg" class width="200"></div>
</center>

</div></div>]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>去掉UIWebView底部的黑条</title>
    <url>/2018/12/13/%E5%8E%BB%E6%8E%89UIWebView%E5%BA%95%E9%83%A8%E7%9A%84%E9%BB%91%E6%9D%A1/</url>
    <content><![CDATA[<p>webview 在多次刷新内容后，正文的下面有一块莫名其妙的黑色区域，如图一，本以为是由于我改了“UIWebDocumentView” 的原因，看到这个属性改了一下，发现居然好了。。。<br><code>opaque 默认是YES</code><br>改为 <code>self.webView.opaque = NO;</code></p>
<a id="more"></a>

<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/3.png" alt="图一"></p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/4.png" alt="图二"></p>
<p>看文档里面的注释，发现，我的英文真的不咋地，自己翻译吧。。。。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">getter</span>=isOpaque) <span class="built_in">BOOL</span>  opaque;                     </span><br><span class="line"><span class="comment">// default is YES. opaque views must fill their entire bounds or the results are undefined. </span></span><br><span class="line"><span class="comment">//the active CGContext in drawRect: will not have been cleared and may have non-zeroed pixels</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>WebView</tag>
      </tags>
  </entry>
  <entry>
    <title>吃饭啦</title>
    <url>/2020/05/22/%E5%90%83%E9%A5%AD%E5%95%A6/</url>
    <content><![CDATA[<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/cfl.jpg" alt></p>
<p>就算一个人在家次饭，也要元气满满的哦，介绍一下这个小菜单吧，哈哈：</p>
<p>🐟🐟🐟🐟清烤多春鱼</p>
<blockquote>
<p>京都多春雨，回首多春光。公子多春情，绿草多春芳。八载多春伤，橙子多春鱼。</p>
</blockquote>
<a id="more"></a>

<p>​    多春鱼的名字起得可以说非常贴切，四季多子，满腹鱼子，吃起来Q弹又有营养。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">拔掉鱼鳃和内脏</span><br><span class="line">加一些料酒呀、生姜呀、胡椒粉 腌10分钟就可以喽</span><br><span class="line">烤箱上下220预热5分钟，烘烤时间设置为15分钟</span><br><span class="line">预热期间可以准备刷油了，轻轻刷一点就好了，因为我们是清烤嘛，嘻嘻~~</span><br></pre></td></tr></table></figure>



<p>🍆清蒸茄子</p>
<p>清蒸茄子是我夏天最喜欢吃的一道菜，爽口又没有热量😳</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">茄子洗净切片，上锅蒸</span><br><span class="line">准备蒜和香油，蒜切末备用，看自己喜好放多少吧</span><br><span class="line">茄子整好以后，放在容器中，加入盐、蒜末、香油几滴</span><br><span class="line">可以开动了，香喷喷美滋滋呀</span><br></pre></td></tr></table></figure>

<p>PS：我个人很喜欢在菜里放大蒜，因为吃大蒜可以让人快乐。哈哈。</p>
<p>🌲另一个菜叫什么呢？</p>
<p>其实我也不知道，哈哈，土豆、青椒、洋葱大杂烩，切成小片，一起翻炒，喜欢吃肉可以放点肉粒，我不喜欢，所以是素炒的。</p>
<p>🍚最后配上一碗白米饭，可以开动啦<del>~</del></p>
<p>单身狗们看完会不会觉得很麻烦呢，一个人做这么多要多久呀，好烦。呐，时间管理大师说过(不是罗志祥🙅‍♂️)，所有的任务要区分好，并行和串行！拿我们这次的午餐举例：</p>
<blockquote>
<p>蒸🍚 -&gt; 处理🍆 -&gt; 上锅蒸 -&gt; 处理🐟 + 切土豆等等 -&gt; 🐟进烤箱 -&gt; 🍆出锅 -&gt; 炒大杂烩 = 吃饭啦<del>~</del></p>
</blockquote>
<p>为什么分享美食呢，其实我就是试一下图片为什么加不进去了，现在好了<del>~</del>QTQ</p>
]]></content>
      <tags>
        <tag>我</tag>
      </tags>
  </entry>
  <entry>
    <title>昨天</title>
    <url>/2021/04/15/%E6%98%A8%E5%A4%A9/</url>
    <content><![CDATA[<p>一个人从我们的世界里消失，可能需要三五天、七八个月、十年八年、甚至一生。但再次出现，只需要一秒，就这一秒。</p>
]]></content>
      <tags>
        <tag>我</tag>
      </tags>
  </entry>
  <entry>
    <title>由 Pod 导致的 File not found</title>
    <url>/2020/09/04/%E7%94%B1Pod%E5%AF%BC%E8%87%B4%E7%9A%84FileNotFound/</url>
    <content><![CDATA[<p>今天对一个 Pod 库做了小版本的升级，然后又回退到原来的版本，CocoaPods 就不乐意了， 一直报 <code>#import &lt;Masonry/Masonry.h&gt; file not found</code> 类似的错误，所有的 Pod 库都这样，着实让人头大。</p>
<p>解决方法：<br> 点击 <code>YourProject -&gt; Project -&gt; 选中 YourProject -&gt; Info -&gt; Configurations -&gt;</code> 把对应的 <code>Debug</code> 和 <code>Release</code> 里的参数设为 <code>Pods-xxxxxx.Debug / Pods-xxxxxx.Release</code>（这些参数在未设置前应该是 None，可能 CocoaPods 在安装第三方库时没正确设置这个参数）。<br> 重新编译工程，应该能成功了。</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/11.png" alt></p>
<h6 id><a href="#" class="headerlink" title></a></h6>]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>Xcode</tag>
        <tag>pod</tag>
      </tags>
  </entry>
  <entry>
    <title>绿豆儿没了</title>
    <url>/2021/01/11/%E7%BB%BF%E8%B1%86%E5%84%BF%E6%B2%A1%E4%BA%86/</url>
    <content><![CDATA[<center>
  <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/%E8%B1%86%E5%84%BF.jpg" class width="500"></div>
</center>




<p>我的绿豆儿死了。</p>
<p>昨天晚上11点多，才想起来看看绿豆儿冬眠的怎么样，结果拿起来一看……那个画面感觉这辈子忘不了……</p>
<p>终究是我没照顾好她。希望她去了她想去的地方。</p>
<p>辛苦萝卜君把她和小白埋在一起了。😔😭</p>
]]></content>
      <tags>
        <tag>我</tag>
      </tags>
  </entry>
  <entry>
    <title>隐忍</title>
    <url>/2021/01/06/%E9%9A%90%E5%BF%8D/</url>
    <content><![CDATA[<p>隐忍，从今天开始。</p>
<p>希望你幸福，爱笑的汤先生。</p>
<a id="more"></a>

<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/10.jpg" alt></p>
]]></content>
      <tags>
        <tag>我</tag>
      </tags>
  </entry>
  <entry>
    <title>AudioServicesPlaySystemSound 播放系统提示音</title>
    <url>/2021/06/18/AudioServicesPlaySystemSound/</url>
    <content><![CDATA[<p>系统提示音 SystemSoundID 。</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AudioServices is a group of C functions in AudioToolbox for playing short (≤30 seconds) sounds.</span><br><span class="line"></span><br><span class="line">Predefined sounds</span><br><span class="line"></span><br><span class="line">There are some predefined system sounds, for the system sound ID in the range 1000 to 2000 (decimal), as shown below (from 2.0 to 5.0 beta). The system sounds are all stored in &#x2F;System&#x2F;Library&#x2F;Audio&#x2F;UISounds&#x2F;.</span><br><span class="line"></span><br><span class="line">Sound ID        File name (iPhone)        File name (iPod Touch)        Category        Note</span><br><span class="line"></span><br><span class="line">1000    new-mail.caf    new-mail.caf    MailReceived</span><br><span class="line"></span><br><span class="line">1001    mail-sent.caf    mail-sent.caf    MailSent</span><br><span class="line"></span><br><span class="line">1002    Voicemail.caf    Voicemail.caf    VoicemailReceived</span><br><span class="line"></span><br><span class="line">1003    ReceivedMessage.caf    ReceivedMessage.caf    SMSReceived</span><br><span class="line"></span><br><span class="line">1004    SentMessage.caf    SentMessage.caf    SMSSent</span><br><span class="line"></span><br><span class="line">1005    alarm.caf    sq_alarm.caf    CalendarAlert</span><br><span class="line"></span><br><span class="line">1006    low_power.caf    low_power.caf    LowPower</span><br><span class="line"></span><br><span class="line">1007    sms-received1.caf    sms-received1.caf    SMSReceived_Alert</span><br><span class="line"></span><br><span class="line">1008    sms-received2.caf    sms-received2.caf    SMSReceived_Alert</span><br><span class="line"></span><br><span class="line">1009    sms-received3.caf    sms-received3.caf    SMSReceived_Alert</span><br><span class="line"></span><br><span class="line">1010    sms-received4.caf    sms-received4.caf    SMSReceived_Alert</span><br><span class="line"></span><br><span class="line">1011    -    -    SMSReceived_Vibrate</span><br><span class="line"></span><br><span class="line">1012    sms-received1.caf    sms-received1.caf    SMSReceived_Alert</span><br><span class="line"></span><br><span class="line">1013    sms-received5.caf    sms-received5.caf    SMSReceived_Alert</span><br><span class="line"></span><br><span class="line">1014    sms-received6.caf    sms-received6.caf    SMSReceived_Alert</span><br><span class="line"></span><br><span class="line">1015    Voicemail.caf    Voicemail.caf    -    Available since 2.1</span><br><span class="line"></span><br><span class="line">1016    tweet_sent.caf    tweet_sent.caf    SMSSent    Available since 5.0</span><br><span class="line"></span><br><span class="line">1020    Anticipate.caf    Anticipate.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1021    Bloom.caf    Bloom.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1022    Calypso.caf    Calypso.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1023    Choo_Choo.caf    Choo_Choo.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1024    Descent.caf    Descent.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1025    Fanfare.caf    Fanfare.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1026    Ladder.caf    Ladder.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1027    Minuet.caf    Minuet.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1028    News_Flash.caf    News_Flash.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1029    Noir.caf    Noir.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1030    Sherwood_Forest.caf    Sherwood_Forest.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1031    Spell.caf    Spell.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1032    Suspense.caf    Suspense.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1033    Telegraph.caf    Telegraph.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1034    Tiptoes.caf    Tiptoes.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1035    Typewriters.caf    Typewriters.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1036    Update.caf    Update.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1050    ussd.caf    ussd.caf    USSDAlert</span><br><span class="line"></span><br><span class="line">1051    SIMToolkitCallDropped.caf    SIMToolkitCallDropped.caf    SIMToolkitTone</span><br><span class="line"></span><br><span class="line">1052    SIMToolkitGeneralBeep.caf    SIMToolkitGeneralBeep.caf    SIMToolkitTone</span><br><span class="line"></span><br><span class="line">1053    SIMToolkitNegativeACK.caf    SIMToolkitNegativeACK.caf    SIMToolkitTone</span><br><span class="line"></span><br><span class="line">1054    SIMToolkitPositiveACK.caf    SIMToolkitPositiveACK.caf    SIMToolkitTone</span><br><span class="line"></span><br><span class="line">1055    SIMToolkitSMS.caf    SIMToolkitSMS.caf    SIMToolkitTone</span><br><span class="line"></span><br><span class="line">1057    Tink.caf    Tink.caf    PINKeyPressed</span><br><span class="line"></span><br><span class="line">1070    ct-busy.caf    ct-busy.caf    AudioToneBusy    There was no category for this sound before 4.0.</span><br><span class="line"></span><br><span class="line">1071    ct-congestion.caf    ct-congestion.caf    AudioToneCongestion    There was no category for this sound before 4.0.</span><br><span class="line"></span><br><span class="line">1072    ct-path-ack.caf    ct-path-ack.caf    AudioTonePathAcknowledge    There was no category for this sound before 4.0.</span><br><span class="line"></span><br><span class="line">1073    ct-error.caf    ct-error.caf    AudioToneError    There was no category for this sound before 4.0.</span><br><span class="line"></span><br><span class="line">1074    ct-call-waiting.caf    ct-call-waiting.caf    AudioToneCallWaiting    There was no category for this sound before 4.0.</span><br><span class="line"></span><br><span class="line">1075    ct-keytone2.caf    ct-keytone2.caf    AudioToneKey2    There was no category for this sound before 4.0.</span><br><span class="line"></span><br><span class="line">1100    lock.caf    sq_lock.caf    ScreenLocked</span><br><span class="line"></span><br><span class="line">1101    unlock.caf    sq_lock.caf    ScreenUnlocked</span><br><span class="line"></span><br><span class="line">1102    -    -    FailedUnlock</span><br><span class="line"></span><br><span class="line">1103    Tink.caf    sq_tock.caf    KeyPressed</span><br><span class="line"></span><br><span class="line">1104    Tock.caf    sq_tock.caf    KeyPressed</span><br><span class="line"></span><br><span class="line">1105    Tock.caf    sq_tock.caf    KeyPressed</span><br><span class="line"></span><br><span class="line">1106    beep-beep.caf    sq_beep-beep.caf    ConnectedToPower</span><br><span class="line"></span><br><span class="line">1107    RingerChanged.caf    RingerChanged.caf    RingerSwitchIndication</span><br><span class="line"></span><br><span class="line">1108    photoShutter.caf    photoShutter.caf    CameraShutter</span><br><span class="line"></span><br><span class="line">1109    shake.caf    shake.caf    ShakeToShuffle    Available since 3.0</span><br><span class="line"></span><br><span class="line">1110    jbl_begin.caf    jbl_begin.caf    JBL_Begin    Available since 3.0</span><br><span class="line"></span><br><span class="line">1111    jbl_confirm.caf    jbl_confirm.caf    JBL_Confirm    Available since 3.0</span><br><span class="line"></span><br><span class="line">1112    jbl_cancel.caf    jbl_cancel.caf    JBL_Cancel    Available since 3.0</span><br><span class="line"></span><br><span class="line">1113    begin_record.caf    begin_record.caf    BeginRecording    Available since 3.0</span><br><span class="line"></span><br><span class="line">1114    end_record.caf    end_record.caf    EndRecording    Available since 3.0</span><br><span class="line"></span><br><span class="line">1115    jbl_ambiguous.caf    jbl_ambiguous.caf    JBL_Ambiguous    Available since 3.0</span><br><span class="line"></span><br><span class="line">1116    jbl_no_match.caf    jbl_no_match.caf    JBL_NoMatch    Available since 3.0</span><br><span class="line"></span><br><span class="line">1117    begin_video_record.caf    begin_video_record.caf    BeginVideoRecording    Available since 3.0</span><br><span class="line"></span><br><span class="line">1118    end_video_record.caf    end_video_record.caf    EndVideoRecording    Available since 3.0</span><br><span class="line"></span><br><span class="line">1150    vc~invitation-accepted.caf    vc~invitation-accepted.caf    VCInvitationAccepted    Available since 4.0</span><br><span class="line"></span><br><span class="line">1151    vc~ringing.caf    vc~ringing.caf    VCRinging    Available since 4.0</span><br><span class="line"></span><br><span class="line">1152    vc~ended.caf    vc~ended.caf    VCEnded    Available since 4.0</span><br><span class="line"></span><br><span class="line">1153    ct-call-waiting.caf    ct-call-waiting.caf    VCCallWaiting    Available since 4.1</span><br><span class="line"></span><br><span class="line">1154    vc~ringing.caf    vc~ringing.caf    VCCallUpgrade    Available since 4.1</span><br><span class="line"></span><br><span class="line">1200    dtmf-0.caf    dtmf-0.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1201    dtmf-1.caf    dtmf-1.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1202    dtmf-2.caf    dtmf-2.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1203    dtmf-3.caf    dtmf-3.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1204    dtmf-4.caf    dtmf-4.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1205    dtmf-5.caf    dtmf-5.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1206    dtmf-6.caf    dtmf-6.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1207    dtmf-7.caf    dtmf-7.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1208    dtmf-8.caf    dtmf-8.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1209    dtmf-9.caf    dtmf-9.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1210    dtmf-star.caf    dtmf-star.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1211    dtmf-pound.caf    dtmf-pound.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1254    long_low_short_high.caf    long_low_short_high.caf    Headset_StartCall</span><br><span class="line"></span><br><span class="line">1255    short_double_high.caf    short_double_high.caf    Headset_Redial</span><br><span class="line"></span><br><span class="line">1256    short_low_high.caf    short_low_high.caf    Headset_AnswerCall</span><br><span class="line"></span><br><span class="line">1257    short_double_low.caf    short_double_low.caf    Headset_EndCall</span><br><span class="line"></span><br><span class="line">1258    short_double_low.caf    short_double_low.caf    Headset_CallWaitingActions</span><br><span class="line"></span><br><span class="line">1259    middle_9_short_double_low.caf    middle_9_short_double_low.caf    Headset_TransitionEnd</span><br><span class="line"></span><br><span class="line">1300    Voicemail.caf    Voicemail.caf    SystemSoundPreview</span><br><span class="line"></span><br><span class="line">1301    ReceivedMessage.caf    ReceivedMessage.caf    SystemSoundPreview</span><br><span class="line"></span><br><span class="line">1302    new-mail.caf    new-mail.caf    SystemSoundPreview</span><br><span class="line"></span><br><span class="line">1303    mail-sent.caf    mail-sent.caf    SystemSoundPreview</span><br><span class="line"></span><br><span class="line">1304    alarm.caf    sq_alarm.caf    SystemSoundPreview</span><br><span class="line"></span><br><span class="line">1305    lock.caf    sq_lock.caf    SystemSoundPreview</span><br><span class="line"></span><br><span class="line">1306    Tock.caf    sq_tock.caf    KeyPressClickPreview    The category was SystemSoundPreview before 3.2.</span><br><span class="line"></span><br><span class="line">1307    sms-received1.caf    sms-received1.caf    SMSReceived_Selection</span><br><span class="line"></span><br><span class="line">1308    sms-received2.caf    sms-received2.caf    SMSReceived_Selection</span><br><span class="line"></span><br><span class="line">1309    sms-received3.caf    sms-received3.caf    SMSReceived_Selection</span><br><span class="line"></span><br><span class="line">1310    sms-received4.caf    sms-received4.caf    SMSReceived_Selection</span><br><span class="line"></span><br><span class="line">1311    -    -    SMSReceived_Vibrate</span><br><span class="line"></span><br><span class="line">1312    sms-received1.caf    sms-received1.caf    SMSReceived_Selection</span><br><span class="line"></span><br><span class="line">1313    sms-received5.caf    sms-received5.caf    SMSReceived_Selection</span><br><span class="line"></span><br><span class="line">1314    sms-received6.caf    sms-received6.caf    SMSReceived_Selection</span><br><span class="line"></span><br><span class="line">1315    Voicemail.caf    Voicemail.caf    SystemSoundPreview    Available since 2.1</span><br><span class="line"></span><br><span class="line">1320    Anticipate.caf    Anticipate.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1321    Bloom.caf    Bloom.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1322    Calypso.caf    Calypso.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1323    Choo_Choo.caf    Choo_Choo.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1324    Descent.caf    Descent.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1325    Fanfare.caf    Fanfare.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1326    Ladder.caf    Ladder.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1327    Minuet.caf    Minuet.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1328    News_Flash.caf    News_Flash.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1329    Noir.caf    Noir.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1330    Sherwood_Forest.caf    Sherwood_Forest.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1331    Spell.caf    Spell.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1332    Suspense.caf    Suspense.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1333    Telegraph.caf    Telegraph.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1334    Tiptoes.caf    Tiptoes.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1335    Typewriters.caf    Typewriters.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1336    Update.caf    Update.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1350    -    -    RingerVibeChanged</span><br><span class="line"></span><br><span class="line">1351    -    -    SilentVibeChanged</span><br><span class="line"></span><br><span class="line">4095    -    -    Vibrate    There was no category for this sound before 2.2.</span><br><span class="line"></span><br><span class="line">In the SDK this is the constant kSystemSoundID</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 常用的文件操作命令</title>
    <url>/2021/07/01/CentOS%20%E5%B8%B8%E7%94%A8%E7%9A%84%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="cd-pwd"><a href="#cd-pwd" class="headerlink" title="cd pwd"></a>cd pwd</h3><ol>
<li>显示当前路径</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>返回用户主目录</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<ol start="3">
<li>改变到其它路径</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>返回到上一级目录</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>返回到根目录</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br></pre></td></tr></table></figure>



<!--more-->

<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><blockquote>
<p>查询文件或文件夹的 CentOS 常用命令</p>
</blockquote>
<ol>
<li>查找当前用户主目录下的所有文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find ~</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>让当前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find . -perm 644 -<span class="built_in">exec</span> ls -l &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>为了查找系统中所有文件长度为 0 的普通文件，并列出它们的完整路径</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find / size 0 -<span class="built_in">type</span> f -<span class="built_in">exec</span> ls -l &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查找 / var/logs 目录中更改时间在 7 日以前的普通文件，并在删除之前询问它们</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find /var/logs -mtime +7 -<span class="built_in">type</span> f -ok rm -i &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>为 / 找系统中所有属于 root 组的文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find / -group root -<span class="built_in">exec</span> ls -l &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>find 命令将删除当目录中访问时间在 7 日以来、含有数字后缀的 admin.log 文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">"admin.log[0-9][0-9][0-9]"</span> -atime -7 -ok rm &#123; &#125; \;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>为了查找当前文件系统中的所有目录并排序</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> d | sort</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>为了查找系统中所有的 rmt 磁带设备</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find /dev/rmt</span><br></pre></td></tr></table></figure>



<h3 id="ls-dir"><a href="#ls-dir" class="headerlink" title="ls / dir"></a>ls / dir</h3><blockquote>
<p>显示文件 / 文件夹清单的 CentOS 常用命令</p>
</blockquote>
<ol>
<li>显示所有文件，包括以. 开头的隐含文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -a</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>显示文件的详细信息</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -l</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>显示当前目录及所有子目录信息</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -Rl</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>以时间序显示目录, 这在找最新文件有用</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -tl</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>以文件大小排序</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -Sl</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>显示文件大小, 并按大小排序</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -s -l -S</span><br></pre></td></tr></table></figure>



<h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><blockquote>
<p> 移动或更改文件 / 文件夹名称的 CentOS 常用命令 与 cp 命令用法相似</p>
</blockquote>
<ol>
<li>若移动目标文件已存在，要在移动之前，先备份原来的目录文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mv -b test.txt test2/</span><br></pre></td></tr></table></figure>

<p>这样在 test2 下将有两个文件 test.txt 及 text.txt~</p>
<p>其中 test.txt~ 是备份文件，test.txt 是新的文件</p>
<ol start="2">
<li>若移动目标文件已存在，但不想弹出是否覆盖的提示，直接覆盖</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mv <span class="operator">-f</span> test.txt test2/</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>当源与目标都拥有同一个文件，若源文件比目标新则移动，否则不移动</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mv <span class="literal">-u</span> test.txt test2/</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>更改文件名称</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mv test.txt test2.txt</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>更改目录名称</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mv /test2 /test2_2[/<span class="type">size</span>]</span><br></pre></td></tr></table></figure>



<h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><blockquote>
<p>改变文件或文件夹权限的 CentOS 常用命令 </p>
</blockquote>
<ol>
<li>将自己的笔记设为只有自己才能看</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">chmod go<span class="literal">-rwx</span> test.txt </span><br><span class="line"><span class="comment"># 或者 </span></span><br><span class="line">chmod <span class="number">700</span> test.txt</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>同时修改多个文件的权限</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">chmod <span class="number">700</span> test1.txt test2.txt</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改一个目录的权限，包括其子目录及文件</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">chmod <span class="number">700</span> <span class="literal">-R</span> test</span><br></pre></td></tr></table></figure>



<h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h3><blockquote>
<p>改变文件或文件夹拥有者的 CentOS 常用命令，该命令只有 root 才能使用</p>
</blockquote>
<ol>
<li>更改某个文件的拥有者</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chown jim:usergroup test.txt</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>更改某个目录的拥有者, 并包含子目录</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chown jim:usergroup -R <span class="built_in">test</span></span><br></pre></td></tr></table></figure>



<h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><blockquote>
<p>查看文本文件内容的 CentOS 常用命令</p>
</blockquote>
<ol>
<li>查看文件内容，并在每行前面加上行号</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat -n test.txt</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看文件内容，在不是空行的前面加上行号</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat -b test.txt</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>合并两个文件的内容</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test1.txt test2.txt &gt; test_new.txt</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>全并两具文件的内容，并追回到一个文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test1.txt test2.txt &gt;&gt; test_total.txt</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>清空某个文件的内容</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /dev/null &gt; test.txt</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>创建一个新的文件</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">cat &gt; new.txt <span class="comment"># 按 CTRL + C 结束录入</span></span><br></pre></td></tr></table></figure>



<h3 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h3><blockquote>
<p>编辑文件文件的 CentOS 常用命令 </p>
</blockquote>
<ol>
<li>新建档案文件</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">vi newfile.txt</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改档案文件</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">vi test.txt   <span class="comment">#test.txt 已存在</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>vi 的两种工作模式：命令模式，编辑模式</p>
</li>
<li><p>进入 vi 后为命令模式，按 Insrt 键进入编辑模式; 按 ESC 进入命令模式，在命令模式不能编辑，只能输入命令.</p>
</li>
<li><p>命令模式常用命令</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:w 保存当前文档 </span><br><span class="line">:q 直接退出 vi </span><br><span class="line">:wq 先保存后退出 。</span><br><span class="line">:q! 强制不保存退出</span><br></pre></td></tr></table></figure>



<h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><blockquote>
<p>创建目录的 CentOS 常用命令 </p>
</blockquote>
<ol>
<li>在当前路径创建一级目录</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在当前路径创建多级目录</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir <span class="literal">-p</span> mytest/test1/test1_1</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在创建目录的同时给新建的目录赋权限</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir <span class="literal">-m</span> <span class="number">777</span> testmod</span><br></pre></td></tr></table></figure>

<p>这样任何人对此目录都有任何权限</p>
<h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><blockquote>
<p>复制文件与文件夹的 CentOS 常用命令</p>
</blockquote>
<ol>
<li>复制指定目录的文件到当前目录，并重命名</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cp ~/.bashrc bashrc_bak</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>强制复制指定目录的文件到当前目录，而不管当前目录是否含有该文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cp -f ~/.bashrc bashrc</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>复制指定目录到当前目录</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cp -r /root/<span class="built_in">test</span> . </span><br><span class="line">cp -r /root/<span class="built_in">test</span>/ .</span><br></pre></td></tr></table></figure>

<p>两者效果一样，在复制目录时，会将源路径的最后一级目录全部复制过去，包括它本身。</p>
<ol start="3">
<li>复制指定目录的文件到指定目录</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cp ~/.bashrc /bak/.bashrc</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在复制时将源文件的全部属性也复制过来。若不指定参数，则目标文件与源文件属性可能不一致</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cp -a ~/.bashrc /bak/.bashrc</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>若两个文件夹要保证同步，一个文件的改了，另一个文件也跟着改，但是要保证两个文件的文件都是最新的</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cp -u /src/.bashrc /bak_src/bashrc</span><br></pre></td></tr></table></figure>



<h3 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h3><blockquote>
<p>建立链接文件，包括硬链接与软链接的 CentOS 常用命令</p>
</blockquote>
<ol>
<li>建立类似于 Windows 的快捷方式</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ln -s test.txt test.txt_slnk</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>当想备份一个文件，但空间又不够，则可以为该文件建立一个硬连接。这样，就算原文件删除了，只要该 链接文件没被删除，则在存储空间里还是没有被删除</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ln -l test.txt test.txt_hlnk</span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看 cpu</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">more /proc/cpuinfo | grep <span class="string">"model name"</span>   </span><br><span class="line">grep <span class="string">"model name"</span> /proc/cpuinfo   </span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> /]<span class="comment"># grep "CPU" /proc/cpuinfo   </span></span><br><span class="line">model name      : Intel(R) Pentium(R) Dual CPU E2180 <span class="selector-tag">@</span> <span class="number">2.00</span>GHz   </span><br><span class="line">model name      : Intel(R) Pentium(R) Dual CPU E2180 <span class="selector-tag">@</span> <span class="number">2.00</span>GHz</span><br></pre></td></tr></table></figure>

<p>如果觉得需要看的更加舒服</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">grep <span class="string">"model name"</span> /proc/cpuinfo | cut <span class="literal">-f2</span> <span class="literal">-d</span>:</span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看内存</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">grep MemTotal /proc/meminfo  grep MemTotal /proc/meminfo | cut <span class="literal">-f2</span> <span class="literal">-d</span>:  free <span class="literal">-m</span> |grep <span class="string">"Mem"</span> | awk <span class="string">'&#123;print $2&#125;'</span></span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看 cpu 是 32 位还是 64 位 查看 CPU 位数 (32 or 64)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">getconf LONG_BIT</span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看当前 linux 的版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">more /etc/redhat-release</span><br><span class="line">cat /etc/redhat-release</span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看内核版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">uname -r</span><br><span class="line">uname -a</span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看当前时间</p>
<p>date 上面已经介绍如何同步时间了</p>
<p>使用 CentOS 常用命令查看硬盘和分区</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">df -h</span><br><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>

<p>也可以查看分区</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">du -sh</span><br></pre></td></tr></table></figure>

<p>可以看到全部占用的空间</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">du /etc -sh</span><br></pre></td></tr></table></figure>

<p>可以看到这个目录的大小</p>
<p>使用 CentOS 常用命令查看安装的软件包, 查看系统安装的时候装的软件包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat -n /root/install.log</span><br><span class="line">more /root/install.log | wc -l</span><br></pre></td></tr></table></figure>

<p>查看现在已经安装了那些软件包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rpm -qa</span><br><span class="line">rpm -qa | wc -l</span><br><span class="line">yum list installed | wc -l</span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看键盘布局</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /etc/sysconfig/keyboard</span><br><span class="line">cat /etc/sysconfig/keyboard | grep KEYTABLE | cut -f2 -d=</span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看 selinux 情况</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sestatus</span><br><span class="line">sestatus | cut -f2 -d:</span><br><span class="line">cat /etc/sysconfig/selinux</span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看 ip，mac 地址</p>
<p>在 ifcfg-eth0 文件里你可以看到 mac，网关等信息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ifconfig  cat /etc/sysconfig/network-scripts/ifcfg-eth0 | grep IPADDR  cat /etc/sysconfig/network-scripts/ifcfg-eth0 | grep IPADDR | cut -f2 -d=  ifconfig eth0 |grep <span class="string">"inet addr:"</span> |awk <span class="string">'&#123;print $2&#125;'</span>|cut -c 6-  ifconfig   | grep <span class="string">'inet addr:'</span>| grep -v <span class="string">'127.0.0.1'</span> | cut -d: -f2 | awk <span class="string">'&#123; print $1&#125;'</span></span><br></pre></td></tr></table></figure>

<p>查看网关</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /etc/sysconfig/network</span><br></pre></td></tr></table></figure>

<p>查看 dns</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /etc/resolv.conf</span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看默认语言</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$LANG</span> <span class="variable">$LANGUAGE</span></span><br><span class="line">cat /etc/sysconfig/i18n</span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看所属时区和是否使用 UTC 时间</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /etc/sysconfig/clock</span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看主机名</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hostname</span><br><span class="line">cat /etc/sysconfig/network</span><br></pre></td></tr></table></figure>

<p>修改主机名就是修改这个文件，同时最好也把 host 文件也修改。</p>
<p>使用 CentOS 常用命令查看开机运行时间</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">uptime</span><br><span class="line">09:44:45 up 67 days, 23:32, ...</span><br></pre></td></tr></table></figure>

<p>看来刚才确实是网段的问题，我的机器还是 67 天前开机的。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vmstat 1 -S m  procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------  r b   swpd   free   buff cache   si   so    bi    bo   <span class="keyword">in</span>   cs us sy id wa st  0 0      0    233    199    778    0    0     4    25    1    1 3 0 96 0 0  0 0      0    233    199    778    0    0     0     0 1029 856 13 1 86 0 0</span><br></pre></td></tr></table></figure>



<h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><blockquote>
<p>删除文件的 CentOS 常用命令 </p>
</blockquote>
<ol>
<li>删除当前目录的文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rm test.txt</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>强制删除当前目录的文件，不弹出提示</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rm -f test.txt</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>强制删除整个目录，包括目录与文件全部删除，需要管理员权限</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rm -r -f <span class="built_in">test</span></span><br></pre></td></tr></table></figure>



<h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h3><blockquote>
<p>删除文件夹的 CentOS 常用命令 </p>
</blockquote>
<ol>
<li>删除一个空目录</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rmdir emptydir</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>删除多级空目录</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rmdir -p emptydir/d1/d11</span><br></pre></td></tr></table></figure>



<h3 id="mount-umount"><a href="#mount-umount" class="headerlink" title="mount / umount"></a>mount / umount</h3><blockquote>
<p>挂载文件系统与卸载文件系统的 CentOS 常用命令</p>
</blockquote>
<ol>
<li>挂载光驱</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mount -t iso9660 /dev/cdrom /mnt/cdrom</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>挂载光驱，支持中文</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mount -t iso9660 -o codepage=936,iocharset=cp936 /dev/cdrom /mnt/cdrom</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>挂载 Windows 分区，FAT 文件系统</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mount -t vfat /dev/hda3 /mnt/cdrom</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>挂载 Windows 分区，NTFS 文件系统</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mount -t ntfs -o iocharset=cp936 /dev/hda7 /mnt/had7</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>挂载 ISO 文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mount -o loop /abc.iso /mnt/cdrom</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>挂载 软驱</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mount /dev/fd0 /mnt/floppy</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>挂载闪盘</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mount /dev/sda1 /mnt/cdrom</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>挂载 Windows 操作系统共享的文件夹</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mount <span class="literal">-t</span> smbfs <span class="literal">-o</span> username=guest,password=guest //machine/path /mnt/cdrom</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>显示挂载的文件系统</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount </span><br><span class="line">cat /etc/fstab   # 显示系统启动自动加载的文件系统 </span><br><span class="line">cat /etc/mtab   # 显示当前加载的文件系统</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>服务器</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Server-Sent Events / EventSource</title>
    <url>/2021/02/19/Server-Sent%20Events/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​    公司的 OA 项目中，往往需要接入很多业务系统，体现在 App UI 上就类似支付宝首页的九宫格。这些业务系统呢又不一定来自同一家厂商，当 App 需要和他们做一些交互的时候（例如获取每个业务的待办数目，展示在首页图标的角标上），手机端开发者就很头疼了。</p>
<p>​    就以待办数目为例，接口不统一、参数不统一、响应速度不统一、随时接入新的系统，交互过程如果写在 App 中，那就需要频繁的更新 App，这对用户来说，是非常不友好的。这个时候通常遵循的一个原则就是，将变化放在 OA-Server，OA-App 只需要与 OA-Server 约定好接口规范，只访问自己的后台即可，与各个业务的交互交给后台。那 OA-App 发送请求到  OA-Server，OA-Server 收到多个业务响应的待办数目以后怎么及时的通知 OA-App 呢？</p>
<a id="more"></a>

<p>​    提到服务端数据推送，可能一下子容易想到 WebSocket。WebSocket 是一种全新的协议，随着 HTML5 草案的不断完善，越来越多的现代浏览器开始全面支持 WebSocket 技术了，它将 TCP 的 Socket（套接字）应用在了web page 上，从而使通信双方建立起一个保持在活动状态连接通道。它是一种全双工通信，而我们前面提到的获取待办数目的场景，App 发送一次请求就可以，server 拿到各个业务的数据后再分别实时返回给 App ，更像是一种单向通信，使用 WebSocket 岂不是杀鸡用牛刀？那轮询呢？耗费 server 资源不说，不一定达到实时的效果。(PS：这里吐槽下客户，待办数有的 999 多，也不处理，居然只会嫌弃我们数据获取的不及时🤓)……</p>
<p>​    好巧不巧，看到了另一个轻量级的方案：Server-Sent Events。</p>
<h2 id="Server-Sent-Events"><a href="#Server-Sent-Events" class="headerlink" title="Server-Sent Events"></a>Server-Sent Events</h2><p>HTML5 中有一个轻量的替代 WebSocket的方案：Server-Sent Events，以下简称 SSE。</p>
<h3 id="SSE-本质"><a href="#SSE-本质" class="headerlink" title="SSE 本质"></a>SSE 本质</h3><p>​    严格地说，HTTP 协议无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息（streaming）。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。本质上，这种通信就是以流信息的方式，完成一次用时很长的下载。SSE 就是利用这种机制，使用流信息向浏览器推送信息。</p>
<h3 id="SSE-特点"><a href="#SSE-特点" class="headerlink" title="SSE 特点"></a>SSE 特点</h3><p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/25.jpg" alt></p>
<p>WebSocket 和 SSE 都是传统请求-响应 Web 架构的替代方案，但它们不是完全冲突的技术。</p>
<ul>
<li>SSE 使用 HTTP 协议，现有的服务器软件都支持。WebSocket 是一个独立协议。</li>
<li>SSE 属于轻量级，使用简单；WebSocket 协议相对复杂。</li>
<li>SSE 默认支持断线重连，WebSocket 需要自己实现。</li>
<li>SSE 一般只用来传送文本，二进制数据需要编码后传送，WebSocket 默认支持传送二进制数据。</li>
<li>SSE 支持自定义发送的消息类型。</li>
</ul>
<p>显然，我们上面提到的 待办数目 场景，很适合使用 SSE。</p>
<h2 id="EventSource"><a href="#EventSource" class="headerlink" title="EventSource"></a>EventSource</h2><p>EventSource 是 SSE 对应的客户端 API，大部分浏览器都是默认支持的。网上的很多资料也都是从浏览器的角度来讲的。那这里我们就从 HTTP 协议的角度讲一下交互过程吧。🙄，毕竟我不懂 web 前端。</p>
<blockquote>
<p>API 介绍：<a href="https://developer.mozilla.org/zh-CN/docs/Server-sent_events/EventSource" target="_blank" rel="noopener"><strong>EventSource</strong></a></p>
</blockquote>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul>
<li>首先 Client 发送一个普普通通的 GET 请求到 SSE-Server。</li>
<li>SSE-Server 无论需要返回几次数据，数据格式必须是 UTF-8 编码的文本，HTTP 头部信息需要类似如下设置：</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Type</span>: text/event-stream</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br></pre></td></tr></table></figure>

<p>上面三行之中，第一行的 <code>Content-Type</code> 必须指定 MIME 类型为 <code>event-steam</code> 。</p>
<ul>
<li>SSE-Server 每一次发送的信息，由若干个 <code>message</code>组成，每个 <code>message</code> 之间用 <code>\n\n</code> 分隔。每个 <code>message</code> 内部由若干行组成，每一行都是如下格式：</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">[field]: value\n</span><br></pre></td></tr></table></figure>

<p>上面的 <code>field</code> 可以取四个值：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">data</span><br><span class="line">event</span><br><span class="line">id</span><br><span class="line">retry</span><br></pre></td></tr></table></figure>

<p>此外，还可以有冒号开头的行，表示注释。通常，服务器每隔一段时间就会向浏览器发送一个注释，保持连接不中断。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">: This is a comment</span><br></pre></td></tr></table></figure>

<p>下面是一个例子。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">: this is a test stream\n\n</span><br><span class="line"></span><br><span class="line">data: some text\n\n</span><br><span class="line"></span><br><span class="line">data: another message\n</span><br><span class="line">data: with two lines \n\n</span><br></pre></td></tr></table></figure>

<ul>
<li>Client 拿到 message 以后自己解析。</li>
</ul>
<h4 id="message"><a href="#message" class="headerlink" title="message"></a>message</h4><p>前面提到的  <code>field</code>  有四个值，可以分别用作不同的用途。</p>
<h5 id="data-数据内容"><a href="#data-数据内容" class="headerlink" title="data 数据内容"></a>data 数据内容</h5><p>如果数据很长，可以分成多行，最后一行用 <code>\n\n</code> 结尾，前面行都用 <code>\n</code> 结尾。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">data:  message\n\n</span><br><span class="line"></span><br><span class="line">data: begin message\n</span><br><span class="line">data: continue message\n\n</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送json</span></span><br><span class="line">data: &#123;\n</span><br><span class="line">data: "foo": "bar",\n</span><br><span class="line">data: "baz", 555\n</span><br><span class="line">data: &#125;\n\n</span><br></pre></td></tr></table></figure>

<h5 id="id-数据标识"><a href="#id-数据标识" class="headerlink" title="id 数据标识"></a>id 数据标识</h5><p>相当于每条数据的编号。</p>
<p>浏览器用 <code>lastEventId</code> 属性读取这个值。一旦连接断线，浏览器会发送一个 HTTP 头，里面包含一个特殊的 <code>Last-Event-ID</code> 头信息，将这个值发送回去，用来帮助服务器端重建连接。因此，这个头信息可以被视为一种同步机制。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">id: msg1\n</span><br><span class="line">data: message\n\n</span><br></pre></td></tr></table></figure>

<h5 id="event-自定义的事件类型"><a href="#event-自定义的事件类型" class="headerlink" title="event 自定义的事件类型"></a>event 自定义的事件类型</h5><p>默认是<code>message</code>事件。浏览器可以用<code>addEventListener()</code>监听该事件。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">event: foo\n</span><br><span class="line">data: a foo event\n\n</span><br><span class="line"></span><br><span class="line">data: an unnamed event\n\n</span><br><span class="line"></span><br><span class="line">event: bar\n</span><br><span class="line">data: a bar event\n\n</span><br></pre></td></tr></table></figure>

<p>上面的代码创造了三条信息。第一条的名字是 <code>foo</code> ，触发浏览器的 <code>foo</code> 事件；第二条未取名，表示默认类型，触发浏览器的 <code>message</code> 事件；第三条是 <code>bar</code> ，触发浏览器的 <code>bar</code> 事件。</p>
<p>下面是另一个例子。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">event: userconnect</span><br><span class="line">data: &#123;"username": "bobby", "time": "02:33:48"&#125;</span><br><span class="line"></span><br><span class="line">event: usermessage</span><br><span class="line">data: &#123;"username": "bobby", "time": "02:34:11", "text": "Hi everyone."&#125;</span><br><span class="line"></span><br><span class="line">event: userdisconnect</span><br><span class="line">data: &#123;"username": "bobby", "time": "02:34:23"&#125;</span><br><span class="line"></span><br><span class="line">event: usermessage</span><br><span class="line">data: &#123;"username": "sean", "time": "02:34:36", "text": "Bye, bobby."&#125;</span><br></pre></td></tr></table></figure>

<h5 id="retry-重连间隔"><a href="#retry-重连间隔" class="headerlink" title="retry 重连间隔"></a>retry 重连间隔</h5><p>服务器可以用 <code>retry</code> 字段，指定浏览器重新发起连接的时间间隔。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">retry: 10000\n</span><br></pre></td></tr></table></figure>

<p>两种情况会导致浏览器重新发起连接：一种是时间间隔到期，二是由于网络错误等原因，导致连接出错。</p>
<h2 id="iOS-实现"><a href="#iOS-实现" class="headerlink" title="iOS 实现"></a>iOS 实现</h2><p>从上面的内容我们可以知道，既然 EventSource 客户端与 server 建立连接是基于标准的 HTTP 协议，那我们想要实现一套自己的 EventSource API ，只需要按规则解析 message 即可。</p>
<p>大致的思路：</p>
<ul>
<li>使用 <code>NSURLSession</code> 来发起请求以及处理服务器的响应。</li>
<li>在 <code>NSURLSession</code>  的代理方法中解析得到的文本信息，使用自定义的 <code>Event</code> 对象接收。</li>
<li>通过回调将 <code>Event</code> 传递给调用者。</li>
</ul>
<p>代码是在下面这份上做的改动，添加了一些线程安全的处理，以及 session 的释放，不然会造成内存泄漏。</p>
<blockquote>
<p>引用的OC代码 <a href="https://github.com/neilco/EventSource" target="_blank" rel="noopener">Github</a></p>
</blockquote>
<p>改动后的源码：<a href="https://github.com/ATommyGirl/YYEventSource" target="_blank" rel="noopener">ATommyGirl/YYEventSource</a></p>
<h3 id="模拟测试"><a href="#模拟测试" class="headerlink" title="模拟测试"></a>模拟测试</h3><p>启动服务</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node sse-server.js</span><br></pre></td></tr></table></figure>

<p>会在本机 <code>http://127.0.0.1:8844/stream</code> 启动一个 SSE 服务。</p>
<p>使用浏览器或者 OC 代码访问这个地址就会看到信息输出了。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"EventSource.h"</span></span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *url = <span class="string">@"http://127.0.0.1:8844/stream"</span>;</span><br><span class="line">EventSource *eventSource = [EventSource eventSourceWithURL:[<span class="built_in">NSURL</span> URLWithString:url]];</span><br><span class="line"></span><br><span class="line">[eventSource onMessage:^(Event *e) &#123;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, e);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">[eventSource onError:^(Event *event) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"error:%@"</span>, event.error);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><p><a href="https://www.ruanyifeng.com/blog/2017/05/server-sent_events.html" target="_blank" rel="noopener">阮一峰</a></p>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS编码规范总结</title>
    <url>/2017/01/04/iOS%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="一、空格"><a href="#一、空格" class="headerlink" title="一、空格"></a>一、空格</h2><h4 id="在适当的地方、适当地加空格、可以适当地提高代码可读性"><a href="#在适当的地方、适当地加空格、可以适当地提高代码可读性" class="headerlink" title="在适当的地方、适当地加空格、可以适当地提高代码可读性"></a>在适当的地方、适当地加空格、可以适当地提高代码可读性</h4><p>你一定读过”紧凑型”的代码，一个字符挨着一个字符，如果不是会报错，可能类名和变量名之间都没有空格了。我之前认为吝啬空格的人是不是都生活的很纠结或者很没条理，明明可以豁达一些。但现在他们改变了我，”谁又能知道呢，毕竟人不能从表象就能分析透彻，也许他只是单纯的    懒   。。。。。。“</p>
<a id="more"></a>

<p>为了避免博客风格影响视觉，直接上图片吧。其实我不知道是不是有这样明确的编码规范，我只是看苹果的怎么写，我就怎么写，下面也只是举一些简单的例子。</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/22.png" alt></p>
<h2 id="二、计时器"><a href="#二、计时器" class="headerlink" title="二、计时器"></a>二、计时器</h2><h4 id="NSTimer-替换为dispatch-source-timer"><a href="#NSTimer-替换为dispatch-source-timer" class="headerlink" title="NSTimer 替换为dispatch source timer"></a>NSTimer 替换为dispatch source timer</h4><p>NSTimer 在主线程的 Runloop 里会在 Runloop 切换其它模式时停止，这时就需要手动在子线程开启一个模式为 NSRunLoopCommonModes 的 Runloop，并且释放不到位，会导致引用 Timer 的对象也得不到释放。 如果不想开启一个新的 Runloop，并且避免引用问题，可以用不跟 Runloop 关联的 dispatch source timer。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)createTimer &#123;</span><br><span class="line">    __block <span class="keyword">int</span> timeout = <span class="number">60</span>;</span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> global = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line">    dispatch_source_t timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, <span class="number">0</span>, <span class="number">0</span>, global);</span><br><span class="line">    </span><br><span class="line">    dispatch_source_set_timer(timer, DISPATCH_TIME_NOW, <span class="number">1.0</span> * <span class="built_in">NSEC_PER_SEC</span>, <span class="number">0</span> * <span class="built_in">NSEC_PER_SEC</span>);</span><br><span class="line">    dispatch_source_set_event_handler(timer, ^&#123;</span><br><span class="line">        timeout --;</span><br><span class="line">        <span class="keyword">if</span> (timeout &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            dispatch_source_cancel(timer);</span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                <span class="comment">//do something after timer done.</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_resume(timer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更多关于GCD的用法，请见我的另一个总结<a href="https://ATommyGirl.github.io/2016/01/13/GCD%EF%BC%88Grand%20Central%20Dispatch%EF%BC%89/" target="_blank" rel="noopener">GCD (Grand Central Dispatch)</a> 。</p>
<h2 id="三、URL字符串解析"><a href="#三、URL字符串解析" class="headerlink" title="三、URL字符串解析"></a>三、URL字符串解析</h2><h4 id="分析URL字符串的时候，使用-NSURLComponents-类做解析，不要通过字符串截取等方式"><a href="#分析URL字符串的时候，使用-NSURLComponents-类做解析，不要通过字符串截取等方式" class="headerlink" title="分析URL字符串的时候，使用 NSURLComponents 类做解析，不要通过字符串截取等方式"></a>分析URL字符串的时候，使用 NSURLComponents 类做解析，不要通过字符串截取等方式</h4><p>我看很多人的代码，在解析别人传给他的URL 字符串时（例如自己的APP被拉起时），都是使用 <code>NSString</code> 的各种截取方法，然后再自己做判断，这是有点”危险”的做法。如果你自信逻辑严谨的话，那没的说，如果你不擅长或者懒得做异常处理， <code>NSRange</code>  的 <code>location</code> 存不存在以及 <code>length</code> 越界问题，就可以把程序搞crash。所以建议不要这样做，使用 <code>NSURLComponents</code> 。文档<a href="https://developer.apple.com/documentation/foundation/nsurlcomponents" target="_blank" rel="noopener">NSURLComponents</a></p>
<p>看完文档就会知道，真的好方便。。。</p>
<ul>
<li>初始化就不多说了，看自己需要</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Initialize a NSURLComponents with all components undefined. Designated initializer.</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)init;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)initWithURL:(<span class="built_in">NSURL</span> *)url resolvingAgainstBaseURL:(<span class="built_in">BOOL</span>)resolve;</span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)componentsWithURL:(<span class="built_in">NSURL</span> *)url resolvingAgainstBaseURL:(<span class="built_in">BOOL</span>)resolve;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)initWithString:(<span class="built_in">NSString</span> *)URLString;</span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)componentsWithString:(<span class="built_in">NSString</span> *)URLString;</span><br></pre></td></tr></table></figure>

<ul>
<li>获取URL里的内容，简直不要太方便哦，URLEncode之后的参数都准备好了</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *scheme; <span class="comment">// Attempting to set the scheme with an invalid scheme string will cause an exception.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *user;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *password;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *host;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSNumber</span> *port; <span class="comment">// Attempting to set a negative port number will cause an exception.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *path;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *query;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *fragment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *percentEncodedUser;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *percentEncodedPassword;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *percentEncodedHost;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *percentEncodedPath;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *percentEncodedQuery;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *percentEncodedFragment;</span><br><span class="line"></span><br><span class="line"><span class="comment">//begin ios 9.0</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfScheme;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfUser;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfPassword;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfHost;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfPort;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfPath;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfQuery;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfFragment;</span><br></pre></td></tr></table></figure>

<p>当然关于 NSRange 的获取，是从ios 9.0 开始有的，适配低版本的话，需要注意一哈。</p>
<ul>
<li>参数的集合，<code>NSURLQueryItem</code> 类呢就是通过 key 、value 来取参数们了</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// API_AVAILABLE(macos(10.10), ios(8.0), watchos(2.0), tvos(9.0))</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSURLQueryItem</span> *&gt; *queryItems;</span><br><span class="line"><span class="comment">// API_AVAILABLE(macosx(10.13), ios(11.0), watchos(4.0), tvos(11.0))</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSURLQueryItem</span> *&gt; *percentEncodedQueryItems;</span><br></pre></td></tr></table></figure>

<p>我之前不是特别理解，参数要用数组＋Item的方式，直到遇到了那位给我传的URL里，有两个同名参数不同值的仁兄，我才更加体会到了苹果开发者的严谨。。。</p>
<h2 id="四、-枚举"><a href="#四、-枚举" class="headerlink" title="四、 枚举"></a>四、 枚举</h2><p>举一个简单的场景：聊天软件，会区分 单聊、群聊、聊天室、服务号等等等等 不同类型的会话，开发时在做页面间传值的时候，往往需要把类型传递下去来做不同的事情，怎么明确的传呢？如果这个项目是多人负责，每个人负责不同的模块，像下面这样写代码，时间久了谁也看不懂：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//0单聊,1群聊</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>)<span class="built_in">NSInteger</span> type;</span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">vc.type = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>不要笑，你肯定也写过这样的代码，模块多了、时间久了，type  是什么意思？Who JB Know 啊。</p>
<p><strong>枚举就在这个时候发挥作用了：增加代码可读性。</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, ConversationType) &#123;</span><br><span class="line">    <span class="comment">//单聊</span></span><br><span class="line">    ConversationTypePRIVATE = <span class="number">1</span>,</span><br><span class="line">    <span class="comment">//群组</span></span><br><span class="line">    ConversationTypeGROUP = <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//聊天室</span></span><br><span class="line">    ConversationTypeCHATROOM = <span class="number">3</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这样一来比起单薄的数字，是不是更见名知意了呢？而且 OC 中枚举定义值的时候，都是 枚举名 + 具体分类，例如我们写的这个枚举中单聊的定义就是  <code>ConversationType</code> + <code>PRIVATE</code> = <code>ConversationTypePRIVATE</code>。敲出来的时候好敲，哈哈。</p>
<p>有的同学可能会问了，应对类型是整型的 type 这个枚举是够用了，那用字符串来分类的呢？没错，这是个问题，尤其是和服务端对接久了，你会发现，他们使用 字符串 多过 数值类型。不急，我们来小探一下 OC 中枚举都怎么用的：</p>
<h4 id="普通枚举"><a href="#普通枚举" class="headerlink" title="普通枚举"></a>普通枚举</h4><h5 id="1、C-语言的枚举写法-enum"><a href="#1、C-语言的枚举写法-enum" class="headerlink" title="1、C 语言的枚举写法 enum"></a>1、C 语言的枚举写法 enum</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span>&#123;</span><br><span class="line">    ConversationTypePRIVATE = <span class="number">1</span>,</span><br><span class="line">    ConversationTypeGROUP = <span class="number">2</span>,</span><br><span class="line">    ConversationTypeCHATROOM = <span class="number">3</span>,</span><br><span class="line">&#125; ConversationType;</span><br></pre></td></tr></table></figure>

<h5 id="2、OC-整型枚举"><a href="#2、OC-整型枚举" class="headerlink" title="2、OC 整型枚举"></a>2、OC 整型枚举</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, ConversationType) &#123;</span><br><span class="line">    <span class="comment">//单聊</span></span><br><span class="line">    ConversationTypePRIVATE = <span class="number">1</span>,</span><br><span class="line">    <span class="comment">//群组</span></span><br><span class="line">    ConversationTypeGROUP = <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//聊天室</span></span><br><span class="line">    ConversationTypeCHATROOM = <span class="number">3</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="3、字符串枚举实现方案"><a href="#3、字符串枚举实现方案" class="headerlink" title="3、字符串枚举实现方案"></a>3、字符串枚举实现方案</h5><h6 id="1、基于普通枚举，C-语言实现"><a href="#1、基于普通枚举，C-语言实现" class="headerlink" title="1、基于普通枚举，C 语言实现"></a>1、基于普通枚举，C 语言实现</h6><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先定义一个普通的整型枚举</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, ConversationType) &#123;</span><br><span class="line">    <span class="comment">//单聊</span></span><br><span class="line">    ConversationTypePRIVATE = <span class="number">1</span>,</span><br><span class="line">    <span class="comment">//群组</span></span><br><span class="line">    ConversationTypeGROUP = <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//聊天室</span></span><br><span class="line">    ConversationTypeCHATROOM = <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现一个方法，实现里做 整型 和 字符串 的匹配</span></span><br><span class="line"><span class="built_in">NSString</span> *ConversationTypeString(ConversationType status) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">        <span class="keyword">case</span> ConversationTypePRIVATE:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@"private"</span>;</span><br><span class="line">        <span class="keyword">case</span> ConversationTypeGROUP:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@"group"</span>;</span><br><span class="line">        <span class="keyword">case</span> ConversationTypeCHATROOM:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@"chatroom"</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者使用 一个 NSString * 类型的数组</span></span><br><span class="line"><span class="built_in">NSString</span> *ConversationTypeStringMap[] = &#123;</span><br><span class="line">    [ConversationTypePRIVATE] = <span class="string">@"private"</span>,</span><br><span class="line">    [ConversationTypeGROUP] = <span class="string">@"group"</span>,</span><br><span class="line">    [ConversationTypeCHATROOM] = <span class="string">@"chatroom"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>但这两种方式有一个弊端，就是不能像枚举类型一样直接作为一个类型 限定传参的类型。</strong></p>
<h6 id="2、宏定义"><a href="#2、宏定义" class="headerlink" title="2、宏定义"></a>2、宏定义</h6><p>初期我使用宏定义比较多，每个类型值定义一个宏。。。这里不举例了。。。</p>
<h6 id="3、苹果官方的做法"><a href="#3、苹果官方的做法" class="headerlink" title="3、苹果官方的做法"></a>3、苹果官方的做法</h6><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.h 中 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NSString</span> *ConversationTypeKey <span class="built_in">NS_STRING_ENUM</span>;</span><br><span class="line"></span><br><span class="line">FOUNDATION_EXPORT ConversationTypeKey <span class="keyword">const</span> ConversationTypeKeyPRIVATE;</span><br><span class="line">FOUNDATION_EXPORT ConversationTypeKey <span class="keyword">const</span> ConversationTypeKeyGROUP;</span><br><span class="line">FOUNDATION_EXPORT ConversationTypeKey <span class="keyword">const</span> ConversationTypeKeyCHATROOM;</span><br><span class="line"></span><br><span class="line"><span class="comment">//.m 中 </span></span><br><span class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> ConversationTypeKeyPRIVATE = <span class="string">@"private"</span>;</span><br><span class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> ConversationTypeKeyGROUP = <span class="string">@"group"</span>;</span><br><span class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> ConversationTypeKeyCHATROOM = <span class="string">@"chatroom"</span>;</span><br></pre></td></tr></table></figure>

<p><strong>相比会产生过多二进制文件的宏定义方式, 建议用FOUNDATION_EXPORT</strong></p>
<h4 id="位移枚举"><a href="#位移枚举" class="headerlink" title="位移枚举"></a>位移枚举</h4><p>==</p>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS suggestedFilename 中文文件名乱码问题</title>
    <url>/2021/07/14/suggestedFilename%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<p>日常吐槽：</p>
<blockquote>
<p>App 中有个下载附件的功能，预览附件的时候会显示文件名字。但有个人艾特我说，安卓的没问题，IOS 的不行，文件名显示乱码，就问你尴不尴尬？……</p>
<p>通常有人提 Bug 咱都虚心接受，但只要说了 安卓没问题 ，血压立马上升一格。有事儿说事儿，别提安卓……</p>
<p>看到写  <code>IOS</code>  而不是 <code>iOS</code> 的人，血压又上升一格……</p>
<p>想起来苹果开发最火的那几年，我接到过一个 HR 的电话，”请问您是做 ISO 开发的吗？” ，我当时心想这个公司不能去呀，HR 都这么不严谨，给我干 HR 好不好，拿来吧你……</p>
</blockquote>
<h2 id="suggestedFilename"><a href="#suggestedFilename" class="headerlink" title="suggestedFilename"></a>suggestedFilename</h2><a id="more"></a>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *filename = task.response.suggestedFilename;</span><br></pre></td></tr></table></figure>

<p>说回正题，下载附件的代码中我们是通过 <a href="https://tommygirl.cn/2018/04/20/NSURLResponse/">NSURLResponse</a> 的 <code>suggestedFilename</code> 获取服务端建议的一个文件名，但是得到的却是类似这样的乱码  <code>é��åº�å¸�å·¥ä¼¤æ�¥é��ä½�é�¢ä¼�é£�è¡¥å�©è´¹ã��äº¤é��é£�å®¿è´¹å®¡æ ¸ç»�ç®�è¡¨.xls</code> ，满脸问号是不是？？？？？？</p>
<p>我们知道 <code>suggestedFilename</code> 来自 HTTP 响应的头部信息，只是苹果默认帮我们解析成了一个 <code>NSURLResponse</code> 对象， 乱码问题往往是字符的编码格式没有对应上，或者苹果并不知道应该按照哪个编码规则解析，把问题抛给了开发者自己处理。</p>
<p>那奇怪的是，有的附件正常，有的附件就凌乱了。自然我们就想到比对一下两者 Header 的区别，是骡子是马拉出来溜溜~~</p>
<p>下面是截取的几个与 Content 有关的信息：</p>
<ul>
<li>附件示例：测试素材 - 副本.docx 。文件名显示乱码。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">NSHTTPURLResponse</span>: <span class="number">0x600003a44fa0</span>&gt; &#123; URL: https:<span class="comment">//wwww.www.www &#125; &#123; Status Code: 201, Headers &#123;</span></span><br><span class="line">    <span class="string">"Access-Control-Allow-Methods"</span> =     (</span><br><span class="line">        <span class="string">"POST,GET,PUT"</span></span><br><span class="line">    );</span><br><span class="line">    <span class="string">"Content-Disposition"</span> =     (</span><br><span class="line">        <span class="string">"form-data; name=\"attachment\"; filename=\"\U00e6\U00b5\U008b\U00e8\U00af\U0095\U00e7\U00b4\U00a0\U00e6\U009d\U0090 - \U00e5\U0089\U00af\U00e6\U009c\U00ac.docx\""</span></span><br><span class="line">    );</span><br><span class="line">    <span class="string">"Content-Length"</span> =     (</span><br><span class="line">        <span class="number">19498</span></span><br><span class="line">    );</span><br><span class="line">    <span class="string">"Content-Type"</span> =     (</span><br><span class="line">        <span class="string">"application/octet-stream;charset=UTF-8"</span></span><br><span class="line">    );</span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>附件示例：上海隐私条款.docx。文件名显示正常。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">NSHTTPURLResponse</span>: <span class="number">0x600003d919a0</span>&gt; &#123; URL: https:<span class="comment">//wwww.www.www &#125; &#123; Status Code: 200, Headers &#123;</span></span><br><span class="line">    <span class="string">"Access-Control-Allow-Methods"</span> =     (</span><br><span class="line">        <span class="string">"GET, POST, OPTIONS, PUT, DELETE, HEAD, TRACE"</span></span><br><span class="line">    );</span><br><span class="line">    <span class="string">"Content-Disposition"</span> =     (</span><br><span class="line">        <span class="string">"inline; filename*=UTF-8''%E4%B8%8A%E7%A0%94%E7%A7%BB%E5%8A%A8%E9%9A%90%E7%A7%81%E6%9D%A1%E6%AC%BE.docx"</span></span><br><span class="line">    );</span><br><span class="line">    <span class="string">"Content-Encoding"</span> =     (</span><br><span class="line">        gzip</span><br><span class="line">    );</span><br><span class="line">    <span class="string">"Content-Type"</span> =     (</span><br><span class="line">        <span class="string">"application/vnd.openxmlformats-officedocument.wordprocessingml.document"</span></span><br><span class="line">    );</span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure>



<p><code>Content-Disposition</code> 和 <code>Content-Type</code>  有点区别。之前我总是误以为 <code>Content-Type</code> 中的 <code>charset=UTF-8</code> 除了指定文件的编码格式，文件名也是由这个指定的。大错特错了~~</p>
<p>第一次关注 <code>Content-Disposition</code> 。所以它到底是何方神圣呢？</p>
<h2 id="Content-Disposition"><a href="#Content-Disposition" class="headerlink" title="Content-Disposition"></a>Content-Disposition</h2><blockquote>
<p>在常规的 HTTP 应答中，<code>Content-Disposition</code>  属于响应头的一个属性，用于指示服务器响应给我们的内容容该以何种形式展示，是以内联的形式（即网页或者页面的一部分），还是以附件的形式下载并保存到本地。</p>
</blockquote>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="作为主体的响应标题"><a href="#作为主体的响应标题" class="headerlink" title="作为主体的响应标题"></a>作为主体的响应标题</h4><p>HTTP 上下文中的第一个参数是 <code>inline</code>（默认值，表示它可以显示在网页内，或作为网页）或 <code>attachment</code>（表示它应该下载；大多数浏览器呈现“另存为”对话框，预先填入<code>filename</code>，如果参数的值存在的话。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Content-Disposition: inline</span><br><span class="line">Content-Disposition: attachment</span><br><span class="line">Content-Disposition: attachment; filename=<span class="string">"filename.jpg"</span></span><br></pre></td></tr></table></figure>

<h4 id="作为多部分主体的-header"><a href="#作为多部分主体的-header" class="headerlink" title="作为多部分主体的 header"></a>作为多部分主体的 header</h4><p>HTTP 上下文中的第一个参数总是<code>form-data</code>; 其他参数不区分大小写，并且有参数，在<code>&#39;=&#39;</code>符号后面使用带引号的字符串语法。多个参数用分号（<code>&#39;;&#39;</code>）分隔。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Content-Disposition: form-data</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">"fieldName"</span></span><br><span class="line">Content-Disposition: form-data; name=<span class="string">"fieldName"</span>; filename=<span class="string">"filename.jpg"</span></span><br></pre></td></tr></table></figure>



<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul>
<li><p><code>name</code></p>
<p>后面是一个表单字段名的字符串，每一个字段名会对应一个子部分。在同一个字段名对应多个文件的情况下（例如，带有 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-multiple" target="_blank" rel="noopener"><code>multiple</code></a> 属性的 <code>&lt;input type=file&gt;</code> 元素），则多个子部分共用同一个字段名。如果 name 参数的值为 <code>&#39;_charset_&#39;</code> ，意味着这个子部分表示的不是一个 HTML 字段，而是在未明确指定字符集信息的情况下各部分使用的默认字符集。</p>
</li>
<li><p><code>filename</code></p>
<p>后面是要传送的文件的初始名称的字符串。<strong>这个参数总是可选的，而且不能盲目使用</strong>：路径信息必须舍掉，同时要进行一定的转换以符合服务器文件系统规则。这个参数主要用来提供展示性信息。当与 <code>Content-Disposition: attachment</code> 一同使用的时候，它被用作”保存为”对话框中呈现给用户的默认文件名。</p>
</li>
<li><p><code>filename *</code></p>
<p><code>filename</code> 和 <code>filename *</code> 两个参数的唯一区别在于，<code>filename *</code> 采用了<a href="https://tools.ietf.org/html/rfc5987" target="_blank" rel="noopener">RFC 5987</a> 中规定的编码方式。<code>filename</code> 和 <code>filename *</code> 同时出现的时候，应该优先采用  <code>filename *</code> ，假如二者都支持的话。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">filename*=UTF<span class="number">-8</span><span class="string">''</span>testfile.docx</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>PS: <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Disposition" target="_blank" rel="noopener">参考资料</a></p>
<h2 id="回归到问题"><a href="#回归到问题" class="headerlink" title="回归到问题"></a>回归到问题</h2><p>回归到我们前面的问题，一个指定的 <code>filename</code> ，一个指定的  <code>filename *</code> ，有问题吗？没有问题。前面说了，都是标准的。只不过后者告诉了我们文件名使用的编码，而且还是普遍的系统和浏览器都支持的 UTF-8。前者既没有指定编码，也不是 UTF-8。我们能骂后台吗？不能，但我还是在心里骂了一句。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//乱码</span></span><br><span class="line"><span class="string">"Content-Disposition"</span> =     (</span><br><span class="line">        <span class="string">"form-data; name=\"attachment\"; filename=\"\U00e6\U00b5\U008b\U00e8\U00af\U0095\U00e7\U00b4\U00a0\U00e6\U009d\U0090 - \U00e5\U0089\U00af\U00e6\U009c\U00ac.docx\""</span></span><br><span class="line">    );</span><br><span class="line"><span class="comment">//正常</span></span><br><span class="line"><span class="string">"Content-Disposition"</span> =     (</span><br><span class="line">        <span class="string">"inline; filename*=UTF-8''%E4%B8%8A%E7%A0%94%E7%A7%BB%E5%8A%A8%E9%9A%90%E7%A7%81%E6%9D%A1%E6%AC%BE.docx"</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure>



<p>与上面两种形式对应，解决办法也有两种：</p>
<ol>
<li>服务端把 <code>Content-Disposition</code> 中的文件名编码加上。</li>
<li>iOS 自己单独解析一下 <code>suggestedFilename</code> 。</li>
</ol>
<p>我运气好，对接的业务方在服务端改了，态度还不错。那如果对方因客观原因改不了怎么办呢？采用方法2，但这个时候问题又来了，我们怎么知道用哪种编码来解析呢？</p>
<p>说到编码，日常我也只是用 <code>NSUTF8StringEncoding</code> 比较多。UTF-8 有点类似于 Haffman 编码，它将 Unicode 编码为 00000000-0000007F 的字符，用单个字节来表示；00000080-000007FF 的字符用两个字节表示；00000800-0000FFFF 的字符用3字节表示。因为目前为止 Unicode-16 规范没有指定 FFFF 以上的字符，所以 UTF-8 最多是使用3个字节来表示一个字符。但理论上来说，UTF-8 最多需要用6字节表示一个字符？ 🤓</p>
<h2 id="NSStringEncoding"><a href="#NSStringEncoding" class="headerlink" title="NSStringEncoding"></a>NSStringEncoding</h2><blockquote>
<p>一组常量，NSString 可能用到的字符串编码。</p>
</blockquote>
<h3 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h3><table>
<thead>
<tr>
<th>NSStringEncoding</th>
<th>Notes</th>
</tr>
</thead>
<tbody><tr>
<td>NSASCIIStringEncoding</td>
<td>8 位字符内的严格 7 位 ASCII 编码；仅 ASCII 值 0…127。</td>
</tr>
<tr>
<td>NSNEXTSTEPStringEncoding</td>
<td>带有 NEXTSTEP 扩展的 8 位 ASCII 编码。</td>
</tr>
<tr>
<td>NSJapaneseEUCStringEncoding</td>
<td>日语文本的 8 位 EUC 编码。</td>
</tr>
<tr>
<td>NSUTF8StringEncoding</td>
<td>Unicode 字符的 8 位表示，适合由基于 ASCII 的系统传输或存储。</td>
</tr>
<tr>
<td>NSISOLatin1StringEncoding</td>
<td>8 位 ISO Latin 1 编码。又叫 ISO-8859-1 编码。</td>
</tr>
<tr>
<td>NSSymbolStringEncoding</td>
<td>8 位 Adobe 符号编码向量。</td>
</tr>
<tr>
<td>NSNonLossyASCIIStringEncoding</td>
<td>7 位详细 ASCII 表示所有 Unicode 字符。？？</td>
</tr>
<tr>
<td>NSShiftJISStringEncoding</td>
<td>日语文本的 8 位 Shift-JIS 编码。</td>
</tr>
<tr>
<td>NSISOLatin2StringEncoding</td>
<td>8 位 ISO Latin 2 编码。又叫 ISO-8859-2 编码。</td>
</tr>
<tr>
<td>NSUnicodeStringEncoding</td>
<td>字符串对象的规范 Unicode 编码。是一种２字节编码，能够提供65536个字符，如”A”的Unicode编码为6500，而BigEndianUnicode编码为0065</td>
</tr>
<tr>
<td>NSWindowsCP1251StringEncoding</td>
<td>Microsoft Windows 代码页 1251，编码 Cyrillic 字符；相当于 AdobeStandardCyrillic 字体编码。</td>
</tr>
<tr>
<td>NSWindowsCP1252StringEncoding</td>
<td>Microsoft Windows 代码页 1252；相当于 WinLatin1。</td>
</tr>
<tr>
<td>NSWindowsCP1253StringEncoding</td>
<td>Microsoft Windows 代码页 1253，编码希腊字符。</td>
</tr>
<tr>
<td>NSWindowsCP1254StringEncoding</td>
<td>Microsoft Windows 代码页 1254，编码土耳其语字符。</td>
</tr>
<tr>
<td>NSWindowsCP1250StringEncoding</td>
<td>Microsoft Windows 代码页 1250；相当于 WinLatin2。</td>
</tr>
<tr>
<td>NSISO2022JPStringEncoding</td>
<td>电子邮件的 ISO 2022 日语编码。GB 2312 遵从于 ISO 2022。</td>
</tr>
<tr>
<td>NSMacOSRomanStringEncoding</td>
<td>经典的 Macintosh 罗马编码。主要用于编码 <a href="https://zh.wikipedia.org/wiki/Classic_Mac_OS" target="_blank" rel="noopener">Classic Mac OS</a> 上的文字。</td>
</tr>
<tr>
<td>NSUTF16StringEncoding</td>
<td>16 位 UTF 编码。同 NSUnicodeStringEncoding。</td>
</tr>
<tr>
<td>NSUTF16BigEndianStringEncoding</td>
<td>指定字节序的 UTF-16 编码。字节序为大尾，也叫大端。</td>
</tr>
<tr>
<td>NSUTF16LittleEndianStringEncoding</td>
<td>指定字节序的 UTF-16 编码。字节序为小尾，也叫小端。</td>
</tr>
<tr>
<td>NSUTF32StringEncoding</td>
<td>32 位 UTF 编码。</td>
</tr>
<tr>
<td>NSUTF32BigEndianStringEncoding</td>
<td>指定字节序的 UTF-32 编码。字节序为大尾，也叫大端。</td>
</tr>
<tr>
<td>NSUTF32LittleEndianStringEncoding</td>
<td>指定字节序的 UTF-32 编码。字节序为小尾，也叫小端。</td>
</tr>
</tbody></table>
<h3 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h3><blockquote>
<p>对于整型、长整型等数据类型，Big-endian 认为第一个字节是最高位字节，即按照从低地址到高地址的顺序存放数据的高位字节到低位字节，称为大端、大尾；而 Little-endian 则相反，它认为第一个字节是最低位字节，按照从低地址到高地址的顺序存放据的低位字节到高位字节，称为小端、小尾。</p>
</blockquote>
<p>例如，假设从内存地址 0x0000 开始有以下数据： </p>
<table>
<thead>
<tr>
<th align="center">0x0000</th>
<th align="center">0x0001</th>
<th align="center">0x0002</th>
<th align="center">0x0003</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0x12</td>
<td align="center">0x34</td>
<td align="center">0xab</td>
<td align="center">0xcd</td>
</tr>
</tbody></table>
<p>如果我们去读取一个地址为 0x0000 的四个字节变量，若字节序为 Big-endian，则读出结果为 0x1234abcd；若字节序为 Little-endian，则读出结果为 0xcdab3412。</p>
<p>如果我们将 0x1234abcd 写入到以 0x0000 开始的内存中，则 Little-endian 和 Big-endian 模式的存放结果如下： </p>
<table>
<thead>
<tr>
<th>地址</th>
<th align="center">0x0000</th>
<th align="center">0x0001</th>
<th align="center">0x0002</th>
<th align="center">0x0003</th>
</tr>
</thead>
<tbody><tr>
<td>Big-endian</td>
<td align="center">0x12</td>
<td align="center">0x34</td>
<td align="center">0xab</td>
<td align="center">0xcd</td>
</tr>
<tr>
<td>Little-endian</td>
<td align="center">0xcd</td>
<td align="center">0xab</td>
<td align="center">0x34</td>
<td align="center">0x12</td>
</tr>
</tbody></table>
<h4 id="端-endian-的起源"><a href="#端-endian-的起源" class="headerlink" title="端 (endian) 的起源"></a>端 (endian) 的起源</h4><p>“<strong>endian</strong>”一词来源于十八世纪爱尔兰作家乔纳森·斯威夫特的小说《格列佛游记》。小说中，小人国为水煮蛋该从大的一端（Big-End）剥开还是小的一端（Little-End）剥开而争论，争论的双方分别被称为“大端派”和“小端派”。以下是1726年关于大小端之争历史的描述：</p>
<blockquote>
<p>我下面要告诉你的是，Lilliput和Blefuscu这两大强国在过去36个月里一直在苦战。战争开始是由于以下的原因：我们大家都认为，吃鸡蛋前，原始的方法是打破鸡蛋较大的一端，可是当今皇帝的祖父小时候吃鸡蛋，一次按古法打鸡蛋时碰巧将一个手指弄破了。因此他的父亲，当时的皇帝，就下了一道敕令，命令全体臣民吃鸡蛋时打破鸡蛋较小的一端，违令者重罚。老百姓们对这项命令极其反感。历史告诉我们，由此曾经发生过6次叛乱，其中一个皇帝送了命，另一个丢了王位。这些叛乱大多都是由Blefuscu的国王大臣们煽动起来的。叛乱平息后，流亡的人总是逃到那个帝国去寻求避难。据估计，先后几次有11000人情愿受死也不肯去打破鸡蛋较小的一端。关于这一争端，曾出版过几百本大部著作，不过大端派的书一直是受禁的，法律也规定该派任何人不得做官。”</p>
</blockquote>
<p>觉得这个鸡蛋的故事很有意思，所以粘在这里了 😂。关于字节序的更多内容见 <a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E5%BA%8F" target="_blank" rel="noopener">维基百科-字节序</a> ，很详细了。</p>
<h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><p>关于字符集有些我也看不懂，百科上倒是解释的比较清楚。还有很多字符编码集：</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/38.png" alt></p>
<h2 id="撞大运"><a href="#撞大运" class="headerlink" title="撞大运"></a>撞大运</h2><p>这么多种编码，iOS 解析的话，我们用哪一种呢？如果对接的业务少，可以和服务端约定好。如果对接的业务多，想兼容所有的”乱码”，我觉得只能撞大运了😂</p>
<p>示例：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *fileName, *str;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *byte = <span class="literal">NULL</span>;</span><br><span class="line">fileName = [task.response suggestedFilename];</span><br><span class="line">byte = [fileName cStringUsingEncoding:<span class="built_in">NSISOLatin1StringEncoding</span>];</span><br><span class="line">str = [[<span class="built_in">NSString</span> alloc] initWithCString:byte encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br></pre></td></tr></table></figure>

<p>在上面的示例中，如果指定的 <code>NSStringEncoding</code> 不匹配，str 会是 nil，所以我们可以利用 nil 来撞大运了，有毛病吗？可能有，哈哈 😂 </p>
]]></content>
      <tags>
        <tag>iOS, 网络</tag>
      </tags>
  </entry>
  <entry>
    <title>mailcore 2  iOS  之一 IMAP</title>
    <url>/2018/02/02/mailcore2-iOS%E4%B9%8B%E4%B8%80IMAP/</url>
    <content><![CDATA[<p>公司开发oa中的邮箱，资源限制，最后iOS开发采用的mailcore2-ios框架。研究的不深，只当做个分享，口条不好，凑合看吧。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我直接用的cocoapods，非常方便，只是资源包大了一点，耐心等待就好了，其他方式没试过。<br><code>pod &#39;mailcore2-ios&#39;</code></p>
<p><a href="https://github.com/MailCore/mailcore2" target="_blank" rel="noopener">https://github.com/MailCore/mailcore2</a> 官方，有问题提issue，开发者会很热心回答的。</p>
<a id="more"></a>

<h2 id="更新-纠错日志"><a href="#更新-纠错日志" class="headerlink" title="更新/纠错日志"></a>更新/纠错日志</h2><ul>
<li>2018-12-11 纠错：IMAP-4.单封邮件获取和处理.根据uid获取单封邮件 有误，<code>range的范围应该是（uid, 0），而不是(uid, 1)，这样获取到的是两封</code>，脑子秀逗了。</li>
<li>2018-12-11 更新：创建草稿邮件</li>
<li>2018-12-12 更新：SMTP协议</li>
</ul>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>个人比较喜欢imap协议，功能比较丰富，不过用mailcore搞起来似乎费劲了一点，我也只是实现了一些基本功能，高级的还在研究。</p>
<p>计划分享一下下面几项🤗🤗🤗🤗🤗</p>
<ul>
<li>IMAP<ul>
<li>登录</li>
<li>文件夹列表、命名空间</li>
<li>邮件列表拉取</li>
<li>邮件列表中单封邮件内容获取和处理</li>
<li>邮件的各种标记添加</li>
<li>删除邮件</li>
<li>附件和html内容解析</li>
<li>草稿箱邮件创建</li>
</ul>
</li>
<li>POP</li>
<li>SMTP<ul>
<li>见<a href="https://ATommyGirl.github.io/2018/12/12/mailcore2-iOS之二SMTP/" target="_blank" rel="noopener">mailcore2-ios  之二 SMTP</a></li>
</ul>
</li>
</ul>
<h3 id="IMAP"><a href="#IMAP" class="headerlink" title="IMAP"></a>IMAP</h3><h4 id="1-登录"><a href="#1-登录" class="headerlink" title="1.登录"></a>1.登录</h4><p>首先设置账号信息，也就是创建session；然后校验；</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.imapSession.hostname = session.imapHost; <span class="comment">//imap.xxx.com.cn</span></span><br><span class="line"><span class="keyword">self</span>.imapSession.username = session.username; <span class="comment">//littlecat@xxx.com.cn</span></span><br><span class="line"><span class="keyword">self</span>.imapSession.password = session.password; <span class="comment">//password</span></span><br><span class="line"><span class="keyword">self</span>.imapSession.port     = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)session.imapPort;<span class="comment">//143、993</span></span><br><span class="line"><span class="keyword">self</span>.imapSession.connectionType = session.imapIsSSL ? MCOConnectionTypeTLS: MCOConnectionTypeClear;<span class="comment">//取决于你的邮件服务器是不是SSL的；</span></span><br></pre></td></tr></table></figure>

<p>校验信息：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">MCOIMAPOperation *checkOp = [session checkAccountOperation];<span class="comment">//这里的session就是配置帐号信息的session</span></span><br><span class="line">[checkOp start:^(<span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">     <span class="built_in">NSLog</span>(<span class="string">@"finished checking account."</span>);</span><br><span class="line">     <span class="keyword">if</span> (error == <span class="literal">nil</span>) &#123;</span><br><span class="line">         complete(<span class="literal">nil</span>);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         err(error);</span><br><span class="line">         <span class="built_in">NSLog</span>(<span class="string">@"error loading account: %@"</span>, [error userInfo][<span class="string">@"NSLocalizedDescription"</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h4 id="2-获取文件夹目录"><a href="#2-获取文件夹目录" class="headerlink" title="2.获取文件夹目录"></a>2.获取文件夹目录</h4><p>命名空间：它这里有个namespace，对于<code>中文名称</code>的📂名称，需要通过<code>命名空间</code>来解析，<code>不然很可能是👇这种乱码</code>：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是当时解析网易邮箱的乱码，找原因找了好久😭😭😭，在一篇博客上看到的解决办法。</span></span><br><span class="line">INBOX</span><br><span class="line">&amp;g0l6P3ux-</span><br><span class="line">&amp;XfJT0ZAB-</span><br><span class="line">&amp;XfJSIJZk-</span><br><span class="line">&amp;V4NXPpCuTvY-</span><br><span class="line">&amp;dcVr0mWHTvZZOQ-</span><br><span class="line">&amp;Xn9USpCuTvY-</span><br><span class="line">&amp;i6KWBZCuTvY-</span><br><span class="line">Deleted Messages</span><br><span class="line">Archive</span><br><span class="line">Junk</span><br></pre></td></tr></table></figure>

<p>先把正确的放出来，找回点走下去的信心💔💔💗💖…</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">INBOX</span><br><span class="line">草稿箱</span><br><span class="line">已发送</span><br><span class="line">已删除</span><br><span class="line">垃圾邮件</span><br><span class="line">病毒文件夹</span><br><span class="line">广告邮件</span><br><span class="line">订阅邮件</span><br><span class="line">Deleted Messages</span><br><span class="line">Archive</span><br><span class="line">Junk</span><br></pre></td></tr></table></figure>

<p>因为<code>某些邮箱的session莫名其妙没有自带默认的命名空间</code>，我采取的笨办法是先去获取一下namespace，不过嘛，，，居然获取到的也时有时无😱😱😱😱😱</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">MCOIMAPSession *session = [MMIMAPTool getSession];</span><br><span class="line">MCOIMAPFetchNamespaceOperation * op = [session fetchNamespaceOperation];</span><br><span class="line">[op start:^(<span class="built_in">NSError</span> * __<span class="keyword">nullable</span> error, <span class="built_in">NSDictionary</span> * namespaces) &#123;</span><br><span class="line">     MCOIMAPNamespace * namespace = (session.defaultNamespace != <span class="literal">nil</span>) ? session.defaultNamespace : [namespaces objectForKey:MCOIMAPNamespacePersonal];</span><br><span class="line">    <span class="keyword">if</span> (!namespace) &#123;</span><br><span class="line">        <span class="comment">//没有命名空间，很可能文件夹的名字解析出来是乱码，这个看个人怎么处理吧；</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果拿到了namespace，可以安心获取folderlist了</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>关键的一句：<code>NSString *folername = [namespace componentsFromPath:f.path][0];</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">MCOIMAPFetchFoldersOperation * ops = [session fetchAllFoldersOperation];</span><br><span class="line">[ops start:^(<span class="built_in">NSError</span> * error,<span class="built_in">NSArray</span> *folders) &#123;</span><br><span class="line">   <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="keyword">return</span> ;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">NSMutableDictionary</span> *dic = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">   <span class="keyword">for</span> (MCOIMAPFolder *f <span class="keyword">in</span> folders) &#123;</span><br><span class="line">      <span class="built_in">NSString</span> *folername = [namespace componentsFromPath:f.path][<span class="number">0</span>];</span><br><span class="line">      [dic setValue:f.path forKey:folername];</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//继续其他处理；</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>获取某个文件夹的mail数目等信息</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">MCOIMAPFolderInfoOperation *folderInfo = [session folderInfoOperation:foldername];</span><br><span class="line"></span><br><span class="line">[folderInfo start:^(<span class="built_in">NSError</span> *error, MCOIMAPFolderInfo *info) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;    </span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">     &#125;</span><br><span class="line">    complete(info.messageCount);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h4 id="3-拉取某个文件夹邮件列表"><a href="#3-拉取某个文件夹邮件列表" class="headerlink" title="3.拉取某个文件夹邮件列表"></a>3.拉取某个文件夹邮件列表</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里的kind我觉得是需要拉取的内容们，我是几乎大部分都down了，可以看情况自己选择；</span></span><br><span class="line"><span class="comment">//拉取范围，（0，UINT64_MAX）就是都拉取了，我是10条10条的来的。</span></span><br><span class="line">MCOIMAPMessagesRequestKind requestKind = (MCOIMAPMessagesRequestKind)</span><br><span class="line">(MCOIMAPMessagesRequestKindHeaders |</span><br><span class="line"> MCOIMAPMessagesRequestKindStructure |</span><br><span class="line"> MCOIMAPMessagesRequestKindInternalDate|</span><br><span class="line"> MCOIMAPMessagesRequestKindHeaderSubject |</span><br><span class="line"> MCOIMAPMessagesRequestKindFlags);</span><br><span class="line"></span><br><span class="line">MCOIndexSet *uids = [MCOIndexSet indexSetWithRange:MCORangeMake(range.location, range.length)];<span class="comment">//range控制拉取的邮件的范围，UINT64_MAX</span></span><br><span class="line">MCOIMAPFetchMessagesOperation *op = [session fetchMessagesOperationWithFolder:foldername requestKind:requestKind uids:uids];</span><br><span class="line">[op start:^(<span class="built_in">NSError</span> * _Nullable error, <span class="built_in">NSArray</span> * _Nullable messages, MCOIndexSet * _Nullable vanishedMessages) &#123;</span><br><span class="line">     <span class="built_in">NSMutableArray</span> *listArr = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">     <span class="built_in">NSInteger</span> count = messages.count;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i ++) &#123;</span><br><span class="line">            MCOIMAPMessage *msg = messages[i];</span><br><span class="line">            <span class="comment">//一堆属性，自己摘取吧，大多是header里的，为了显示邮件列表，邮件内容是另外单独获取的，存储也只是存储了列表；</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//又拍了一次顺序，好像有点蠢🙄🙄🙄🙄🙄。。。我是根据uid排序的，目前还没发现乱序什么的</span></span><br><span class="line">    <span class="built_in">NSSortDescriptor</span> *sortDescriptor = [<span class="built_in">NSSortDescriptor</span> sortDescriptorWithKey:<span class="string">@"uid"</span> ascending:<span class="literal">NO</span>];</span><br><span class="line">    [listArr sortUsingDescriptors:[<span class="built_in">NSArray</span> arrayWithObject:sortDescriptor]];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>还有另外一个方法，但是实在没太搞懂里面的number参数，文档里说sequence number不能排序用，所以我没选择这个方法，主要是没懂👺👺👺👺👺👺👺</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Returns an operation to fetch messages by (sequence) number.</span></span><br><span class="line">- (MCOIMAPFetchMessagesOperation *) fetchMessagesByNumberOperationWithFolder:(<span class="built_in">NSString</span> *)folder requestKind:(MCOIMAPMessagesRequestKind)requestKind numbers:(MCOIndexSet *)numbers;</span><br></pre></td></tr></table></figure>

<h4 id="4-单封邮件获取和处理"><a href="#4-单封邮件获取和处理" class="headerlink" title="4.单封邮件获取和处理"></a>4.单封邮件获取和处理</h4><ul>
<li><p>根据uid获取单封邮件</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//和获取邮件列表一样，不过range的长度是0；</span></span><br><span class="line">MCOIndexSet *uids = [MCOIndexSet indexSetWithRange:MCORangeMake(uid, <span class="number">0</span>)];</span><br><span class="line"><span class="comment">//之前写错了，range长度应该是0，而不是1；</span></span><br><span class="line"><span class="comment">//MCOIndexSet *uids = [MCOIndexSet indexSetWithRange:MCORangeMake(uid, 1)];</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取邮件纯文本内容（不包括html样式等）</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="comment">//这里是在上一步获取单个邮件的回调内进行的</span></span><br><span class="line">     <span class="comment">//这个方法是自动把文本中的空行之类的去掉了，也有不去掉和可选是否去掉的方法</span></span><br><span class="line">        MCOIMAPMessage *msg = [<span class="comment">//上一步的message];</span></span><br><span class="line">        MCOIMAPMessageRenderingOperation *  messageRenderingOperation = [session plainTextBodyRenderingOperationWithMessage:msg folder:foldername];</span><br><span class="line">        [messageRenderingOperation start:^(<span class="built_in">NSString</span> * plainTextBodyString,<span class="built_in">NSError</span> * error) &#123;</span><br><span class="line">            <span class="keyword">if</span> (error == <span class="literal">nil</span>) &#123;</span><br><span class="line">                complete(plainTextBodyString, msg);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"fetch plain text error:%@"</span>,error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">文档里注释的不能再清楚了，自己查阅吧😈😈😈😈😈</span><br><span class="line"><span class="comment">//Returns an operation to render the plain text version of a message.</span></span><br><span class="line">- (MCOIMAPMessageRenderingOperation *) plainTextRenderingOperationWithMessage:(MCOIMAPMessage *)message folder:(<span class="built_in">NSString</span> *)folder;</span><br><span class="line"><span class="comment">// All end of line will be removed and white spaces cleaned up if requested.</span></span><br><span class="line">- (MCOIMAPMessageRenderingOperation *) plainTextBodyRenderingOperationWithMessage:(MCOIMAPMessage *)message folder:(<span class="built_in">NSString</span> *)folder stripWhitespace:(<span class="built_in">BOOL</span>)stripWhitespace;</span><br></pre></td></tr></table></figure>

<ul>
<li>获取html内容，放在一个webview中显示基本内容应该没问题了<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">MCOIMAPMessage *msg = [同样是上一步的message];</span><br><span class="line">MCOIMAPMessageRenderingOperation *  messageRenderingOperation = [session htmlBodyRenderingOperationWithMessage:msg folder:foldername];</span><br><span class="line">[messageRenderingOperation start:^(<span class="built_in">NSString</span> * _Nullable htmlString, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">     <span class="keyword">if</span> (error == <span class="literal">nil</span>) &#123;</span><br><span class="line">         complete(htmlString, msg);</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="built_in">NSLog</span>(<span class="string">@"fetch plain text error:%@"</span>,error);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h4 id="5-添加各种标记"><a href="#5-添加各种标记" class="headerlink" title="5.添加各种标记"></a>5.添加各种标记</h4><p>已读未读，小红旗标记等等。需要注意的是，<code>“kind”区分是添加标记还是移除标记</code>，例如已读“MCOMessageFlagSeen”标记，移除就成了未读，<code>没有“unseen”之类的。。。</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setFlagged:(<span class="built_in">BOOL</span>)flagged message:(<span class="built_in">NSInteger</span>)uid folder:(<span class="built_in">NSString</span> *)folder &#123;</span><br><span class="line">    MCOIMAPSession *session = <span class="comment">//imap session；</span></span><br><span class="line">    MCOIndexSet *uids = [MCOIndexSet indexSetWithIndex:uid];</span><br><span class="line">    MCOIMAPOperation *op = [session storeFlagsOperationWithFolder:folder</span><br><span class="line">                                                             uids:uids</span><br><span class="line">                                                             kind:(flagged ? MCOIMAPStoreFlagsRequestKindSet : MCOIMAPStoreFlagsRequestKindRemove)</span><br><span class="line">                                                            flags:MCOMessageFlagFlagged];</span><br><span class="line">    [op start:^(<span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"store star flag 's error: %@"</span>,error);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果要批量设置标记，uids可以通过range来创建</span></span><br><span class="line">    MCOIndexSet *uids = [MCOIndexSet indexSetWithRange:MCORangeMake(range.location, range.length)];</span><br></pre></td></tr></table></figure>

<h4 id="6-删除邮件"><a href="#6-删除邮件" class="headerlink" title="6.删除邮件"></a>6.删除邮件</h4><p>为什么先说的标记那部分，因为删除邮件也是添加“delete”标记。这里需要做一个区分，<code>要删除的邮件是不是在 “已删除/草稿箱” 这两个文件夹</code>。</p>
<p>主要操作有三个：</p>
<ul>
<li>1、copy一份到“已删除”</li>
<li>2、设置删除标记</li>
<li>3、执行擦除expunge操作</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//**如果是不在已删除，草稿箱，执行1、2、3</span></span><br><span class="line"><span class="comment">//**如果在，只执行2、3</span></span><br><span class="line">    <span class="keyword">if</span> (![folder isEqualToString:deleteFolder] &amp;&amp; ![folder isEqualToString:draftFolder]) &#123;</span><br><span class="line">        <span class="comment">//copy 一份到已删除</span></span><br><span class="line">        MCOIMAPCopyMessagesOperation *op = [imapSession copyMessagesOperationWithFolder:folder</span><br><span class="line">                                                                                                    uids:[MCOIndexSet indexSetWithIndex:uid]</span><br><span class="line">                                                                                              destFolder:deleteFolder];</span><br><span class="line">        [op start:^(<span class="built_in">NSError</span> *error, <span class="built_in">NSDictionary</span> *uidMapping) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Error copy message to folder:%@"</span>, error);</span><br><span class="line">            [<span class="keyword">self</span> unturnedDelete:uid folder:folder];</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        [<span class="keyword">self</span> unturnedDelete:uid folder:folder];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)unturnedDelete:(<span class="built_in">NSInteger</span>)uid folder:(<span class="built_in">NSString</span> *)folder </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//先添加删除flags</span></span><br><span class="line">    MCOIMAPOperation * op2 = [imapSession storeFlagsOperationWithFolder:folder</span><br><span class="line">                                                                                    uids:[MCOIndexSet indexSetWithIndex:uid]</span><br><span class="line">                                                                                    kind:MCOIMAPStoreFlagsRequestKindSet</span><br><span class="line">                                                                                   flags:MCOMessageFlagDeleted];</span><br><span class="line">    [op2 start:^(<span class="built_in">NSError</span> * error) &#123;</span><br><span class="line">        <span class="comment">//添加成功之后对当前文件夹进行expunge操作</span></span><br><span class="line">        MCOIMAPOperation *deleteOp = [imapSession expungeOperation:folder];</span><br><span class="line">        [deleteOp start:^(<span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">            <span class="keyword">if</span>(error) &#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"Error expunging folder:%@"</span>, error);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"Successfully expunged folder"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-附件处理和html内容解析"><a href="#7-附件处理和html内容解析" class="headerlink" title="7.附件处理和html内容解析"></a>7.附件处理和html内容解析</h4><ul>
<li><p>官方demo<br><a href="https://github.com/MailCore/mailcore2/tree/master/example/ios/iOS%20UI%20Test/iOS%20UI%20Test" target="_blank" rel="noopener">https://github.com/MailCore/mailcore2/tree/master/example/ios/iOS%20UI%20Test/iOS%20UI%20Test</a><br>github上他们有写一个demo，我直接用了里面两个类，messageView又自己加了些乱七八糟的逻辑。protocol方便解析的，具体讲解后续更新。<br><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/24.png" alt></p>
</li>
<li><p>MCOHTMLRendererIMAPDelegate<br>这个协议里面，提供了可以自主解析附件、图片、html内容，以及简单给定html展示样式的方法。先贴出header、正文、附件，我自己写的一个简单展示模板吧，内容处理这块东西太多了，整理一下再继续更新。<br><a href="https://github.com/ATommyGirl/TemplateForMailCore2" target="_blank" rel="noopener">TemplateForAttachment.html</a><br><a href="https://github.com/ATommyGirl/TemplateForMailCore2" target="_blank" rel="noopener">TemplateForMessage.html</a><br><a href="https://github.com/ATommyGirl/TemplateForMailCore2" target="_blank" rel="noopener">TemplateForMainHeader.html</a></p>
</li>
</ul>
<h4 id="8-创建草稿箱邮件"><a href="#8-创建草稿箱邮件" class="headerlink" title="8.创建草稿箱邮件"></a>8.创建草稿箱邮件</h4><p>​     “append” 拼接的概念，往一个文件夹内添加邮件；</p>
<ul>
<li>1、新建一封新邮件(SMTP中讲创建邮件)</li>
<li>2、获取你的草稿箱文件夹名称</li>
<li>3、执行append操作<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里的data就是新建的邮件；</span></span><br><span class="line">- (<span class="keyword">void</span>)createDraft:(<span class="built_in">NSData</span> *)data block:(<span class="keyword">void</span>(^)(<span class="keyword">bool</span> success, uint32_t uid, <span class="built_in">NSString</span> *folder))block</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!imapSession ) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSString</span> *folder = <span class="string">@"Drafts"</span> <span class="comment">//草稿箱 ,或者是你邮箱服务器解析到的草稿箱文件夹名称；</span></span><br><span class="line"></span><br><span class="line">    MCOIMAPAppendMessageOperation *op = [imapSession appendMessageOperationWithFolder:folder messageData:data flags:MCOMessageFlagDraft];</span><br><span class="line">    [op start:^(<span class="built_in">NSError</span> *error, uint32_t createdUID) &#123;</span><br><span class="line">        <span class="comment">//do your operation;</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"create Draft message :%@"</span>,@(createdUID));</span><br><span class="line"></span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>邮箱</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 迁移至云服务的记录</title>
    <url>/2021/06/30/%E4%BA%91%E6%9C%8D%E5%8A%A1%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<blockquote>
<p>这篇文章不是专门分享服务器搭建、CentOS 系统等等的，我对这些一窍不通，只是记录一下迁移 Hexo 的过程<del>~</del></p>
</blockquote>
<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><blockquote>
<p>腾讯云 CentOS 7.2 64位 个人云服务器 用于测着玩儿</p>
<p>标准型SA2 | SA2.SMALL1 | 北京 | 1核| 1GB | 1Mbps</p>
</blockquote>
<h2 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h2><a id="more"></a>

<p>用到的文件命令：</p>
<ol>
<li>在当前路径创建一级目录</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在当前路径创建多级目录</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir -p mytest/test1/test1_1</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在创建目录的同时给新建的目录赋权限</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir -m 777 testmod</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>修改一个目录的权限</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chmod 700 -R <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>PS：<a href="https://www.haorooms.com/post/centeros_wj_zj" target="_blank" rel="noopener">参考自</a></p>
<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><ol>
<li><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4></li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><h4 id="测试-nginx-配置文件"><a href="#测试-nginx-配置文件" class="headerlink" title="测试 nginx 配置文件"></a>测试 nginx 配置文件</h4></li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果ok，会打印如下</span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><h4 id="配置相关"><a href="#配置相关" class="headerlink" title="配置相关"></a>配置相关</h4></li>
</ol>
<p>查看<code>/etc/nginx/nginx.conf</code>文件，内容如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># For more information on configuration, see:</span></span><br><span class="line"><span class="comment">#   * Official English Documentation: http://nginx.org/en/docs/</span></span><br><span class="line"><span class="comment">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">user</span> nginx;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">error_log</span> /var/log/nginx/error.log;</span><br><span class="line"><span class="attribute">pid</span> /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span></span><br><span class="line"><span class="attribute">include</span> /usr/share/nginx/modules/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>            <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span>          <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span>         <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>   <span class="number">65</span>;</span><br><span class="line">    <span class="attribute">types_hash_max_size</span> <span class="number">4096</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span>             /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load modular configuration files from the /etc/nginx/conf.d directory.</span></span><br><span class="line">    <span class="comment"># See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class="line">    <span class="comment"># for more information.</span></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">listen</span>       [::]:<span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  _;</span><br><span class="line">        <span class="attribute">root</span>         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">        <span class="attribute">include</span> /etc/nginx/default.d/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">        <span class="attribute">location</span> = /<span class="number">404</span>.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">"/etc/nginx/nginx.conf" 84L, 2336C                                                                                                                             1,1           Top</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><h4 id="启动、停止、查看状态、开机自启动"><a href="#启动、停止、查看状态、开机自启动" class="headerlink" title="启动、停止、查看状态、开机自启动"></a>启动、停止、查看状态、开机自启动</h4></li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start nginx.service</span><br><span class="line">systemctl stop nginx.service</span><br><span class="line">systemctl reload nginx.service</span><br><span class="line">systemctl status nginx.service</span><br><span class="line">service nginx start</span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure>

<p>​    启动以后类似下面的输出</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">● nginx.service - The nginx HTTP and reverse proxy server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/nginx.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Wed 2021-06-30 21:25:38 CST; 4s ago</span><br><span class="line">  Process: 2231 ExecStart=/usr/sbin/nginx (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 2228 ExecStartPre=/usr/sbin/nginx -t (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 2227 ExecStartPre=/usr/bin/rm -f /run/nginx.pid (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 2233 (nginx)</span><br><span class="line">   CGroup: /system.slice/nginx.service</span><br><span class="line">           ├─2233 nginx: master process /usr/sbin/nginx</span><br><span class="line">           └─2235 nginx: worker process</span><br><span class="line">           </span><br><span class="line">Jun 30 21:25:38 VM-0-13-centos systemd[1]: Starting The nginx HTTP and reverse proxy server...</span><br><span class="line">Jun 30 21:25:38 VM-0-13-centos nginx[2228]: nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">Jun 30 21:25:38 VM-0-13-centos nginx[2228]: nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line">Jun 30 21:25:38 VM-0-13-centos systemd[1]: Started The nginx HTTP and reverse proxy server.</span><br></pre></td></tr></table></figure>



<h2 id="Hexo-个人博客部署到-CentOS-个人服务器"><a href="#Hexo-个人博客部署到-CentOS-个人服务器" class="headerlink" title="Hexo 个人博客部署到 CentOS 个人服务器"></a>Hexo 个人博客部署到 CentOS 个人服务器</h2><ol>
<li><h4 id="安装-Git-Nginx"><a href="#安装-Git-Nginx" class="headerlink" title="安装 Git Nginx"></a>安装 Git Nginx</h4></li>
</ol>
<p>升级 CentOS 所有包，包括系统版本内核升级</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y update</span><br><span class="line">yum install -y git nginx</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><h4 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h4></li>
</ol>
<ul>
<li>创建文件目录, 用于博客站点文件存放, 并更改目录读写权限</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/share/nginx/www/hexo</span><br><span class="line">chmod -R 755 /usr/share/nginx/www/hexo</span><br></pre></td></tr></table></figure>

<ul>
<li>配置 Nginx 服务器</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<p>通过 vim 查找 <code>listen 80</code> 找到如下代码, 并修改</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">      <span class="attribute">listen</span>       <span class="number">80</span>; <span class="comment"># 默认监听80端口，先不用管</span></span><br><span class="line">      <span class="attribute">listen</span>       [::]:<span class="number">80</span>;</span><br><span class="line">      <span class="attribute">server_name</span>  www.xxx.com; <span class="comment"># 填写个人域名，有的话就写，没有也可以保持 _</span></span><br><span class="line">      <span class="attribute">root</span>         /usr/share/nginx/www/hexo; </span><br><span class="line">  &#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<ul>
<li>添加测试首页</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /usr/share/nginx/www/hexo/index.html <span class="comment">#路径就是自己新建的博客路径</span></span><br></pre></td></tr></table></figure>

<p>测试页的内容可以简单类似这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Nginx Bazinga!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问服务的 ip 或者 域名，能看到 <code>Nginx Bazinga!</code> 就表示 Nginx 基本成功了。</p>
<ol start="3">
<li><h4 id="下载-Nodejs"><a href="#下载-Nodejs" class="headerlink" title="下载 Nodejs"></a>下载 Nodejs</h4></li>
</ol>
<p>Nodejs 我也不是很懂，通过 yum 安装的并不是最新版本，网上有些资源说是要指定 源 ？</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y nodejs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以查看版本号的话，表示安装成功了。</span></span><br><span class="line">node -v</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4></li>
</ol>
<ul>
<li><p>首先要安装 Git，前面我们已经安装过了~</p>
<p>新建一个存放 hexo git 内容的目录</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/share/nginx/git</span><br></pre></td></tr></table></figure>

<ul>
<li>初始化为 git 仓库</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/nginx/git</span><br><span class="line">git init --bare ATommyGirl.git</span><br></pre></td></tr></table></figure>

<ul>
<li>创建 Git 钩子 (hook), 用于指定 Git 的源代码 和 Git 配置文件</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /usr/share/nginx/git/ATommyGirl.git/hooks/post-receive</span><br><span class="line"></span><br><span class="line"><span class="comment"># 钩子内容如下</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git --work-tree=/usr/share/nginx/www/hexo --git-dir=/usr/share/nginx/git/ATommyGirl.git checkout -f</span><br></pre></td></tr></table></figure>

<ul>
<li>保存并退出后, 给该文件添加可执行权限</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chmod +x /usr/share/nginx/git/ATommyGirl.git/hooks/post-receive</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><h4 id="本地-hexo-配置"><a href="#本地-hexo-配置" class="headerlink" title="本地 hexo 配置"></a>本地 hexo 配置</h4></li>
</ol>
<p>本地如何搭建 hexo 网上资料非常多。基于我们上面的操作，在本地博客文件夹根目录中的 <code>_config.yml</code>  配置文件增加一个 <code>deploy</code> 就可以了。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">root@your_server_ip:gitpath/git</span> <span class="comment">#用户名@域名或IP 地址:自己的git路径</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">message:</span></span><br></pre></td></tr></table></figure>

<p>我有多个提交的地址：</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/31.png" alt></p>
<p>PPS:<a href="https://www.jianshu.com/p/59eeb1493a45" target="_blank" rel="noopener">参考自01</a> 、<a href="https://segmentfault.com/a/1190000010680022" target="_blank" rel="noopener">参考自02</a></p>
<h2 id="Nginx-部署-SSL-证书"><a href="#Nginx-部署-SSL-证书" class="headerlink" title="Nginx 部署 SSL 证书"></a>Nginx 部署 SSL 证书</h2><ol>
<li>购买、申请 SSL 证书，我用的是腾讯一年免费的证书。</li>
<li>不同的服务器需要不同格式的公私钥文件，腾讯云自动帮忙生成了，根据部署类型使用对应的文件，我的是 Nginx：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── Apache</span><br><span class="line">│   ├── 1_root_bundle.crt</span><br><span class="line">│   ├── 2_tommygirl.cn.crt</span><br><span class="line">│   └── 3_tommygirl.cn.key</span><br><span class="line">├── IIS</span><br><span class="line">│   └── tommygirl.cn.pfx</span><br><span class="line">├── Nginx</span><br><span class="line">│   ├── 1_tommygirl.cn_bundle.crt</span><br><span class="line">│   └── 2_tommygirl.cn.key</span><br><span class="line">├── Tomcat</span><br><span class="line">│   └── tommygirl.cn.jks</span><br><span class="line">├── tommygirl.cn.csr</span><br><span class="line">├── tommygirl.cn.key</span><br><span class="line">└── tommygirl.cn.pem</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>我在 <code>/etc/nginx/</code> 新建了两个文件夹 <code>servers</code> <code>certs</code> 来放配置信息和证书文件，只是不知道这样是否符合”国际惯例”😂</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir /etc/nginx/servers</span><br><span class="line">mkdir /etc/nginx/certs</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>从本地把证书拷贝到云服务器上</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">scp -P 22 1_tommygirl.cn_bundle.crt username@host:/etc/nginx/certs</span><br><span class="line">scp -P 22 2_tommygirl.cn.key username@host:/etc/nginx/certs</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>添加 ssl 配置</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vim</span> /etc/nginx/servers/tommygirl.cn <span class="comment">#文件名自定义</span></span><br></pre></td></tr></table></figure>

<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>  tommygirl.cn;</span><br><span class="line">    <span class="attribute">ssl_certificate</span>  certs/1_tommygirl.cn_bundle.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> certs/2_tommygirl.cn.key;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /usr/share/nginx/www/hexo;</span><br><span class="line">        <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个时候应该可以通过 https 来访问网站了。</p>
<ol start="6">
<li>http 自动转换 https，也是修改  <code>Nginx</code>  的配置，添加一个重定向，<code>rewrite</code> 还有其他的一些参数……</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span>       [::]:<span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  tommygirl.cn;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> https://tommygirl.cn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>7788</tag>
        <tag>Mac</tag>
        <tag>网络</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP 的一点儿小知识</title>
    <url>/2015/08/02/HTTP%20%E7%9A%84%E4%B8%80%E7%82%B9%E5%84%BF%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><h3 id="一、Hypertext-Transfer-Protocol"><a href="#一、Hypertext-Transfer-Protocol" class="headerlink" title="一、Hypertext Transfer Protocol"></a>一、Hypertext Transfer Protocol</h3><blockquote>
<p>超文本传输协议 超文本传输协议</p>
<p>http协议规定了客户端和服务器之间的数据传输格式。</p>
<p>http协议是在网络开发中最常用的协议，不管是移动客户端还是PC端,访问网络资源经常使用http协议。</p>
</blockquote>
<p>​        <a id="more"></a></p>
<p>http优点:</p>
<ul>
<li><strong>简单快速</strong>：http协议简单,通信速度很快.</li>
<li><strong>灵活</strong>：http协议允许传输任意类型的数据.</li>
<li>http协议是<strong>短连接</strong>(非持续性连接) (TCP/IP  UDP/IP)：http协议限制每次连接只处理一个请求，服务器对客户端的请求作出响应后，马上断开连接，这种方式可以节省传输时间。</li>
</ul>
<h3 id="二、-http协议的使用"><a href="#二、-http协议的使用" class="headerlink" title="二、 http协议的使用"></a>二、 http协议的使用</h3><ol>
<li><strong>请求</strong>：客户端向服务器索要数据。</li>
</ol>
<p>​        http协议规定：一个完整的http请求包含<code>请求行、请求头、请求体</code>三个部分。</p>
<ul>
<li>请求行 : 包含了请求方法，请求资源路径，http协议版本。</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/resources/images/</span> HTTP/1.1</span><br></pre></td></tr></table></figure>

<ul>
<li>请求头：包含了对客户端的环境描述，客户端请求的主机地址等信息。</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">:</span><br><span class="line"><span class="attribute">Accept</span>: text/html // 客户端所能接收的数据类型</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-cn // 客户端的语言环境</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip // 客户端支持的数据压缩格式</span><br><span class="line"><span class="attribute">Host</span>: m.baidu.com // 客户端想访问的服务器主机地址</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:37.0) Gecko/20100101 Firefox/37.0// 客户端的类型,客户端的软件环境</span><br></pre></td></tr></table></figure>

<ul>
<li>请求体：客户端发给服务器的具体数据，比如文件/图片等。 </li>
</ul>
<ol start="2">
<li><strong>响应</strong>：服务器返回客户端想要的数据。</li>
</ol>
<p>​        http协议规定：一个完整的http响应包含 <code>状态行、响应头、实体内容</code> 三个部分。</p>
<ul>
<li>状态行：包含了http协议版本,状态吗,状态英文名称。</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br></pre></td></tr></table></figure>

<ul>
<li>响应头：包含了对服务器的描述,对返回数据的描述。    </li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">:</span><br><span class="line"><span class="attribute">Content-Encoding</span>: gzip // 服务器支持的数据压缩格式</span><br><span class="line"><span class="attribute">Content-Length</span>:  1528 // 返回数据的长度</span><br><span class="line"><span class="attribute">Content-Type</span>:  application/xhtml+xml;charset=utf-8// 返回数据的类型</span><br><span class="line"><span class="attribute">Date</span>: Mon, 15 Jun 201509:06:46 GMT // 响应的时间</span><br><span class="line"><span class="attribute">Server</span>: apache  // 服务器类型</span><br></pre></td></tr></table></figure>

<ul>
<li>实体内容：服务器返回给客户端的具体数据(图片/html/文件…)。  </li>
</ul>
<ol start="3">
<li>发送http请求</li>
</ol>
<p>​        在iOS开发中,发送http请求的方案有很多，常见的有如下几种：</p>
<ul>
<li>苹果原生:</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSURLConnection</span>: 用法简单,古老经典的一种方案.</span><br><span class="line"><span class="built_in">NSURLSession</span>: iOS7以后推出的技术,功能比<span class="built_in">NSURLConnection</span>更加强大.</span><br><span class="line"><span class="built_in">CFNetWork</span>: <span class="built_in">NSURL</span> 的底层,纯C语言,一般不用.</span><br></pre></td></tr></table></figure>

<ul>
<li>第三方框架:</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">ASIHttpRequest: http终结者,功能很强大,可惜作者已停止更新.</span><br><span class="line">AFNetWorking: 简单易用,提供了基本够用的常用功能,维护和使用者多.</span><br><span class="line"><span class="built_in">MKNetWorkKit</span>: 简单易用,产自印度,维护和使用者少.</span><br></pre></td></tr></table></figure>

<p>​      </p>
<h3 id="三、方法"><a href="#三、方法" class="headerlink" title="三、方法"></a>三、方法</h3><h4 id="1-http方法"><a href="#1-http方法" class="headerlink" title="1. http方法"></a>1. http方法</h4><p>​    http协议定义了很多方法对应不同的资源操作,其中最常用的是GET 和 POST 方法.</p>
<blockquote>
<p>GET、POST、OPTIONS、HEAD、PUT、DELETE、TRACE、CONNECT、PATCH</p>
<p>增:PUT</p>
<p> 删:DELETE</p>
<p>改:POST</p>
<p>查:GET    </p>
</blockquote>
<ul>
<li>OPTIONS</li>
</ul>
<p>返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送’*’的请求来测试服务器的功能性。</p>
<ul>
<li>HEAD</li>
</ul>
<p>向服务器索要与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的元信息。</p>
<ul>
<li>GET</li>
</ul>
<p>向特定的资源发出请求。注意：GET方法不应当被用于产生“副作用”的操作中。</p>
<ul>
<li>POST</li>
</ul>
<p>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</p>
<ul>
<li>PUT</li>
</ul>
<p>向指定资源位置上传其最新内容。</p>
<ul>
<li>DELETE</li>
</ul>
<p>请求服务器删除Request-URI所标识的资源。</p>
<ul>
<li>TRACE</li>
</ul>
<p>回显服务器收到的请求，主要用于测试或诊断。</p>
<ul>
<li>CONNECT</li>
</ul>
<p>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</p>
<p>​       </p>
<h4 id="2-参数"><a href="#2-参数" class="headerlink" title="2. 参数"></a>2. 参数</h4><p>因为 GET 和 POST 可以实现上述所有操作，所以，在现实开发中，我们只要会用GET 和 POST 方法就可以了。在与服务器交互时，有时候需要给服务器发送一些数据，比如登录时需要发送用户名和密码。</p>
<p><strong>参数</strong>:就是指传递给服务器的具体数据.</p>
<h4 id="3-GET-和-POST-的主要区别表现在参数的传递上"><a href="#3-GET-和-POST-的主要区别表现在参数的传递上" class="headerlink" title="3. GET 和 POST 的主要区别表现在参数的传递上"></a>3. GET 和 POST 的主要区别表现在参数的传递上</h4><h6 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h6><p>​    GET的本质是从服务器得到数据，效率更高，并且GET请求可以被缓存。</p>
<p>​    注意：网络缓存数据，保存在SQLite的数据库中(路径：NSHomeDirectory())。</p>
<p>​        查看缓存数据命令行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">cd 文件目录   (打开文件目录)</span><br><span class="line">ls   查看当前文件下目录</span><br><span class="line">sqlite3 Cache.db   打开数据库</span><br><span class="line">.tables    查看数据库中的表单</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> cfurl_cache_response;   查看服务器响应缓存</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> cfurl_cache_receiver_data;   查看服务器返回的数据缓存</span><br></pre></td></tr></table></figure>

<p>​    在请求 URL 后面以 ? 的形式跟上发给服务器的参数，参数以 “参数名”=”参数值” 的形式拼接，多个参数之间用 &amp; 分隔。</p>
<p>​    注意：GET的长度是有限制的，不同的浏览器有不同的长度限制，一般在2~8K之间。         </p>
<h6 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h6><p>​    POST的本质是向服务器发送数据，也可以获得服务器处理之后的结果，效率不如GET。POST请求不可以被缓存，每次刷新之后都需要重新提交表单。发送给服务器的参数全部放在 <code>请求体</code> 中，理论上，POST传递的数据量没有限制。</p>
<p>​    注意：所有涉及到用户隐私的数据(密码/银行卡号等…)都要用POST的方式传递。    </p>
<h4 id="4-注意-URL中不能出现空格以及中文等特殊符号"><a href="#4-注意-URL中不能出现空格以及中文等特殊符号" class="headerlink" title="4. 注意:URL中不能出现空格以及中文等特殊符号"></a>4. 注意:URL中不能出现空格以及中文等特殊符号</h4><ul>
<li><p>URL中,所有的字符都必须是 ASCII 码</p>
</li>
<li><p>URL中不能出现中文和特殊符号(如空格)</p>
</li>
</ul>
<p>​    所以，如果 URL 中出现了中文，需要添加百分号转义。    </p>
<h2 id="URL-中-井号（锚点）的用法"><a href="#URL-中-井号（锚点）的用法" class="headerlink" title="URL 中 # 井号（锚点）的用法"></a>URL 中 # 井号（锚点）的用法</h2><p>​       我们经常使用URL 定位，传递参数等应用，最经常使用的是？ 问号，一般作为参数传递，而我们在接触到单页开发模式的时候会接触到url 中大量# 井号的使用，有时候会对这三个常见符号有些分不清，搞不懂具体含义。 </p>
<h3 id="涵义"><a href="#涵义" class="headerlink" title="涵义"></a>涵义</h3><p> 在url 中使用# 例如  index.html#product  含义一般是定位到本页面的product位置，所以# 在url 中一般是作为页面定位使用，那么product 到底是用什么定位 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"product"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"product"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这两种方式都可以把滚动条定位到页面的响应位置 </p>
<blockquote>
<p>Twitter 在改版的时候把 改版前的用户主页网址为<a href="http://twitter.com/username改版后，就变成了http://twitter.com/#!/username" target="_blank" rel="noopener">http://twitter.com/username改版后，就变成了http://twitter.com/#!/username</a> 这是主流网站第一次将”#”大规模用于重要URL中。这表明井号（Hash）的作用正在被重新认识 </p>
</blockquote>
<h3 id="特性1：HTTP-请求中的作用"><a href="#特性1：HTTP-请求中的作用" class="headerlink" title="特性1：HTTP 请求中的作用"></a>特性1：HTTP 请求中的作用</h3><p>​    是用来指导浏览器动作的，对服务器端完全无用。所以，HTTP请求中不包括#。</p>
<p>​    比如，访问下面的网址，<a href="http://www.example.com/index.html#print，浏览器实际发出的请求是这样的：" target="_blank" rel="noopener">http://www.example.com/index.html#print，浏览器实际发出的请求是这样的：</a></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET /index.html HTTP/1.1 </span><br><span class="line"><span class="attribute">Host</span>: www.example.com</span><br></pre></td></tr></table></figure>

<pre><code>在第一个#后面出现的任何字符，都会被浏览器解读为位置标识符。这意味着，这些字符都不会被发送到服务器端。</code></pre><p>​    比如，下面URL的原意是指定一个颜色值：<a href="http://www.example.com/?color=#fff，但是，浏览器实际发出的请求是：" target="_blank" rel="noopener">http://www.example.com/?color=#fff，但是，浏览器实际发出的请求是：</a></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET /?color= HTTP/1.1 </span><br><span class="line"><span class="attribute">Host</span>: www.example.com</span><br></pre></td></tr></table></figure>



<h3 id="特性2：改版-不会导致网页重载"><a href="#特性2：改版-不会导致网页重载" class="headerlink" title="特性2：改版#不会导致网页重载"></a>特性2：改版#不会导致网页重载</h3><p>​    单单改变#后的部分，浏览器只会滚动到相应位置，不会重新加载网页。</p>
<p>​    比如，从<a href="http://www.example.com/index.html#location1改成http://www.example.com/index.html#location2，浏览器不会重新向服务器请求index.html。" target="_blank" rel="noopener">http://www.example.com/index.html#location1改成http://www.example.com/index.html#location2，浏览器不会重新向服务器请求index.html。</a></p>
<h3 id="特性3：改版-后对history-范围历史的影响"><a href="#特性3：改版-后对history-范围历史的影响" class="headerlink" title="特性3：改版# 后对history 范围历史的影响"></a>特性3：改版# 后对history 范围历史的影响</h3><p>​    每一次改变#后的部分，都会在浏览器的访问历史中增加一个记录，使用”后退”按钮，就可以回到上一个位置。这对于ajax应用程序特别有用，可以用不同的#值，表示不同的访问状态，然后向用户给出可以访问某个状态的链接。值得注意的是，上述规则对IE 6和IE 7不成立，它们不会因为#的改变而增加历史记录。</p>
<p>​    鉴于特性2、3 实现了在单页下view 的路由和历史回退，目前h5手机开发所采用的单页模式的基础。</p>
<h3 id="特性4：window-location-hash读取-值"><a href="#特性4：window-location-hash读取-值" class="headerlink" title="特性4：window.location.hash读取#值"></a>特性4：window.location.hash读取#值</h3><pre><code>window.location.hash 这个属性可读可写。读取时，可以用来判断网页状态是否改变；写入时，则会在不重载网页的前提下，创造一条访问历史记录。</code></pre><h3 id="特性5：onhashchange事件-H5新增"><a href="#特性5：onhashchange事件-H5新增" class="headerlink" title="特性5：onhashchange事件 H5新增"></a>特性5：onhashchange事件 H5新增</h3><p>​    这是一个HTML 5新增的事件，当#值发生变化时，就会触发这个事件。IE8+、Firefox 3.6+、Chrome 5+、Safari 4.0+支持该事件。</p>
<p>　　它的使用方法有三种：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">window.onhashchange = func; </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onhashchange</span>=<span class="string">"func();"</span>&gt;</span> </span><br><span class="line">window.addEventListener("hashchange"， func, false);</span><br></pre></td></tr></table></figure>



<p>对于不支持onhashchange的浏览器，可以用setInterval监控location.hash的变化。</p>
<h3 id="特性6：Google抓取-的机制"><a href="#特性6：Google抓取-的机制" class="headerlink" title="特性6：Google抓取#的机制"></a>特性6：Google抓取#的机制</h3><p>​    默认情况下，Google的网络蜘蛛忽视URL的#部分。但是，Google还规定，如果你希望Ajax生成的内容被浏览引擎读取，那么URL中可以使用”#!”，Google会自动将其后面的内容转成查询字符串escaped_fragment的值。</p>
<p>　　比如，Google发现新版Twitter的URL：<a href="http://twitter.com/#!/username" target="_blank" rel="noopener">http://twitter.com/#!/username</a></p>
<p>　　就会自动抓取另一个URL：<a href="http://twitter.com/?escaped_fragment=/username" target="_blank" rel="noopener">http://twitter.com/?escaped_fragment=/username</a> </p>
<p>　　通过这种机制，Google就可以索引动态的Ajax内容。</p>
<p>群讨论：</p>
<p>URL中的#只是作为一个分解符，#后面的内容，服务器不会处理，但是浏览器页面能获取到，但是拿到这个值干啥用，就看怎么处理了，比如现在H5做的SPA，就是靠#后面的内容作为参数，来处理前端路由。</p>
<h2 id="网络响应的常见状态"><a href="#网络响应的常见状态" class="headerlink" title="网络响应的常见状态"></a>网络响应的常见状态</h2><h3 id="1xx消息"><a href="#1xx消息" class="headerlink" title="1xx消息"></a>1xx消息</h3><p>​    这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。这些状态码代表的响应都是信息性的，标示客户应该采取的其他行动。</p>
<h4 id="100-Continue"><a href="#100-Continue" class="headerlink" title="100 Continue"></a>100 Continue</h4><p>​    客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。</p>
<h4 id="101-Switching-Protocols"><a href="#101-Switching-Protocols" class="headerlink" title="101 Switching Protocols"></a>101 Switching Protocols</h4><p>​    服务器已经理解了客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade消息头中定义的那些协议。: 只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP版本比旧版本更有优势，或者切换到一个实时且同步的协议以传送利用此类特性的资源。</p>
<h4 id="102-Processing"><a href="#102-Processing" class="headerlink" title="102 Processing"></a>102 Processing</h4><p>​    由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。</p>
<h3 id="2xx成功"><a href="#2xx成功" class="headerlink" title="2xx成功"></a>2xx成功</h3><p>​    这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。</p>
<h4 id="200-OK"><a href="#200-OK" class="headerlink" title="200 OK"></a>200 OK</h4><p>​    请求已成功，请求所希望的响应头或数据体将随此响应返回。</p>
<h4 id="201-Created"><a href="#201-Created" class="headerlink" title="201 Created"></a>201 Created</h4><p>​    请求已经被实现，而且有一个新的资源已经依据请求的需要而创建，且其URI已经随Location头信息返回。假如需要的资源无法及时创建的话，应当返回’202 Accepted’。</p>
<h4 id="202-Accepted"><a href="#202-Accepted" class="headerlink" title="202 Accepted"></a>202 Accepted</h4><p>​    服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。:返回202状态码的响应的目的是允许服务器接受其他过程的请求（例如某个每天只执行一次的基于批处理的操作），而不必让客户端一直保持与服务器的连接直到批处理操作全部完成。在接受请求处理并返回202状态码的响应应当在返回的实体中包含一些指示处理当前状态的信息，以及指向处理状态监视器或状态预测的指针，以便用户能够估计操作是否已经完成。</p>
<h4 id="203-Non-Authoritative-Information"><a href="#203-Non-Authoritative-Information" class="headerlink" title="203 Non-Authoritative Information"></a>203 Non-Authoritative Information</h4><p>​    服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超 集。例如，包含资源的元数据可能导致原始服务器知道元信息的超集。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。</p>
<h4 id="204-No-Content"><a href="#204-No-Content" class="headerlink" title="204 No Content"></a>204 No Content</h4><p>​    服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。</p>
<p>​    如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。</p>
<p>​    由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。</p>
<h4 id="205-Reset-Content"><a href="#205-Reset-Content" class="headerlink" title="205 Reset Content"></a>205 Reset Content</h4><p>​    服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。</p>
<pre><code>与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。</code></pre><h4 id="206-Partial-Content"><a href="#206-Partial-Content" class="headerlink" title="206 Partial Content"></a>206 Partial Content</h4><p>​    服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</p>
<p>​    该请求必须包含Range头信息来指示客户端希望得到的内容范围，并且可能包含If-Range来作为请求条件。</p>
<p>​    响应必须包含如下的头部域：</p>
<blockquote>
<p>Content-Range用以指示本次响应中返回的内容的范围；如果是Content-Type为multipart/byteranges的多段下载，则每一multipart段中都应包含Content-Range域用以指示本段的内容范围。假如响应中包含Content-Length，那么它的数值必须匹配它返回的内容范围的真实字节数。</p>
<p>Date</p>
<p>ETag和／或Content-Location，假如同样的请求本应该返回200响应。</p>
<p>Expires, Cache-Control，和／或Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。</p>
</blockquote>
<p>​    假如本响应请求使用了If-Range强缓存验证，那么本次响应不应该包含其他实体头；假如本响应的请求使用了If-Range弱缓存验证，那么本次响应禁止包含其他实体头；这避免了缓存的实体内容和更新了的实体头信息之间的不一致。否则，本响应就应当包含所有本应该返回200响应中应当返回的所有实体头部域。</p>
<p>​    假如ETag或Last-Modified头部不能精确匹配的话，则客户端缓存应禁止将206响应返回的内容与之前任何缓存过的内容组合在一起。</p>
<p>​    任何不支持Range以及Content-Range头的缓存都禁止缓存206响应返回的内容。</p>
<p>207 Multi-Status</p>
<p>​    由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</p>
<h3 id="3xx重定向"><a href="#3xx重定向" class="headerlink" title="3xx重定向"></a>3xx重定向</h3><p>​    这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的Location域中指明。</p>
<p>​    当且仅当后续的请求所使用的方法是GET或者HEAD时，用户浏览器才可以在没有用户介入的情况下自动提交所需要的后续请求。客户端应当自动监测无限循环重定向（例如：A→B→C→……→A或A→A），因为这会导致服务器和客户端大量不必要的资源消耗。按照HTTP/1.0版规范的建议，浏览器不应自动访问超过5次的重定向。</p>
<h4 id="300-Multiple-Choices"><a href="#300-Multiple-Choices" class="headerlink" title="300 Multiple Choices"></a>300 Multiple Choices</h4><p>​    被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。</p>
<p>​    除非这是一个HEAD请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由Content-Type定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。</p>
<p>​    如果服务器本身已经有了首选的回馈选择，那么在Location中应当指明这个回馈的URI；浏览器可能会将这个Location值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。</p>
<h4 id="301-Moved-Permanently"><a href="#301-Moved-Permanently" class="headerlink" title="301 Moved Permanently"></a>301 Moved Permanently</h4><p>​    被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。</p>
<p>​    新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。</p>
<p>​    如果这不是一个GET或者HEAD请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</p>
<p>​    注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。</p>
<h4 id="302-Found"><a href="#302-Found" class="headerlink" title="302 Found"></a>302 Found</h4><p>​    请求的资源现在临时从不同的URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</p>
<p>​    新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。</p>
<p>​    如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</p>
<p>​    注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</p>
<h4 id="303-See-Other"><a href="#303-See-Other" class="headerlink" title="303 See Other"></a>303 See Other</h4><p>​    对应当前请求的响应可以在另一个URI上被找到，而且客户端应当采用GET的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。</p>
<p>​    新的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。</p>
<p>​    注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</p>
<h4 id="304-Not-Modified"><a href="#304-Not-Modified" class="headerlink" title="304 Not Modified"></a>304 Not Modified</h4><p>​    如果客户端发送了一个带条件的GET请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。</p>
<p>​    该响应必须包含以下的头信息：</p>
<blockquote>
<p>Date，除非这个服务器没有时钟。假如没有时钟的服务器也遵守这些规则，那么代理服务器以及客户端可以自行将Date字段添加到接收到的响应头中去（正如RFC 2068中规定的一样），缓存机制将会正常工作。</p>
<p>ETag和／或Content-Location，假如同样的请求本应返回200响应。</p>
<p>Expires, Cache-Control，和／或Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。</p>
</blockquote>
<p>​    假如本响应请求使用了强缓存验证，那么本次响应不应该包含其他实体头；否则（例如，某个带条件的GET请求使用了弱缓存验证），本次响应禁止包含其他实体头；这避免了缓存了的实体内容和更新了的实体头信息之间的不一致。</p>
<p>​    假如某个304响应指明了当前某个实体没有缓存，那么缓存系统必须忽视这个响应，并且重复发送不包含限制条件的请求。</p>
<p>​    假如接收到一个要求更新某个缓存条目的304响应，那么缓存系统必须更新整个条目以反映所有在响应中被更新的字段的值。</p>
<h4 id="305-Use-Proxy"><a href="#305-Use-Proxy" class="headerlink" title="305 Use Proxy"></a>305 Use Proxy</h4><p>​    被请求的资源必须通过指定的代理才能被访问。Location域中将给出指定的代理所在的URI信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能创建305响应。</p>
<p>​    注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器创建。忽视这些限制可能导致严重的安全后果。</p>
<h4 id="306-Switch-Proxy"><a href="#306-Switch-Proxy" class="headerlink" title="306 Switch Proxy"></a>306 Switch Proxy</h4><p>​    在最新版的规范中，306状态码已经不再被使用。</p>
<h4 id="307-Temporary-Redirect"><a href="#307-Temporary-Redirect" class="headerlink" title="307 Temporary Redirect"></a>307 Temporary Redirect</h4><p>​    请求的资源现在临时从不同的URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</p>
<p>​    新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。因为部分浏览器不能识别307响应，因此需要添加上述必要信息以便用户能够理解并向新的URI发出访问请求。</p>
<p>​    如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</p>
<h3 id="4xx客户端错误"><a href="#4xx客户端错误" class="headerlink" title="4xx客户端错误"></a>4xx客户端错误</h3><p>​    这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个HEAD请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。</p>
<p>​    如果错误发生时客户端正在传送数据，那么使用TCP的服务器实现应当仔细确保在关闭客户端与服务器之间的连接之前，客户端已经收到了包含错误信息的数据包。如果客户端在收到错误信息后继续向服务器发送数据，服务器的TCP栈将向客户端发送一个重置数据包，以清除该客户端所有还未识别的输入缓冲，以免这些数据被服务器上的应用程序读取并干扰后者。</p>
<h4 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h4><p>​    由于包含语法错误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。</p>
<h4 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h4><p>​    当前请求需要用户验证。该响应必须包含一个适用于被请求资源的WWW-Authenticate信息头用以询问用户信息。客户端可以重复提交一个包含恰当的Authorization头信息的请求。如果当前请求已经包含了Authorization证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。参见RFC 2617。</p>
<h4 id="402-Payment-Required"><a href="#402-Payment-Required" class="headerlink" title="402 Payment Required"></a>402 Payment Required</h4><p>​    该状态码是为了将来可能的需求而预留的。</p>
<h4 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h4><p>​    服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</p>
<h4 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a>404 Not Found</h4><p>​    请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p>
<h4 id="405-Method-Not-Allowed"><a href="#405-Method-Not-Allowed" class="headerlink" title="405 Method Not Allowed"></a>405 Method Not Allowed</h4><p>​    请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow头信息用以表示出当前资源能够接受的请求方法的列表。</p>
<p>​    鉴于PUT，DELETE方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</p>
<h4 id="406-Not-Acceptable"><a href="#406-Not-Acceptable" class="headerlink" title="406 Not Acceptable"></a>406 Not Acceptable</h4><p>​    请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。</p>
<p>​    除非这是一个HEAD请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由Content-Type头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</p>
<h4 id="407-Proxy-Authentication-Required"><a href="#407-Proxy-Authentication-Required" class="headerlink" title="407 Proxy Authentication Required"></a>407 Proxy Authentication Required</h4><p>​    与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个Proxy-Authenticate用以进行身份询问。客户端可以返回一个Proxy-Authorization信息头用以验证。参见RFC 2617。</p>
<h4 id="408-Request-Timeout"><a href="#408-Request-Timeout" class="headerlink" title="408 Request Timeout"></a>408 Request Timeout</h4><p>​    请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。</p>
<h4 id="409-Conflict"><a href="#409-Conflict" class="headerlink" title="409 Conflict"></a>409 Conflict</h4><p>​    由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。</p>
<p>​    冲突通常发生于对PUT请求的处理中。例如，在采用版本检查的环境下，某次PUT提交的对特定资源的修改请求所附带的版本信息与之前的某个（第三方）请求向冲突，那么此时服务器就应该返回一个409错误，告知用户请求无法完成。此时，响应实体中很可能会包含两个冲突版本之间的差异比较，以便用户重新提交归并以后的新版本。</p>
<h4 id="410-Gone"><a href="#410-Gone" class="headerlink" title="410 Gone"></a>410 Gone</h4><p>​    被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用404状态码。除非额外说明，否则这个响应是可缓存的。</p>
<p>​    410响应的目的主要是帮助网站管理员维护网站，通知用户该资源已经不再可用，并且服务器拥有者希望所有指向这个资源的远端连接也被删除。这类事件在限时、增值服务中很普遍。同样，410响应也被用于通知客户端在当前服务器站点上，原本属于某个个人的资源已经不再可用。当然，是否需要把所有永久不可用的资源标记为’410 Gone’，以及是否需要保持此标记多长时间，完全取决于服务器拥有者。</p>
<h4 id="411-Length-Required"><a href="#411-Length-Required" class="headerlink" title="411 Length Required"></a>411 Length Required</h4><p>​    服务器拒绝在没有定义Content-Length头的情况下接受请求。在添加了表明请求消息体长度的有效Content-Length头之后，客户端可以再次提交该请求。</p>
<h4 id="412-Precondition-Failed"><a href="#412-Precondition-Failed" class="headerlink" title="412 Precondition Failed"></a>412 Precondition Failed</h4><p>​    服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</p>
<h4 id="413-Request-Entity-Too-Large"><a href="#413-Request-Entity-Too-Large" class="headerlink" title="413 Request Entity Too Large"></a>413 Request Entity Too Large</h4><p>​    服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。</p>
<p>​    如果这个状况是临时的，服务器应当返回一个Retry-After的响应头，以告知客户端可以在多少时间以后重新尝试。</p>
<h4 id="414-Request-URI-Too-Long"><a href="#414-Request-URI-Too-Long" class="headerlink" title="414 Request-URI Too Long"></a>414 Request-URI Too Long</h4><p>​    请求的URI长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括：</p>
<p>​        本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。</p>
<p>​        重定向URI“黑洞”，例如每次重定向把旧的URI作为新的URI的一部分，导致在若干次重定向后URI超长。</p>
<p>​        客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的URI，当GET后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行[1]。没有此类漏洞的服务器，应当返回414状态码。</p>
<h4 id="415-Unsupported-Media-Type"><a href="#415-Unsupported-Media-Type" class="headerlink" title="415 Unsupported Media Type"></a>415 Unsupported Media Type</h4><p>​    对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。</p>
<p>416 Requested Range Not Satisfiable</p>
<p>​    如果请求中包含了Range请求头，并且Range中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义If-Range请求头，那么服务器就应当返回416状态码。</p>
<p>​    假如Range使用的是字节范围，那么这种情况就是指请求指定的所有数据范围的首字节位置都超过了当前资源的长度。服务器也应当在返回416状态码的同时，包含一个Content-Range实体头，用以指明当前资源的长度。这个响应也被禁止使用multipart/byteranges作为其Content-Type。</p>
<h4 id="417-Expectation-Failed"><a href="#417-Expectation-Failed" class="headerlink" title="417 Expectation Failed"></a>417 Expectation Failed</h4><p>​    在请求头Expect中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服务器，它有明显的证据证明在当前路由的下一个节点上，Expect的内容无法被满足。</p>
<h4 id="418-I’m-a-teapot"><a href="#418-I’m-a-teapot" class="headerlink" title="418 I’m a teapot"></a>418 I’m a teapot</h4><p>​    本操作码是在1998年作为IETF的传统愚人节笑话, 在RFC 2324超文本咖啡壶控制协议中定义的，并不需要在真实的HTTP服务器中定义。</p>
<h4 id="421-There-are-too-many-connections-from-your-internet-address"><a href="#421-There-are-too-many-connections-from-your-internet-address" class="headerlink" title="421 There are too many connections from your internet address"></a>421 There are too many connections from your internet address</h4><p>​    从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。</p>
<h4 id="422-Unprocessable-Entity"><a href="#422-Unprocessable-Entity" class="headerlink" title="422 Unprocessable Entity"></a>422 Unprocessable Entity</h4><p>​    请求格式正确，但是由于含有语义错误，无法响应。（RFC 4918 WebDAV）</p>
<h4 id="423-Locked"><a href="#423-Locked" class="headerlink" title="423 Locked"></a>423 Locked</h4><p>​    当前资源被锁定。（RFC 4918 WebDAV）</p>
<h4 id="424-Failed-Dependency"><a href="#424-Failed-Dependency" class="headerlink" title="424 Failed Dependency"></a>424 Failed Dependency</h4><p>​    由于之前的某个请求发生的错误，导致当前请求失败，例如PROPPATCH。（RFC 4918 WebDAV）</p>
<h4 id="425-Unordered-Collection"><a href="#425-Unordered-Collection" class="headerlink" title="425 Unordered Collection"></a>425 Unordered Collection</h4><p>​    在WebDav Advanced Collections草案中定义，但是未出现在《WebDAV顺序集协议》（RFC 3658）中。</p>
<h4 id="426-Upgrade-Required"><a href="#426-Upgrade-Required" class="headerlink" title="426 Upgrade Required"></a>426 Upgrade Required</h4><p>​    客户端应当切换到TLS/1.0。（RFC 2817）</p>
<h4 id="449-Retry-With"><a href="#449-Retry-With" class="headerlink" title="449 Retry With"></a>449 Retry With</h4><p>​    由微软扩展，代表请求应当在执行完适当的操作后进行重试。</p>
<h3 id="5xx服务器错误"><a href="#5xx服务器错误" class="headerlink" title="5xx服务器错误"></a>5xx服务器错误</h3><p>​    这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。</p>
<p>​    这些状态码适用于任何响应方法。</p>
<h4 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h4><p>​    服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器的程序码出错时出现。</p>
<h4 id="501-Not-Implemented"><a href="#501-Not-Implemented" class="headerlink" title="501 Not Implemented"></a>501 Not Implemented</h4><p>​    服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。</p>
<h4 id="502-Bad-Gateway"><a href="#502-Bad-Gateway" class="headerlink" title="502 Bad Gateway"></a>502 Bad Gateway</h4><p>​    作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</p>
<h4 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a>503 Service Unavailable</h4><p>​    由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个Retry-After头用以标明这个延迟时间。如果没有给出这个Retry-After信息，那么客户端应当以处理500响应的方式处理它。</p>
<h4 id="504-Gateway-Timeout"><a href="#504-Gateway-Timeout" class="headerlink" title="504 Gateway Timeout"></a>504 Gateway Timeout</h4><p>​    作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。</p>
<p>​    注意：某些代理服务器在DNS查询超时时会返回400或者500错误</p>
<h4 id="505-HTTP-Version-Not-Supported"><a href="#505-HTTP-Version-Not-Supported" class="headerlink" title="505 HTTP Version Not Supported"></a>505 HTTP Version Not Supported</h4><p>​    服务器不支持，或者拒绝支持在请求中使用的HTTP版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</p>
<h4 id="506-Variant-Also-Negotiates"><a href="#506-Variant-Also-Negotiates" class="headerlink" title="506 Variant Also Negotiates"></a>506 Variant Also Negotiates</h4><p>​    由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。</p>
<h4 id="507-Insufficient-Storage"><a href="#507-Insufficient-Storage" class="headerlink" title="507 Insufficient Storage"></a>507 Insufficient Storage</h4><p>​    服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。WebDAV（RFC 4918）</p>
<h4 id="509-Bandwidth-Limit-Exceeded"><a href="#509-Bandwidth-Limit-Exceeded" class="headerlink" title="509 Bandwidth Limit Exceeded"></a>509 Bandwidth Limit Exceeded</h4><p>​    服务器达到带宽限制。这不是一个官方的状态码，但是仍被广泛使用。</p>
<h4 id="510-Not-Extended"><a href="#510-Not-Extended" class="headerlink" title="510 Not Extended"></a>510 Not Extended</h4><p>​    获取资源所需要的策略并没有没满足。</p>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>GCD (Grand Central Dispatch)</title>
    <url>/2016/01/13/GCD/</url>
    <content><![CDATA[<p>转载自 <a href="https://github.com/ming1016" target="_blank" rel="noopener">戴铭老师</a></p>
<p>文中较详细介绍GCD队列，各种GCD使用方法，实例如何使用Dispatch Source监听系统底层对象，分析不同锁的性能对比，实例GCD死锁情况。 </p>
<p>文中的Demo在这里 <a href="https://github.com/ming1016/GCDDemo" target="_blank" rel="noopener">Demo</a> 对着文章试着来调demo体会更深哦，细细嚼消化好🤓</p>
<a id="more"></a>



<blockquote>
<p>官方文档：</p>
<p><a href="https://developer.apple.com/library/prerelease/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/" target="_blank" rel="noopener">Docs</a></p>
<p>GCD属于系统级的线程管理，在Dispatch queue中执行需要执行的任务性能非常的高。 GCD这块已经开源，<a href="http://libdispatch.macosforge.org" target="_blank" rel="noopener">地址</a>。</p>
<p><strong>GCD中的FIFO（先进先出）队列称为dispatch queue，用来保证先进来的任务先得到执行。</strong></p>
</blockquote>
<h2 id="GCD概要"><a href="#GCD概要" class="headerlink" title="GCD概要"></a>GCD概要</h2><ol>
<li><p>和operation queue一样都是基于队列的并发编程API，他们通过集中管理大家协同使用的线程池。</p>
</li>
<li><p><strong>公开的5个不同队列</strong>：运行在主线程中的main queue，3个不同优先级的后台队列（High Priority Queue，Default Priority Queue，Low Priority Queue），以及一个优先级更低的后台队列Background Priority Queue（用于I/O）。</p>
</li>
<li><p>可创建自定义队列：<strong>串行</strong>或<strong>并列</strong>队列。<strong>自定义一般放在Default Priority Queue和Main Queue里</strong>。</p>
</li>
<li><p>操作是在多线程上还是单线程主要是看队列的类型和执行方法，<strong>并行队列异步执行才能在多线程，并行队列同步执行就只会在主线程执行了</strong>。</p>
</li>
</ol>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="一、-系统标准两个队列"><a href="#一、-系统标准两个队列" class="headerlink" title="一、 系统标准两个队列"></a>一、 系统标准两个队列</h4><p>​    //全局队列，一个并行的队列</p>
<p>​    <code>dispatch_get_global_queue</code></p>
<p>​    //主队列，主线程中的唯一队列，一个串行队列</p>
<p>​    <code>dispatch_get_main_queue</code></p>
<h4 id="二、自定义队列"><a href="#二、自定义队列" class="headerlink" title="二、自定义队列"></a>二、自定义队列</h4><p>​    //串行队列</p>
<p>​    <code>dispatch_queue_create(&quot;com.starming.serialqueue&quot;, DISPATCH_QUEUE_SERIAL)</code></p>
<p>​    //并行队列</p>
<p>​    <code>dispatch_queue_create(&quot;com.starming.concurrentqueue&quot;, DISPATCH_QUEUE_CONCURRENT)</code></p>
<h4 id="三、同步异步线程创建"><a href="#三、同步异步线程创建" class="headerlink" title="三、同步异步线程创建"></a>三、同步异步线程创建</h4><p>​    //同步线程</p>
<p>​    <code>dispatch_sync(..., ^(block))</code></p>
<p>​    //异步线程</p>
<p>​    <code>dispatch_async(..., ^(block))</code></p>
<h2 id="队列（dispatch-queue）"><a href="#队列（dispatch-queue）" class="headerlink" title="队列（dispatch queue）"></a>队列（dispatch queue）</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="一、dispatch-get-global-queue"><a href="#一、dispatch-get-global-queue" class="headerlink" title="一、dispatch_get_global_queue"></a>一、dispatch_get_global_queue</h4><ol>
<li>Serial：又叫private dispatch queues，同时只执行一个任务。Serial queue常用于同步访问特定的资源或数据。 当你创建多个Serial queue时，虽然各自是同步，但serial queue之间是并发执行。 </li>
<li>Main dispatch queue：<strong>全局可用的serial queue</strong>，在应用程序<strong>主线程上</strong>执行任务。</li>
<li>Concurrent：又叫global dispatch queue，可以并发的执行多个任务，<strong>但执行完成顺序是随机的</strong>。系统提供四个全局并发队列，这四个队列有这对应的优先级，<strong>用户是不能够创建全局队列的，只能获取</strong>。 </li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">dipatch_queue_t queue;</span><br><span class="line">queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH,<span class="number">0</span>);</span><br></pre></td></tr></table></figure>



<h4 id="二、dispatch-queue-create"><a href="#二、dispatch-queue-create" class="headerlink" title="二、dispatch_queue_create"></a>二、dispatch_queue_create</h4><ol>
<li>user create queue：创建自己定义的队列，可以用dispatch_queue_create函数。</li>
<li>函数有两个参数，第一个自定义的队列名，第二个参数是队列类型，默认NULL或者 DISPATCH_QUEUE_SERIAL 的是串行，参数为 DISPATCH_QUEUE_CONCURRENT 为并行队列。</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue;</span><br><span class="line">queue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.concurrentqueue"</span>, DISPATCH_QUEUE_CONCURRENT);</span><br></pre></td></tr></table></figure>



<h4 id="三、队列优先级"><a href="#三、队列优先级" class="headerlink" title="三、队列优先级"></a>三、队列优先级</h4><ol>
<li>自定义队列的优先级：可以通过dipatch_queue_attr_make_with_qos_class或dispatch_set_target_queue方法设置队列的优先级</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dipatch_queue_attr_make_with_qos_class</span></span><br><span class="line">dispatch_queue_attr_t attr = dispatch_queue_attr_make_with_qos_class(DISPATCH_QUEUE_SERIAL, </span><br><span class="line">                                                                     QOS_CLASS_UTILITY, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.qosqueue"</span>, attr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//dispatch_set_target_queue</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.settargetqueue"</span>,</span><br><span class="line">                                               <span class="literal">NULL</span>); <span class="comment">//需要设置优先级的queue</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> referQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, </span><br><span class="line">                                                        <span class="number">0</span>); <span class="comment">//参考优先级</span></span><br><span class="line">dispatch_set_target_queue(queue, referQueue); <span class="comment">//设置queue和referQueue的优先级一样</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>dispatch_set_target_queue：可以设置优先级，也可以设置队列层级体系，比如让多个串行和并行队列在统一一个串行队列里串行执行，如下</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.serialqueue"</span>, </span><br><span class="line">                                                     DISPATCH_QUEUE_SERIAL);</span><br><span class="line"><span class="built_in">dispatch_queue_t</span> firstQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.firstqueue"</span>, </span><br><span class="line">                                                    DISPATCH_QUEUE_SERIAL);</span><br><span class="line"><span class="built_in">dispatch_queue_t</span> secondQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.secondqueue"</span>, </span><br><span class="line">                                                     DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"></span><br><span class="line">dispatch_set_target_queue(firstQueue, serialQueue);</span><br><span class="line">dispatch_set_target_queue(secondQueue, serialQueue);</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_async</span>(firstQueue, ^&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</span><br><span class="line">  [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">3.</span>f];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_async</span>(secondQueue, ^&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</span><br><span class="line">  [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2.</span>f];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_async</span>(secondQueue, ^&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"3"</span>);</span><br><span class="line">  [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1.</span>f];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="队列类型"><a href="#队列类型" class="headerlink" title="队列类型"></a>队列类型</h3><p><strong>队列默认是串行的，如果设置该参数为NULL会按串行处理，只能执行一个单独的block，队列也可以是并行的，同一时间执行多个block</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)init &#123;</span><br><span class="line">  <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">self</span> != <span class="literal">nil</span>) &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *label = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@.isolation.%p"</span>, [<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">self</span>];</span><br><span class="line">    <span class="keyword">self</span>.isolationQueue = dispatch_queue_create([label UTF8String], <span class="number">0</span>);</span><br><span class="line">    label = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@.work.%p"</span>, [<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">self</span>];</span><br><span class="line">    <span class="keyword">self</span>.workQueue = dispatch_queue_create([label UTF8String], <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="一、5种队列"><a href="#一、5种队列" class="headerlink" title="一、5种队列"></a>一、5种队列</h4><p>主队列（main queue）, 四种通用调度队列，自己定制的队列。四种通用调度队列为 ：</p>
<ol>
<li><p><strong>QOS_CLASS_USER_INTERACTIVE</strong>：user interactive等级表示任务需要被立即执行提供好的体验，用来更新UI，响应事件等。这个等级最好保持小规模。 </p>
</li>
<li><p><strong>QOS_CLASS_USER_INITIATED</strong>：user initiated等级表示任务由UI发起异步执行。适用场景是需要及时结果同时又可以继续交互的时候。</p>
</li>
<li><p><strong>QOS_CLASS_UTILITY</strong>：utility等级表示需要长时间运行的任务，伴有用户可见进度指示器。经常会用来做计算，I/O，网络，持续的数据填充等任务。这个任务节能。 </p>
</li>
<li><p><strong>QOS_CLASS_BACKGROUND</strong>：background等级表示用户不会察觉的任务，使用它来处理预加载， 或者不需要用户交互和对时间不敏感的任务。 </p>
</li>
</ol>
<p><strong>示例：后台加载显示图片</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">  dispatch_async(dispatch_get_global_queue(<span class="type">Int</span>(<span class="type">QOS_CLASS_USER_INITIATED</span>.value), <span class="number">0</span>)) &#123;</span><br><span class="line">	<span class="comment">// 将工作从主线程转移到全局队列中，这是dispatch_async调用，异步提交保证调用线程会继续执行下去，这样viewDidLoad在主线程上能够更早完成，</span></span><br><span class="line">    <span class="keyword">let</span> overlayImage = <span class="keyword">self</span>.faceOverlayImageFromImage(<span class="keyword">self</span>.image)</span><br><span class="line">		dispatch_async(dispatch_get_main_queue()) &#123;</span><br><span class="line">      <span class="comment">// 新图完成，把一个闭包加入主线程用来更新UIImageView，只有在主线程能操作UIKit。</span></span><br><span class="line">      <span class="keyword">self</span>.fadeInNewImage(overlayImage) <span class="comment">// 更新UI</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="二、何时使用何种队列类型"><a href="#二、何时使用何种队列类型" class="headerlink" title="二、何时使用何种队列类型"></a>二、何时使用何种队列类型</h4><ol>
<li>主队列（顺序）：<strong>队列中有任务完成需要更新UI时，dispatch_after在这种类型中使用</strong>。</li>
<li>并发队列：<strong>用来执行与UI无关的后台任务</strong>，dispatch_sync放在这里，方便等待任务，完成进行后续处理或和dispatch barrier同步。dispatch groups放在这里也不错。</li>
<li>自定义顺序队列：顺序执行后台任务并追踪它时。这样做同时只有一个任务在执行可以防止资源竞争。dipatch barriers解决读写锁问题的放在这里处理。dispatch groups也是放在这里。 </li>
</ol>
<h4 id="三、QoS等级参数的写法"><a href="#三、QoS等级参数的写法" class="headerlink" title="三、QoS等级参数的写法"></a>三、QoS等级参数的写法</h4><p>可以使用下面的方法简化QoS等级参数的写法 </p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="type">GlobalMainQueue</span>: dispatch_queue_t &#123;</span><br><span class="line">  <span class="keyword">return</span> dispatch_get_main_queue()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="type">GlobalUserInteractiveQueue</span>: dispatch_queue_t &#123;</span><br><span class="line">  <span class="keyword">return</span> dispatch_get_global_queue(<span class="type">Int</span>(<span class="type">QOS_CLASS_USER_INTERACTIVE</span>.value), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="type">GlobalUserInitiatedQueue</span>: dispatch_queue_t &#123;</span><br><span class="line">  <span class="keyword">return</span> dispatch_get_global_queue(<span class="type">Int</span>(<span class="type">QOS_CLASS_USER_INITIATED</span>.value), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="type">GlobalUtilityQueue</span>: dispatch_queue_t &#123;</span><br><span class="line">  <span class="keyword">return</span> dispatch_get_global_queue(<span class="type">Int</span>(<span class="type">QOS_CLASS_UTILITY</span>.value), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="type">GlobalBackgroundQueue</span>: dispatch_queue_t &#123;</span><br><span class="line">  <span class="keyword">return</span> dispatch_get_global_queue(<span class="type">Int</span>(<span class="type">QOS_CLASS_BACKGROUND</span>.value), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用起来就是这样，易读而且容易看出在使用哪个队列</span></span><br><span class="line">dispatch_async(<span class="type">GlobalUserInitiatedQueue</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> overlayImage = <span class="keyword">self</span>.faceOverlayImageFromImage(<span class="keyword">self</span>.image)</span><br><span class="line">  dispatch_async(<span class="type">GlobalMainQueue</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.fadeInNewImage(overlayImage)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="简单使用和介绍"><a href="#简单使用和介绍" class="headerlink" title="简单使用和介绍"></a>简单使用和介绍</h3><h4 id="一、dispatch-once用法"><a href="#一、dispatch-once用法" class="headerlink" title="一、dispatch_once用法"></a>一、dispatch_once用法</h4><p>​    <strong>dispatch_once_t 要是全局或static变量，保证dispatch_once_t只有一份实例</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">UIColor</span> *)boringColor &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">UIColor</span> *color;</span><br><span class="line">  <span class="comment">//只运行一次</span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">  <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">    color = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">0.380</span>f green:<span class="number">0.376</span>f blue:<span class="number">0.376</span>f alpha:<span class="number">1.000</span>f];</span><br><span class="line">	&#125;);</span><br><span class="line">  <span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二、dispatch-async"><a href="#二、dispatch-async" class="headerlink" title="二、dispatch_async"></a>二、dispatch_async</h4><p>​    设计一个异步的API调用dispatch_async()，这个调用放在API的方法或函数中做。让API的使用者设置一个回调处理队列。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)processImage:(<span class="built_in">UIImage</span> *)image completionHandler:(<span class="keyword">void</span>(^)(<span class="built_in">BOOL</span> success))handler &#123;</span><br><span class="line">  <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.isolationQueue, ^(<span class="keyword">void</span>)&#123;</span><br><span class="line">    <span class="comment">// do actual processing here</span></span><br><span class="line">    <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.resultQueue, ^(<span class="keyword">void</span>)&#123;</span><br><span class="line">      handler(<span class="literal">YES</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>豆瓣中数据加载的时候用到的就是这种方法，数据处理中使用</p>
<p><strong>可以避免界面会被一些耗时的操作卡死，比如读取网络数据，大数据IO，还有大量数据的数据库读写，这时需要在另一个线程中处理，然后通知主线程更新界面，GCD使用起来比NSThread和NSOperation方法要简单方便。</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码框架</span></span><br><span class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">  <span class="comment">// 耗时的操作</span></span><br><span class="line">  <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    <span class="comment">// 更新界面</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//下载图片的示例</span></span><br><span class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">  <span class="built_in">NSURL</span> * url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"&lt;http://avatar.csdn.net/2/C/D/1_totogo2010.jpg&gt;"</span>];</span><br><span class="line">  <span class="built_in">NSData</span> * data = [[<span class="built_in">NSData</span> alloc]initWithContentsOfURL:url];</span><br><span class="line">  <span class="built_in">UIImage</span> *image = [[<span class="built_in">UIImage</span> alloc]initWithData:data];</span><br><span class="line">  <span class="keyword">if</span> (data != <span class="literal">nil</span>) &#123;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">      <span class="keyword">self</span>.imageView.image = image;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="三、dispatch-after延后执行"><a href="#三、dispatch-after延后执行" class="headerlink" title="三、dispatch_after延后执行"></a>三、dispatch_after延后执行</h4><p><strong>dispatch_after只是延时提交block，不是延时立刻执行。</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)foo &#123;</span><br><span class="line">  <span class="keyword">double</span> delayInSeconds = <span class="number">2.0</span>;</span><br><span class="line">  dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, </span><br><span class="line">                                          (int64_t) (delayInSeconds * <span class="built_in">NSEC_PER_SEC</span>));</span><br><span class="line">  dispatch_after(popTime, dispatch_get_main_queue(), ^(<span class="keyword">void</span>)&#123;</span><br><span class="line">    [<span class="keyword">self</span> bar];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>范例，实现一个推迟出现弹出框提示，比如说提示用户评价等功能。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showOrHideNavPrompt</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">let</span> delayInSeconds = <span class="number">1.0</span></span><br><span class="line">  <span class="keyword">let</span> popTime = dispatch_time(<span class="type">DISPATCH_TIME_NOW</span>,</span><br><span class="line">                              <span class="type">Int64</span>(delayInSeconds * <span class="type">Double</span>(<span class="type">NSEC_PER_SEC</span>))) <span class="comment">// 在这里声明推迟的时间</span></span><br><span class="line">  dispatch_after(popTime, <span class="type">GlobalMainQueue</span>) &#123; <span class="comment">// 等待delayInSeconds将闭包异步到主队列</span></span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">count</span> = <span class="type">PhotoManager</span>.sharedManager.photos.<span class="built_in">count</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">count</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">      <span class="keyword">self</span>.navigationItem.prompt = <span class="literal">nil</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">self</span>.navigationItem.prompt = <span class="string">"Add photos with faces to Googlyify them!"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例子中的dispatch time的参数，可以先看看函数原型 </p>
<p><code>dispatch_time_t dispatch_time ( dispatch_time_t when, int64_t delta );</code></p>
<p>第一个参数为DISPATCH_TIME_NOW表示当前。第二个参数的delta表示纳秒，一秒对应的纳秒为1000000000，系统提供了一些宏来简化 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NSEC_PER_SEC 1000000000ull <span class="comment">//每秒有多少纳秒</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USEC_PER_SEC 1000000ull <span class="comment">//每秒有多少毫秒</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NSEC_PER_USEC 1000ull <span class="comment">//每毫秒有多少纳秒</span></span></span><br></pre></td></tr></table></figure>

<p>这样如果要表示一秒就可以这样写 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">dispatch_time(DISPATCH_TIME_NOW, <span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>);</span><br><span class="line">dispatch_time(DISPATCH_TIME_NOW, <span class="number">1000</span> * USEC_PER_SEC);</span><br><span class="line">dispatch_time(DISPATCH_TIME_NOW, USEC_PER_SEC * <span class="built_in">NSEC_PER_USEC</span>);</span><br></pre></td></tr></table></figure>



<h4 id="四、dispatch-barrier-async使用Barrier-Task方法"><a href="#四、dispatch-barrier-async使用Barrier-Task方法" class="headerlink" title="四、dispatch_barrier_async使用Barrier Task方法"></a>四、dispatch_barrier_async使用Barrier Task方法</h4><ol>
<li>Dispatch Barrier解决多线程并发读写同一个资源发生死锁</li>
<li>Dispatch Barrier确保提交的闭包是指定队列中在特定时段唯一在执行的一个。 </li>
<li>在所有先于Dispatch Barrier的任务都完成的情况下这个闭包才开始执行。 </li>
<li>轮到这个闭包时barrier会执行这个闭包并且确保队列在此过程不会执行其它任务。 </li>
<li>闭包完成后 队列恢复。 </li>
<li><strong>需要注意dispatch_barrier_async只在自己创建的队列上有这种作用，在全局并发队列和串行队列上，效果和 dispatch_sync一样</strong></li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建队列</span></span><br><span class="line"><span class="keyword">self</span>.isolationQueue = dispatch_queue_create([label UTF8String], DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"><span class="comment">//改变setter</span></span><br><span class="line">- (<span class="keyword">void</span>)setCount:(<span class="built_in">NSUInteger</span>)count forKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">  key = [key <span class="keyword">copy</span>];</span><br><span class="line">  <span class="comment">//确保所有barrier都是async异步的</span></span><br><span class="line">  dispatch_barrier_async(<span class="keyword">self</span>.isolationQueue, ^()&#123;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">      [<span class="keyword">self</span>.counts removeObjectForKey:key];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">self</span>.counts[key] = @(count);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)dispatchBarrierAsyncDemo &#123;</span><br><span class="line">    <span class="comment">//防止文件读写冲突，可以创建一个串行队列，操作都在这个队列中进行，没有更新数据读用并行，写用串行。</span></span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> dataQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.dataqueue"</span>,</span><br><span class="line">                                                       DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(dataQueue, ^&#123;</span><br><span class="line">      [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2.</span>f];</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@"read data 1"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">dispatch_async</span>(dataQueue, ^&#123;</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@"read data 2"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//等待前面的都完成，在执行barrier后面的</span></span><br><span class="line">    dispatch_barrier_async(dataQueue, ^&#123;</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@"write data 1"</span>);</span><br><span class="line">      [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1</span>];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dispatch_async</span>(dataQueue, ^&#123;</span><br><span class="line">      [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1.</span>f];</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@"read data 3"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dispatch_async</span>(dataQueue, ^&#123;</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@"read data 4"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>swift示例</strong></p>
<p>使用dispatch_queue_create初始化一个并发队列。第一个参数遵循<strong>反向DNS命名习惯</strong>，方便描述，第二个参数是指出是并发还是顺序。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">let</span> concurrentPhotoQueue = dispatch_queue_create(<span class="string">"com.raywenderlich.GooglyPuff.photoQueue"</span>, <span class="type">DISPATCH_QUEUE_CONCURRENT</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addPhoto</span><span class="params">(photo: Photo)</span></span> &#123;</span><br><span class="line">  dispatch_barrier_async(concurrentPhotoQueue) &#123;</span><br><span class="line">    <span class="comment">// 将写操作加入到自定义的队列。开始执行时这个就是队列中唯一的一个在执行的任务。</span></span><br><span class="line">    <span class="keyword">self</span>._photos.append(photo) </span><br><span class="line">    <span class="comment">// barrier能够保障不会和其他任务同时进行。</span></span><br><span class="line">    dispatch_async(<span class="type">GlobalMainQueue</span>) &#123; </span><br><span class="line">      <span class="comment">// 涉及到UI所以这个通知应该在主线程中，所以分派另一个异步任务到主队列中。</span></span><br><span class="line">      <span class="keyword">self</span>.postContentAddedNotification()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面是解决了写可能发生死锁，下面是使用dispatch_sync解决读时可能会发生的死锁。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> photos: [<span class="type">Photo</span>] &#123;</span><br><span class="line">  <span class="keyword">var</span> photosCopy: [<span class="type">Photo</span>]!</span><br><span class="line">  dispatch_sync(concurrentPhotoQueue) &#123; <span class="comment">// 同步调度到concurrentPhotoQueue队列执行读操作</span></span><br><span class="line">    photosCopy = <span class="keyword">self</span>._photos <span class="comment">// 保存</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> photosCopy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样读写问题都解决了。都用异步处理避免死锁，异步的缺点在于调试不方便，但是比起同步容易产生死锁这个副作用还算小的。</p>
<h4 id="五、dispatch-apply进行快速迭代"><a href="#五、dispatch-apply进行快速迭代" class="headerlink" title="五、dispatch_apply进行快速迭代"></a>五、dispatch_apply进行快速迭代</h4><p>类似for循环，但是在并发队列的情况下dispatch_apply会并发执行block任务。 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (size_t y = <span class="number">0</span>; y &lt; height; ++y) &#123;</span><br><span class="line">  <span class="keyword">for</span> (size_t x = <span class="number">0</span>; x &lt; width; ++x) &#123;</span><br><span class="line">    <span class="comment">// Do something with x and y here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为可以并行执行，所以使用dispatch_apply可以运行的更快 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)dispatchApplyDemo &#123;</span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.concurre</span></span><br><span class="line"><span class="string">    dispatch_apply(10, concurrentQueue, ^(size_t i) &#123;</span></span><br><span class="line"><span class="string">        NSLog(@"</span>%zu<span class="string">",i);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    NSLog(@"</span>The end<span class="string">");</span></span><br><span class="line"><span class="string">    //这里有个需要注意的是，dispatch_apply这个是会阻塞主线程的。这个log打印会在dispatch_apply都结束后才开始执行</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>dispatch_apply能避免线程爆炸，因为GCD会管理并发</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)dealWiththreadWithMaybeExplode:(<span class="built_in">BOOL</span>)explode &#123;</span><br><span class="line">  <span class="built_in">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.concurrentqueue"</span>,DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">  <span class="keyword">if</span> (explode) &#123;</span><br><span class="line">    <span class="comment">//有问题的情况，可能会死锁</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">999</span> ; i++) &#123;</span><br><span class="line">      <span class="built_in">dispatch_async</span>(concurrentQueue, ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"wrong %d"</span>,i);</span><br><span class="line">        <span class="comment">//do something hard</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//会优化很多，能够利用GCD管理</span></span><br><span class="line">    dispatch_apply(<span class="number">999</span>, concurrentQueue, ^(size_t i)&#123;</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@"correct %zu"</span>,i);</span><br><span class="line">      <span class="comment">//do something hard</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>swift示例： </p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">downloadPhotosWithCompletion</span><span class="params">(completion: BatchPhotoDownloadingCompletionClosure?)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> storedError: <span class="type">NSError!</span></span><br><span class="line">  <span class="keyword">var</span> downloadGroup = dispatch_group_create()</span><br><span class="line">  <span class="keyword">let</span> addresses = [<span class="type">OverlyAttachedGirlfriendURLString</span>, </span><br><span class="line">                   <span class="type">SuccessKidURLString</span>,</span><br><span class="line">                   <span class="type">LotsOfFacesURLString</span>]</span><br><span class="line">  dispatch_apply(<span class="type">UInt</span>(addresses.<span class="built_in">count</span>), <span class="type">GlobalUserInitiatedQueue</span>) &#123;</span><br><span class="line">    i <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="type">Int</span>(i)</span><br><span class="line">    <span class="keyword">let</span> address = addresses[index]</span><br><span class="line">    <span class="keyword">let</span> url = <span class="type">NSURL</span>(string: address)</span><br><span class="line">    dispatch_group_enter(downloadGroup)</span><br><span class="line">    <span class="keyword">let</span> photo = <span class="type">DownloadPhoto</span>(url: url!) &#123;</span><br><span class="line">      image, error <span class="keyword">in</span> </span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> error = error &#123;</span><br><span class="line">        storedError = error</span><br><span class="line">      &#125;</span><br><span class="line">      dispatch_group_leave(downloadGroup)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">PhotoManager</span>.sharedManager.addPhoto(photo)</span><br><span class="line">  &#125;</span><br><span class="line">  dispatch_group_notify(downloadGroup, <span class="type">GlobalMainQueue</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> completion = completion &#123;</span><br><span class="line">      completion(error: storedError)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="六、Block组合Dispatch-groups"><a href="#六、Block组合Dispatch-groups" class="headerlink" title="六、Block组合Dispatch_groups"></a>六、Block组合Dispatch_groups</h4><p>dispatch groups是专门用来监视多个异步任务。dispatch_group_t实例用来追踪不同队列中的不同任务。</p>
<p>当group里所有事件都完成GCD API有两种方式发送通知: </p>
<ul>
<li>第一种是dispatch_group_wait，会阻塞当前进程，等所有任务都完成或等待超时。 </li>
<li>第二种方法是使用dispatch_group_notify，异步执行闭包，不会阻塞。 </li>
</ul>
<ol>
<li>第一种使用dispatch_group_wait的swift的例子： </li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">downloadPhotosWithCompletion</span><span class="params">(completion: BatchPhotoDownloadingCompletionClosure?)</span></span> &#123;</span><br><span class="line">  dispatch_async(<span class="type">GlobalUserInitiatedQueue</span>) &#123;</span><br><span class="line">    <span class="comment">// 因为dispatch_group_wait会租塞当前进程，所以要使用dispatch_async将整个方法要放到后台队列才能够保证主线程不被阻塞</span></span><br><span class="line">    <span class="keyword">var</span> storedError: <span class="type">NSError!</span></span><br><span class="line">    <span class="keyword">var</span> downloadGroup = dispatch_group_create() <span class="comment">// 创建一个dispatch group</span></span><br><span class="line">    <span class="keyword">let</span> addresses = [<span class="type">OverlyAttachedGirlfriendURLString</span>,</span><br><span class="line">                     <span class="type">SuccessKidURLString</span>,</span><br><span class="line">                     <span class="type">LotsOfFacesURLString</span>]</span><br><span class="line">    <span class="keyword">for</span> address <span class="keyword">in</span> addresses &#123;</span><br><span class="line">      <span class="keyword">let</span> url = <span class="type">NSURL</span>(string: address)</span><br><span class="line">      dispatch_group_enter(downloadGroup)</span><br><span class="line">        <span class="comment">// dispatch_group_enter是通知dispatch group任务开始了，dispatch_group_enter和dispatch_group_leave是成对调用，不然程序就崩溃了。</span></span><br><span class="line">      <span class="keyword">let</span> photo = <span class="type">DownloadPhoto</span>(url: url!) &#123;</span><br><span class="line">        image, error <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> error = error &#123;</span><br><span class="line">          storedError = error</span><br><span class="line">        &#125;</span><br><span class="line">        dispatch_group_leave(downloadGroup) </span><br><span class="line">        <span class="comment">// 保持和dispatch_group_enter配对。通知任务已经完成</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">PhotoManager</span>.sharedManager.addPhoto(photo)</span><br><span class="line">    &#125;</span><br><span class="line">    dispatch_group_wait(downloadGroup, <span class="type">DISPATCH_TIME_FOREVER</span>)</span><br><span class="line">    <span class="comment">// dispatch_group_wait等待所有任务都完成直到超时。如果任务完成前就超时了，函数会返回一个非零值，可以通过返回值判断是否超时。也可以用DISPATCH_TIME_FOREVER表示一直等。</span></span><br><span class="line">    dispatch_async(<span class="type">GlobalMainQueue</span>) &#123;</span><br><span class="line">      <span class="comment">// 这里可以保证所有图片任务都完成，然后在main queue里加入完成后要处理的闭包，会在main queue里执行。</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> completion = completion &#123; <span class="comment">// 执行闭包内容</span></span><br><span class="line">        completion(error: storedError)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  oc例子</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)dispatchGroupWaitDemo &#123;</span><br><span class="line">  <span class="built_in">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.concurrentqueue"</span>,DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">  dispatch_group_t group = dispatch_group_create();</span><br><span class="line">  <span class="comment">//在group中添加队列的block</span></span><br><span class="line">  dispatch_group_async(group, concurrentQueue, ^&#123;</span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2.</span>f];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_group_async(group, concurrentQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"go on"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>第二种使用dispatch_group_notify的<strong>swift</strong>的例子： </li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">downloadPhotosWithCompletion</span><span class="params">(completion: BatchPhotoDownloadingCompletionClosure?)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不用加dispatch_async，因为没有阻塞主进程</span></span><br><span class="line">  <span class="keyword">var</span> storedError: <span class="type">NSError!</span></span><br><span class="line">  <span class="keyword">var</span> downloadGroup = dispatch_group_create()</span><br><span class="line">  <span class="keyword">for</span> address <span class="keyword">in</span> [<span class="type">OverlyAttachedGirlfriendURLString</span>,</span><br><span class="line">                  <span class="type">SuccessKidURLString</span>,</span><br><span class="line">                  <span class="type">LotsOfFacesURLString</span>] &#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="type">NSURL</span>(string: address)</span><br><span class="line">    dispatch_group_enter(downloadGroup)</span><br><span class="line">    <span class="keyword">let</span> photo = <span class="type">DownloadPhoto</span>(url: url!) &#123;</span><br><span class="line">      image, error <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> error = error &#123;</span><br><span class="line">        storedError = error</span><br><span class="line">      &#125;</span><br><span class="line">      dispatch_group_leave(downloadGroup)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">PhotoManager</span>.sharedManager.addPhoto(photo)</span><br><span class="line">  &#125;</span><br><span class="line">  dispatch_group_notify(downloadGroup, <span class="type">GlobalMainQueue</span>) &#123;</span><br><span class="line">    <span class="comment">// dispatch_group_notify和dispatch_group_wait的区别就是是异步执行闭包的，当dispatch groups中没有剩余的任务时闭包才执行。这里是指明在主队列中执行。</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> completion = completion &#123;</span><br><span class="line">      completion(error: storedError)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>oc例子：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dispatch_group_notify</span></span><br><span class="line">- (<span class="keyword">void</span>)dispatchGroupNotifyDemo &#123;</span><br><span class="line">  <span class="built_in">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.concurrentqueue"</span>,DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"></span><br><span class="line">  dispatch_group_t group = dispatch_group_create();</span><br><span class="line">  dispatch_group_async(group, concurrentQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_group_async(group, concurrentQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"end"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"can continue"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dispatch_group_wait</span></span><br><span class="line">- (<span class="keyword">void</span>)dispatchGroupWaitDemo &#123;</span><br><span class="line">  <span class="built_in">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.concurrentqueue"</span>,DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">  dispatch_group_t group = dispatch_group_create();</span><br><span class="line">  <span class="comment">//在group中添加队列的block</span></span><br><span class="line">  dispatch_group_async(group, concurrentQueue, ^&#123;</span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2.</span>f];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_group_async(group, concurrentQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"can continue"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>如何对现有API使用dispatch_group_t </li>
</ol>
<p>给Core Data的-performBlock:添加groups。组合完成任务后使用dispatch_group_notify来运行一个block即可。 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)withGroup:(dispatch_group_t)group performBlock:(dispatch_block_t)block &#123;</span><br><span class="line">  <span class="keyword">if</span> (group == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    [<span class="keyword">self</span> performBlock:block];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    dispatch_group_enter(group);</span><br><span class="line">    [<span class="keyword">self</span> performBlock:^()&#123;</span><br><span class="line">      block();</span><br><span class="line">      dispatch_group_leave(group);</span><br><span class="line">    &#125;];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>NSURLConnection也可以这样做</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)withGroup:(dispatch_group_t)group sendAsynchronousRequest:(<span class="built_in">NSURLRequest</span> *)request</span><br><span class="line">            queue:(<span class="built_in">NSOperationQueue</span> *)queue completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLResponse</span>*, <span class="built_in">NSData</span>*, <span class="built_in">NSError</span>*))handler &#123;</span><br><span class="line">    <span class="keyword">if</span> (group == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span> sendAsynchronousRequest:request queue:queue completionHandler:handler];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dispatch_group_enter(group);</span><br><span class="line">        [<span class="keyword">self</span> sendAsynchronousRequest:request</span><br><span class="line">                                queue:queue</span><br><span class="line">                    completionHandler:^(<span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSData</span> *data, <span class="built_in">NSError</span> *error)&#123;</span><br><span class="line">            handler(response, data, error);</span><br><span class="line">            dispatch_group_leave(group);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>注意事项：</code> </p>
<ul>
<li>dispatch_group_async 等价于 dispatch_group_enter() 和 dispatch_group_leave() 的组合。 </li>
<li>dispatch_group_enter() 必须运行在 dispatch_group_leave() 之前。 </li>
<li>dispatch_group_enter() 和 dispatch_group_leave() 需要成对出现的 </li>
</ul>
<h4 id="七、Dispatch-Block"><a href="#七、Dispatch-Block" class="headerlink" title="七、Dispatch Block"></a>七、Dispatch Block</h4><p>​    队列执行任务都是block的方式</p>
<ol>
<li><h5 id="dispatch-block-t-创建block"><a href="#dispatch-block-t-创建block" class="headerlink" title="dispatch_block_t 创建block"></a>dispatch_block_t 创建block</h5></li>
</ol>
<ul>
<li><pre><code class="objc">- (<span class="keyword">void</span>)createDispatchBlock {
  <span class="comment">//normal way</span>
  <span class="built_in">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.concurrentqueue"</span>,DISPATCH_QUEUE_CONCURRENT);

  dispatch_block_t block = dispatch_block_create(<span class="number">0</span>, ^{
    <span class="built_in">NSLog</span>(<span class="string">@"run block"</span>);
  });
  <span class="built_in">dispatch_async</span>(concurrentQueue, block);
  <span class="comment">//QOS way</span>
  dispatch_block_t qosBlock = dispatch_block_create_with_qos_class(<span class="number">0</span>, QOS_CLASS_USER_INITIATED, <span class="number">-1</span>, ^{
    <span class="built_in">NSLog</span>(<span class="string">@"run qos block"</span>);
  });
  <span class="built_in">dispatch_async</span>(concurrentQueue, qosBlock);
}
&lt;!--￼<span class="number">27</span>--&gt;


</code></pre>
</li>
</ul>
<ol start="3">
<li><h5 id="dispatch-block-notify"><a href="#dispatch-block-notify" class="headerlink" title="dispatch_block_notify"></a>dispatch_block_notify</h5><p>可以监视指定dispatch block结束，然后再加入一个block到队列中。 </p>
<p>三个参数分别为，第一个是需要监视的block，第二个参数是需要提交执行的队列，第三个是待加入到队列中的block </p>
</li>
</ol>
<ul>
<li><pre><code class="objc">- (<span class="keyword">void</span>)dispatchBlockNotifyDemo {
  <span class="built_in">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.serialqueue"</span>, DISPATCH_QUEUE_SERIAL);
  dispatch_block_t firstBlock = dispatch_block_create(<span class="number">0</span>, ^{
    <span class="built_in">NSLog</span>(<span class="string">@"first block start"</span>);
    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2.</span>f];
    <span class="built_in">NSLog</span>(<span class="string">@"first block end"</span>);
  });
  <span class="built_in">dispatch_async</span>(serialQueue, firstBlock);
  dispatch_block_t secondBlock = dispatch_block_create(<span class="number">0</span>, ^{
    <span class="built_in">NSLog</span>(<span class="string">@"second block run"</span>);
  });
  <span class="comment">//first block执行完才在serial queue中执行second block</span>
  dispatch_block_notify(firstBlock, serialQueue, secondBlock);
}
&lt;!--￼<span class="number">28</span>--&gt;


</code></pre>
</li>
</ul>
<ol start="5">
<li><h5 id="使用dispatch-block-object（调度块）在任务执行前进行取消"><a href="#使用dispatch-block-object（调度块）在任务执行前进行取消" class="headerlink" title="使用dispatch block object（调度块）在任务执行前进行取消"></a>使用dispatch block object（调度块）在任务执行前进行取消</h5><p>dispatch block object可以为队列中的对象设置 </p>
<p>示例，下载图片中途进行取消 </p>
</li>
</ol>
<ul>
<li><pre><code class="swift"><span class="function"><span class="keyword">func</span> <span class="title">downloadPhotosWithCompletion</span><span class="params">(completion: BatchPhotoDownloadingCompletionClosure?)</span></span> {

  <span class="keyword">var</span> storedError: <span class="type">NSError!</span>
  <span class="keyword">let</span> downloadGroup = dispatch_group_create()
  <span class="keyword">var</span> addresses = [<span class="type">OverlyAttachedGirlfriendURLString</span>,
                   <span class="type">SuccessKidURLString</span>,
                   <span class="type">LotsOfFacesURLString</span>]
  addresses += addresses + addresses <span class="comment">// 扩展address数组，复制3份</span>
  <span class="keyword">var</span> blocks: [dispatch_block_t] = [] <span class="comment">// 一个保存block的数组</span>
     <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; addresses.<span class="built_in">count</span> {
    dispatch_group_enter(downloadGroup)
    <span class="keyword">let</span> block = dispatch_block_create(<span class="type">DISPATCH_BLOCK_INHERIT_QOS_CLASS</span>) {
      <span class="comment">// 创建一个block，block的标志是DISPATCH_BLOCK_INHERIT_QOS_CLASS</span>
      <span class="keyword">let</span> index = <span class="type">Int</span>(i)
      <span class="keyword">let</span> address = addresses[index]
      <span class="keyword">let</span> url = <span class="type">NSURL</span>(string: address)
      <span class="keyword">let</span> photo = <span class="type">DownloadPhoto</span>(url: url!) {
        image, error <span class="keyword">in</span>
        <span class="keyword">if</span> <span class="keyword">let</span> error = error {
          storedError = error
        }
        dispatch_group_leave(downloadGroup)
      }
      <span class="type">PhotoManager</span>.sharedManager.addPhoto(photo)
    }
    blocks.append(block)
    dispatch_async(<span class="type">GlobalMainQueue</span>, block)
    <span class="comment">// 把这个block放到GlobalMainQueue上异步调用。因为全局队列是一个顺序队列所以方便取消对象block，同时可以保证下载任务在downloadPhotosWithCompletion返回后才开始执行。</span>
  }
  <span class="keyword">for</span> block <span class="keyword">in</span> blocks[<span class="number">3</span> ..&lt; blocks.<span class="built_in">count</span>] {
    <span class="keyword">let</span> cancel = arc4random_uniform(<span class="number">2</span>) <span class="comment">// 随机返回一个整数，会返回0或1</span>
    <span class="keyword">if</span> cancel == <span class="number">1</span> {
      dispatch_block_cancel(block)
      <span class="comment">// 如果是1就取消block，这个只能发生在block还在队列中并没有开始的情况下。因为把block已经放到了GlobalMainQueue中，所以这个地方会先执行，执行完了才会执行block。</span>
      <span class="comment">// 因为已经dispatch_group_enter了，所以取消时也要将其都leave掉。</span>
      dispatch_group_leave(downloadGroup)       
    }
  }
  dispatch_group_notify(downloadGroup, <span class="type">GlobalMainQueue</span>) {
    <span class="keyword">if</span> <span class="keyword">let</span> completion = completion {
      completion(error: storedError)
    }
  }
}
&lt;!--￼<span class="number">29</span>--&gt;</code></pre>
</li>
</ul>
<ul>
<li>dispatch_io_create：创建dispatch io 。</li>
<li>dispatch_io_set_low_water：指定切割文件大小 。</li>
<li>dispatch_io_read：读取切割的文件然后合并。 </li>
</ul>
<blockquote>
<p>苹果系统日志API里用到了这个技术，可以在这里查看： </p>
<p><a href="https://github.com/Apple-FOSS-Mirror/Libc/blob/2ca2ae74647714acfc18674c3114b1a5d3325d7d/gen/asl.c" target="_blank" rel="noopener">https://github.com/Apple-FOSS-Mirror/Libc/blob/2ca2ae74647714acfc18674c3114b1a5d3325d7d/gen/asl.c</a></p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">pipe_q = dispatch_queue_create(<span class="string">"PipeQ"</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//创建</span></span><br><span class="line">pipe_channel = dispatch_io_create(DISPATCH_IO_STREAM, fd, pipe_q, ^(<span class="keyword">int</span> err)&#123;</span><br><span class="line">  close(fd);</span><br><span class="line">&#125;);</span><br><span class="line">*out_fd = fdpair[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置切割大小</span></span><br><span class="line">dispatch_io_set_low_water(pipe_channel, SIZE_MAX);</span><br><span class="line">dispatch_io_read(pipe_channel, <span class="number">0</span>, SIZE_MAX, pipe_q, ^(<span class="keyword">bool</span> done, dispatch_data_t pipedata, <span class="keyword">int</span> err) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err == <span class="number">0</span>) &#123;</span><br><span class="line">    size_t len = dispatch_data_get_size(pipedata);</span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//对每次切块数据的处理</span></span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">char</span> *bytes = <span class="literal">NULL</span>;</span><br><span class="line">      <span class="keyword">char</span> *encoded;</span><br><span class="line">      uint32_t eval;</span><br><span class="line">      dispatch_data_t md = dispatch_data_create_map(pipedata, </span><br><span class="line">                                                    (<span class="keyword">const</span> <span class="keyword">void</span> **)&amp;bytes, </span><br><span class="line">                                                    &amp;len);</span><br><span class="line">      encoded = asl_core_encode_buffer(bytes, len);</span><br><span class="line">      asl_msg_set_key_val(aux, ASL_KEY_AUX_DATA, encoded);</span><br><span class="line">      free(encoded);</span><br><span class="line">      eval = _asl_evaluate_send(<span class="literal">NULL</span>, (aslmsg)aux, <span class="number">-1</span>);</span><br><span class="line">      _asl_send_message(<span class="literal">NULL</span>, eval, aux, <span class="literal">NULL</span>);</span><br><span class="line">      asl_msg_release(aux);</span><br><span class="line">      dispatch_release(md);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (done) &#123;</span><br><span class="line">    <span class="comment">//semaphore +1使得不需要再等待继续执行下去。</span></span><br><span class="line">    dispatch_semaphore_signal(sem);</span><br><span class="line">    dispatch_release(pipe_channel);</span><br><span class="line">    dispatch_release(pipe_q);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="九、Dispatch-Source-用GCD监视进程"><a href="#九、Dispatch-Source-用GCD监视进程" class="headerlink" title="九、Dispatch Source 用GCD监视进程"></a>九、Dispatch Source 用GCD监视进程</h4><p>Dispatch Source用于监听系统的底层对象，比如文件描述符，Mach端口，信号量等。主要处理的事件如下表 </p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">DISPATCH_SOURCE_TYPE_DATA_ADD</td>
<td align="center">数据增加</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_DATA_OR</td>
<td align="center">数据OR</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_MACH_SEND</td>
<td align="center">Mach端口发送</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_MACH_RECV</td>
<td align="center">Mach端口接收</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_MEMORYPRESSURE</td>
<td align="center">内存情况</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_PROC</td>
<td align="center">进程事件</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_READ</td>
<td align="center">读数据</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_SIGNAL</td>
<td align="center">信号</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_TIMER</td>
<td align="center">定时器</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_VNODE</td>
<td align="center">文件系统变化</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_WRITE</td>
<td align="center">文件写入</td>
</tr>
</tbody></table>
<p>方法 </p>
<ul>
<li>dispatch_source_create：创建 dispatch source ，创建后会处于挂起状态进行事件接收，需要设置事件处理handler进行事件处理。 </li>
<li>dispatch_source_set_event_handler：设置事件处理 handler </li>
<li>dispatch_source_set_cancel_handler：事件取消handler，就是在 dispatch source 释放前做些清理的事。 </li>
<li>dispatch_source_cancel：关闭 dispatch source，设置的事件处理 handler 不会被执行，已经执行的事件handler不会取消。 </li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSRunningApplication</span> *mail = [<span class="built_in">NSRunningApplication</span> runningApplicationsWithBundleIdentifier:<span class="string">@"com.apple.mail"</span>];</span><br><span class="line"><span class="keyword">if</span> (mail == <span class="literal">nil</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pid_t <span class="keyword">const</span> pid = mail.processIdentifier;</span><br><span class="line"><span class="keyword">self</span>.source = dispatch_source_create(DISPATCH_SOURCE_TYPE_PROC, pid, </span><br><span class="line">                                     DISPATCH_PROC_EXIT, </span><br><span class="line">                                     DISPATCH_TARGET_QUEUE_DEFAULT);</span><br><span class="line">dispatch_source_set_event_handler(<span class="keyword">self</span>.source, ^()&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"Mail quit."</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在事件源传到你的事件处理前需要调用dispatch_resume()这个方法</span></span><br><span class="line">dispatch_resume(<span class="keyword">self</span>.source);</span><br></pre></td></tr></table></figure>



<p>监视文件夹内文件变化 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSURL</span> *directoryURL; <span class="comment">// assume this is set to a directory</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> fd = open([[directoryURL path] fileSystemRepresentation], O_EVTONLY);</span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">char</span> buffer[<span class="number">80</span>];</span><br><span class="line">	strerror_r(errno, buffer, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"Unable to open "</span>%<span class="string">@": %s (%d)"</span>, [directoryURL path], buffer, errno);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_VNODE, </span><br><span class="line">                                                  fd,</span><br><span class="line">                                                  DISPATCH_VNODE_WRITE | </span><br><span class="line">                                                  DISPATCH_VNODE_DELETE, </span><br><span class="line">                                                  DISPATCH_TARGET_QUEUE_DEFAULT);</span><br><span class="line"></span><br><span class="line">dispatch_source_set_event_handler(source, ^()&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">const</span> data = dispatch_source_get_data(source);</span><br><span class="line">	<span class="keyword">if</span> (data &amp; DISPATCH_VNODE_WRITE) &#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"The directory changed."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (data &amp; DISPATCH_VNODE_DELETE) &#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"The directory has been deleted."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_source_set_cancel_handler(source, ^()&#123;</span><br><span class="line">	close(fd);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.source = source;</span><br><span class="line">dispatch_resume(<span class="keyword">self</span>.source);</span><br></pre></td></tr></table></figure>

<p><strong>还要注意需要用DISPATCH_VNODE_DELETE 去检查监视的文件或文件夹是否被删除，如果删除了就停止监听</strong></p>
<p>NSTimer在主线程的runloop里会在runloop切换其它模式时停止，这时就需要手动在子线程开启一个模式为 NSRunLoopCommonModes的runloop， 如果不想开启一个新的runloop可以用不跟runloop关联的dispatch source timer，如下。 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER,</span><br><span class="line">                                                  <span class="number">0</span>, </span><br><span class="line">                                                  <span class="number">0</span>, </span><br><span class="line">                                                  DISPATCH_TARGET_QUEUE_DEFAULT);</span><br><span class="line"></span><br><span class="line">dispatch_source_set_event_handler(source, ^()&#123;</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"Time flies."</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_time_t start</span><br><span class="line">dispatch_source_set_timer(source, </span><br><span class="line">                          DISPATCH_TIME_NOW, </span><br><span class="line">                          <span class="number">5</span>ull * <span class="built_in">NSEC_PER_SEC</span>,</span><br><span class="line">                          <span class="number">100</span>ull * <span class="built_in">NSEC_PER_MSEC</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.source = source;</span><br><span class="line">dispatch_resume(<span class="keyword">self</span>.source);</span><br></pre></td></tr></table></figure>



<h4 id="十、Dispatch-Semaphore和的介绍"><a href="#十、Dispatch-Semaphore和的介绍" class="headerlink" title="十、Dispatch Semaphore和的介绍"></a>十、Dispatch Semaphore和的介绍</h4><p>另外一种保证同步的方法。使用 dispatch_semaphore_signal 加1 dispatch_semaphore_wait 减1，为0时等待的设置方式来达到线程同步的目的和 同步锁一样能够解决资源抢占的问题。 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dispatch semaphore</span></span><br><span class="line">- (<span class="keyword">void</span>)dispatchSemaphoreDemo &#123;</span><br><span class="line">  <span class="comment">//创建semaphore</span></span><br><span class="line">	dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"start"</span>);</span><br><span class="line">	[<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1.</span>f];</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"semaphore +1"</span>);</span><br><span class="line">	dispatch_semaphore_signal(semaphore); <span class="comment">//+1 semaphore</span></span><br><span class="line">    </span><br><span class="line">	&#125;);</span><br><span class="line">	dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"continue"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="十一、锁"><a href="#十一、锁" class="headerlink" title="十一、锁"></a>十一、锁</h4><p>这里简单介绍下iOS中常用的各种锁和他们的性能。 </p>
<ul>
<li>NSRecursiveLock：递归锁，可以在一个线程中反复获取锁不会造成死锁，这个过程会记录获取锁和释放锁的次数来达到何时释放的作用。 </li>
<li>NSDistributedLock：分布锁，基于文件方式的锁机制，可以跨进程访问。 </li>
<li>NSConditionLock：条件锁，用户定义条件，确保一个线程可以获取满足一定条件的锁。 因为线程间竞争会涉及到条件锁检测，系统调用上下切换频繁导致耗时是几个锁里最长的。 </li>
<li>OSSpinLock：自旋锁，不进入内核，减少上下文切换，性能最高，但抢占多时会占用较多cpu，好点多，这时使用pthread_mutex较好。 </li>
<li>pthread_mutex_t：同步锁基于C语言，底层api性能高，使用方法和其它的类似。 </li>
<li>@synchronized：更加简单。 </li>
</ul>
<h4 id="十二、dispatch-suspend和dispatch-resume挂起和恢复队列"><a href="#十二、dispatch-suspend和dispatch-resume挂起和恢复队列" class="headerlink" title="十二、dispatch_suspend和dispatch_resume挂起和恢复队列"></a>十二、dispatch_suspend和dispatch_resume挂起和恢复队列</h4><p>dispatch_suspend这里挂起不会暂停正在执行的block，只是能够暂停还没执行的block。 </p>
<h4 id="十三、dispatch-set-context和dispatch-get-context"><a href="#十三、dispatch-set-context和dispatch-get-context" class="headerlink" title="十三、dispatch_set_context和dispatch_get_context"></a>十三、dispatch_set_context和dispatch_get_context</h4><p>?</p>
<h2 id="GCD深入操作"><a href="#GCD深入操作" class="headerlink" title="GCD深入操作"></a>GCD深入操作</h2><ul>
<li>缓冲区：dispatch_data_t 基于零碎的内存区域，使用 dispatch_data_apply 来遍历，还可以用 dispatch_data_create_subrange 来创建一个不做任何拷贝的子区域 </li>
<li>I/O调度：使用GCD提供的dispatch_io_read，dispatch_io_write和dispatch_io_close </li>
<li>测试：使用 dispatch_benchmark 小工具 </li>
<li>原子操作： libkern/OSAtomic.h 里可以查看那些函数，用于底层多线程编程。 </li>
</ul>
<h3 id="GCD死锁"><a href="#GCD死锁" class="headerlink" title="GCD死锁"></a>GCD死锁</h3><p>串行队列里面同步一个串行队列就会死锁，解决的方法就是将同步的串行队列放到另外一个线程就能够解决。 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)deadLockCase1 &#123;</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</span><br><span class="line">	<span class="comment">//主队列的同步线程，按照FIFO的原则（先入先出），2排在3后面会等3执行完，但因为同步线程，3又要等2执行完，相互等待成为死锁。</span></span><br><span class="line">	<span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)deadLockCase2 &#123;</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</span><br><span class="line">	<span class="comment">//3会等2，因为2在全局并行队列里，不需要等待3，这样2执行完回到主队列，3就开始执行</span></span><br><span class="line">	<span class="built_in">dispatch_sync</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="number">0</span>), ^&#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)deadLockCase3 &#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.serialqueue"</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</span><br><span class="line">	<span class="built_in">dispatch_async</span>(serialQueue, ^&#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</span><br><span class="line">			<span class="comment">//串行队列里面同步一个串行队列就会死锁</span></span><br><span class="line">		<span class="built_in">dispatch_sync</span>(serialQueue, ^&#123;</span><br><span class="line">			<span class="built_in">NSLog</span>(<span class="string">@"3"</span>);</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"4"</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"5"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)deadLockCase4 &#123;</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</span><br><span class="line">	<span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</span><br><span class="line">		<span class="comment">//将同步的串行队列放到另外一个线程就能够解决</span></span><br><span class="line">		<span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">			<span class="built_in">NSLog</span>(<span class="string">@"3"</span>);</span><br><span class="line">		&#125;);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"4"</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"5"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)deadLockCase5 &#123;</span><br><span class="line">	<span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</span><br><span class="line">		<span class="comment">//回到主线程发现死循环后面就没法执行了</span></span><br><span class="line">		<span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">			<span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"3"</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"4"</span>);</span><br><span class="line">	<span class="comment">//死循环</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="GCD实际使用"><a href="#GCD实际使用" class="headerlink" title="GCD实际使用"></a>GCD实际使用</h3><p>FMDB如何使用 <strong>dispatch_queue_set_specific</strong> 和 <strong>dispatch_get_specific</strong> 来防止死锁，作用类似objc_setAssociatedObject跟objc_getAssociatedObject </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">void</span> * <span class="keyword">const</span> kDispatchQueueSpecificKey = &amp;kDispatchQueueSpecificKey;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建串行队列，所有数据库的操作都在这个队列里</span></span><br><span class="line">_queue = dispatch_queue_create([[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"fmdb.%@"</span>, <span class="keyword">self</span>] UTF8String],</span><br><span class="line">                               <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//标记队列</span></span><br><span class="line">dispatch_queue_set_specific(_queue, kDispatchQueueSpecificKey, (__bridge <span class="keyword">void</span> *)<span class="keyword">self</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查是否是同一个队列来避免死锁的方法</span></span><br><span class="line">- (<span class="keyword">void</span>)inDatabase:(<span class="keyword">void</span> (^)(FMDatabase *db))block &#123;</span><br><span class="line">	 FMDatabaseQueue *currentSyncQueue = (__bridge <span class="keyword">id</span>)dispatch_get_specific(kDispatchQueueSpecificKey);</span><br><span class="line">	assert(currentSyncQueue != <span class="keyword">self</span> &amp;&amp; <span class="string">"inDatabase: was called reentrantly on the same queue,which would lead to a deadlock"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="iOS系统版本新特性"><a href="#iOS系统版本新特性" class="headerlink" title="iOS系统版本新特性"></a>iOS系统版本新特性</h2><h3 id="iOS8"><a href="#iOS8" class="headerlink" title="iOS8"></a>iOS8</h3><p>iOS8 新加了一个功能叫 Quality of Service(QoS)，里面提供了一下几个更容易理解的枚举名来使用user interactive，user initiated，utility和background。下面的表做了对比 </p>
<table>
<thead>
<tr>
<th align="center">Global queue</th>
<th align="center">Corresponding QoS class</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Main thread</td>
<td align="center">NSQualityOfServiceUserInteractive</td>
<td align="center">UI相关，交互等</td>
</tr>
<tr>
<td align="center">DISPATCH_QUEUE_PRIORITY_HIGH</td>
<td align="center">NSQualityOfServiceUserInitiated</td>
<td align="center">用户发起需要马上得到结果进行后续任务</td>
</tr>
<tr>
<td align="center">DISPATCH_QUEUE_PRIORITY_DEFAULT</td>
<td align="center">NSQualityOfServiceDefault</td>
<td align="center">默认的不应该使用这个设置任务</td>
</tr>
<tr>
<td align="center">DISPATCH_QUEUE_PRIORITY_LOW</td>
<td align="center">NSQualityOfServiceUtility</td>
<td align="center">花费时间稍多比如下载，需要几秒或几分钟的</td>
</tr>
<tr>
<td align="center">DISPATCH_QUEUE_PRIORITY_BACKGROUND</td>
<td align="center">NSQualityOfServiceBackground</td>
<td align="center">不可见在后台的操作可能需要好几分钟甚至几小时的</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>我</title>
    <url>/about/index.html</url>
    <content><![CDATA[<h3 id="笔名：YYLittleCat"><a href="#笔名：YYLittleCat" class="headerlink" title="笔名：YYLittleCat"></a>笔名：YYLittleCat</h3><h3 id="法号：迷"><a href="#法号：迷" class="headerlink" title="法号：迷"></a>法号：迷</h3><h3 id="特点：漂亮"><a href="#特点：漂亮" class="headerlink" title="特点：漂亮"></a>特点：漂亮</h3><h3 id="爱好：周星驰的电影、柯南"><a href="#爱好：周星驰的电影、柯南" class="headerlink" title="爱好：周星驰的电影、柯南"></a>爱好：周星驰的电影、柯南</h3><h3 id="宠物：🐈、🐈、🐢"><a href="#宠物：🐈、🐈、🐢" class="headerlink" title="宠物：🐈、🐈、🐢"></a>宠物：🐈、🐈、🐢</h3><h3 id="职业：程序媛"><a href="#职业：程序媛" class="headerlink" title="职业：程序媛"></a>职业：程序媛</h3><h3 id="社交：欢迎文明交流"><a href="#社交：欢迎文明交流" class="headerlink" title="社交：欢迎文明交流"></a>社交：欢迎文明交流</h3><p>​    <img src="/about/index/lisence.jpg" alt></p>
<p>​    或者，赏小弟弟几毛钱买根冰棍吃也可嘛→🤑🤑🤑🤑🤑🤓🤓🤓🤓🤓</p>
<p>​    <img src="/about/index/money.png" alt></p>
]]></content>
  </entry>
  <entry>
    <title>search</title>
    <url>/search/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>标签🏷</title>
    <url>/tags/index.html</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center">🤓 <a href="iOS">iOS</a></th>
<th align="center">🛠 <a href="/tags/Xcode/">Xcode</a></th>
<th align="center">🔨 <a href="pod">Pod</a></th>
</tr>
</thead>
<tbody><tr>
<td align="center">😜 <a href="/tags/7788/">7788</a></td>
<td align="center">📖 <a href="/tags/读书/">读书</a></td>
<td align="center">🕸 <a href="/tags/网络/">网络</a></td>
</tr>
<tr>
<td align="center">💻 <a href="/tags/Mac/">Mac</a></td>
<td align="center">📮 <a href="邮箱">邮箱</a></td>
<td align="center">🤡 <a href="/tags/瞎扯/">瞎扯</a></td>
</tr>
<tr>
<td align="center">📑 <a href="WebView">WebView</a></td>
<td align="center">😍 <a href="/tags/我/">我</a></td>
<td align="center">💾 <a href="/tags/服务器/">服务器</a></td>
</tr>
<tr>
<td align="center">💿 <a href="/tags/CentOS/">CentOS</a></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>回忆</title>
    <url>/gallery/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>昆明</title>
    <url>/gallery/%E6%98%86%E6%98%8E/index.html</url>
    <content><![CDATA[<p><a href="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/%E6%98%86%E6%98%8E/km_5.jpg" target="_blank" rel="noopener">https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/%E6%98%86%E6%98%8E/km_5.jpg</a></p>
]]></content>
  </entry>
</search>
